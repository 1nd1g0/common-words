[{"word":"0L","context":[["do_exit(0L)",183],["0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,",145],["0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,",145],["0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,",145],["0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,",145],["0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,",145],["0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,",145],["0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,",145],["0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,",145],["0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,",145]]},{"word":"0i","context":[["0x1p+0 + 0x0p+0i, 0x1p+0 + 0x0p+0i, 0x1p+0 + 0x0p+0i, 0x1p+0 + 0x0p+0i,",328],["0x1p+0 + 0x0p+0i, 0x1p+0 + 0x0p+0i, 0x1p+0 + 0x0p+0i, 0x1p+0 + 0x0p+0i,",328],["0x1p+0 + 0x0p+0i, 0x1p+0 + 0x0p+0i, 0x1p+0 + 0x0p+0i, 0x1p+0 + 0x0p+0i,",328],["0x1p+0 + 0x0p+0i, 0x1p+0 + 0x0p+0i, 0x1p+0 + 0x0p+0i, 0x1p+0 + 0x0p+0i,",328],["0+0i, 0+0i, 0+0i, 0+0i, 0+0i, 0+0i, 0+0i, 0+0i, 0+0i, 0+0i, 0+0i,",187],["0+0i, 0+0i, 0+0i, 0+0i, 0+0i, 0+0i, 0+0i, 0+0i, 0+0i, 0+0i, 0+0i,",187],["0+0i, 0+0i, 0+0i, 0+0i, 0+0i, 0+0i, 0+0i, 0+0i, 0+0i, 0+0i, 0+0i,",187],["0+0i, 0+0i, 0+0i, 0+0i, 0+0i, 0+0i, 0+0i, 0+0i, 0+0i, 0+0i, 0+0i,",187],["0+0i, 0+0i, 0+0i, 0+0i, 0+0i, 0+0i, 0+0i, 0+0i, 0+0i, 0+0i, 0+0i,",187],["0+0i, 0+0i, 0+0i, 0+0i, 0+0i, 0+0i, 0+0i, 0+0i, 0+0i, 0+0i, 0+0i,",187]]},{"word":"16777215L","context":[["16777215L, 16777215L, 16777215L, 16777215L, 16777215L, 16777215L,",742],["16777215L, 16777215L, 16777215L, 16777215L, 16777215L, 16777215L,",742],["16777215L, 16777215L, 16777215L, 16777215L, 16777215L, 16777215L,",742],["16777215L, 16777215L, 16777215L, 16777215L, 16777215L, 16777215L,",742],["16777215L, 16777215L, 16777215L, 16777215L, 16777215L, 16777215L,",742],["16777215L, 16777215L, 16777215L, 16777215L, 16777215L, 16777215L,",742]]},{"word":"1L","context":[["1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L,",1311],["1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L,",1311],["1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L,",1311],["1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L,",1311],["1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L,",1311],["1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L,",1311],["1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L,",1311],["1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L,",1311],["1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L,",1311],["1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L,",1311]]},{"word":"1e","context":[[",  identicalTo( expected, tol = 1e-6 ) )",353],["tolerance = 1e-3)",144],["tolerance = 1e-6)",142],["tolerance = 1e-2)",117],["##-   100 -1e-13 Inf -Inf NaN 3.14 NA",76],["epsilon <- 1e-5",60],["checkPCAModel(fitH2O, fitR, tolerance = 1e-5)",57],["tollerance = 1e-2)",38],["if(abs(rate*scale - 1) < 1e-15)",36],["tolerance = 1e-4)",34]]},{"word":"2012L","context},{"word":"2L","context":[["2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L,",945],["2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L,",945],["2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L,",945],["2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L,",945],["2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L,",945],["2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L,",945],["2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L,",945],["2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L,",945],["2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L,",945],["2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L,",945]]},{"word":"3L","context":[["3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L,",759],["3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L,",759],["3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L,",759],["3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L,",759],["3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L,",759],["3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L,",759],["3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L,",759],["3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L,",759],["3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L,",759],["3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L,",759]]},{"word":"4L","context":[["unit(bounds[4L], \"inches\")",126],["4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L,",121],["4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L,",121],["4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L,",121],["4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L,",121],["4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L,",121],["4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L,",121],["4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L,",121],["4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L,",121],["4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L,",121]]},{"word":"5L","context":[["5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L,",130],["5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L,",130],["5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L,",130],["5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L,",130],["5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L,",130],["5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L,",130],["5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L,",130],["5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L,",130],["5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L,",130],["5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L,",130]]},{"word":"6L","context":[["6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L,",76],["6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L,",76],["6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L,",76],["6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L,",76],["6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L,",76],["6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L,",76],["6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L,",76],["6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L,",76],["6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L,",76],["6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L,",76]]},{"word":"7L","context":[["7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L,",84],["7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L,",84],["7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L,",84],["7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L,",84],["7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L,",84],["7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L,",84],["7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L,",84],["7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L,",84],["7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L,",84],["7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L,",84]]},{"word":"A","context":[["#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",5389],["#  A copy of the GNU General Public License is available at",5168],["# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",2572],["# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the",594],["## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",431],["#' @return A dataframe consisting of the vectors listed in the Description.",346],["# A function implemented by Diethelm Wuertz",283],["# along with this program.  A copy can be cound in the R installation",234],["#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",213],["#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",206]]},{"word":"AND","context":[["statement <- paste0(statement, \" AND\")",1666],["# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE",116],["# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR",58],["# \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT",58],["# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY",58],["# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS",58],["# STEPS 7 AND 8",34],["## IMPUTATION AND NORMALIZATION STEP (OFFLINE ON THE WHOLE DATASET)",33],["# THESE FIELDS DETERMINE REQUIRED INPUT AND DESCRIPTION",30],["# AUTHOR(S) AND VERSION HISTORY REMAIN INTACT.",27]]},{"word":"ANY","context":[["#  but WITHOUT ANY WARRANTY; without even the implied warranty of",5447],["# but WITHOUT ANY WARRANTY; without even the implied warranty of",3166],["# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",1415],["#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",717],["# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",605],["## but WITHOUT ANY WARRANTY; without even the implied warranty of",474],["#    but WITHOUT ANY WARRANTY; without even the implied warranty of",233],["#but WITHOUT ANY WARRANTY; without even the implied warranty of",214],["# ANY EXPRESS OR IMPLIED WARRANTY, INCLUDING THOSE OF NON-INFRINGEMENT,",199],["# WITHOUT ANY WARRANTY; without even the implied warranty of",180]]},{"word":"API","context":[["##' using \\code{RJSONIO::toJSON} to be used as the input to the API call.  If",498],["##' function which makes POST HTTP requests to the API server.",498],["##' received from the API server",498],["##' @return If the API call is successful, the parsed JSON of the API server",498],["##' @return If the API call is successful, the parsed JSON of the API server",498],["help=\"Rosette API key\"), make_option(c(\"-u\", \"--url\"), action=\"store\", default=NA, type='character',",33],["help=\"Rosette API url\"))",33],["\"They are not part of the API,\",",31],["nAPIs <- length(grep(\"Found non-API\", out))",30],["\"Compiled code should not call non-API entry points in R.\\n\")",30]]},{"word":"AS","context":[["# distributed under the License is distributed on an \"AS IS\" BASIS,",920],["#   distributed under the License is distributed on an \"AS IS\" BASIS,",717],["# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",605],["# distributed under the License is distributed on an 'AS IS' BASIS,",397],["# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR",122],["# \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT",58],["statement <- paste0(statement, \") = 0 THEN 'FAIL' ELSE 'PASS' END AS status;\")",55],["statement <- paste0(statement, \") != 0 THEN 'FAIL' ELSE 'PASS' END AS status;\")",55],["# software is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR",45],["## distributed under the License is distributed on an \"AS IS\" BASIS,",37]]},{"word":"ASCII","context":[["asc <- iconv(x, \"latin1\", \"ASCII\")",126],["## All field tags must be ASCII.",67],["problems <- with(rdas, (ASCII | compress == \"none\") & (size > 1e5))",66],["diff2 <- (rdas2$ASCII != rdas$ASCII) | (rdas2$compress != rdas$compress)",66],["diff2 <- (rdas2$ASCII != rdas$ASCII) | (rdas2$compress != rdas$compress)",66],["wrapLog(\"Portable packages must use only ASCII\",",63],["update <- with(rdas, ASCII | compress == \"none\" | version < 2)",44],["## FIXME: could use dumped files, except for use of encoding = \"ASCII\"",33],["writeLines(c(gettext(\"These fields must have ASCII values.\"), \"\"))",33],["gettext(\"All field tags must be ASCII.\"),",33]]},{"word":"All","context":[["#  All right reserved.",120],["# All rights reserved.",92],["# Copyright 2014 Google Inc. All rights reserved.",77],["## All field tags must be ASCII.",67],["## All models",64],["## All remaining checks give notes and not warnings.",60],["## All rights reserved.",55],["if (DF.yrs[i]==\"All\") {",52],["DF.yrs <- ordered(c(sort(unique(na.omit(Year))), \"All\"), levels=c(sort(unique(na.omit(Year))), \"All\"))",52],["DF.yrs <- ordered(c(sort(unique(na.omit(Year))), \"All\"), levels=c(sort(unique(na.omit(Year))), \"All\"))",52]]},{"word":"An","context":[["# An R-based population pharmacokinetic/",234],["#' @param x An \\linkS4class{H2OFrame} object.",199],["#' @param object An \\linkS4class{H2OClusteringModel} object.",152],["#' @param object An \\linkS4class{H2OModel} object.",103],["#' @param object An \\linkS4class{H2OModel} or \\linkS4class{H2OModelMetrics}",100],["#' @param x An H2O Frame object.",87],["#' @param x An H2OFrame object.",72],["#' @return An object of class \\code{XiMpLe.node}.",67],["##' @param appNameOrID An app identifier using either the name of an app",57],["#' @param x An H2O Frame object",45]]},{"word":"Apache","context":[["# Licensed under the Apache License, Version 2.0 (the \"License\");",865],["#   Licensed under the Apache License, Version 2.0 (the \"License\");",729],["# Licensed to the Apache Software Foundation (ASF) under one",607],["# to you under the Apache License, Version 2.0 (the",607],["# Licensed under the Apache License, Version 2.0 (the 'License');",398],["# The ASF licenses this file to You under the Apache License, Version 2.0",154],["# Licensed to the Apache Software Foundation (ASF) under one or more",154],["## Licensed under the Apache License, Version 2.0 (the \"License\");",36],["#  Licensed under the Apache License, Version 2.0 (the \"License\");",22],["# Licensed under the Apache License, Version 2.0; you may not use this file except",17]]},{"word":"Author","context":[["## Author: Andrew Hooker",171],["# Author: ecor",131],["#\tAuthor: Claudio Agostinelli                         #",103],["# Author: Autogenerated on 2013-12-18 17:01:19",93],["#   Author: Claudio Agostinelli                             #",92],["#  Author: Steven M. Boker",85],["# Author: Robin Elahi",81],["# Author: Michael D. Hunter",71],["# Author: Ryne Estabrook",69],["## Author: Martin John Hadley (orcid.org/0000-0002-3039-6849)",66]]},{"word":"B","context":[["# Copyright © 2010-2016 BeDataDriven Groep B.V. and contributors",309],["B=1000 # The number of replicates",110],["B <- as.matrix(readMM(paste(args[1], \"B.mtx\", sep=\"\")))",94],["B <- as.matrix(readMM(paste(args[1], \"B.mtx\", sep=\"\")))",94],["writeMM(as(B, \"CsparseMatrix\"), paste(args[2], \"B\", sep=\"\"));",90],["writeMM(as(B, \"CsparseMatrix\"), paste(args[2], \"B\", sep=\"\"));",90],["for (b in 1:B) {",80],["(AB <- rbind(A,B))",60],["#  Copyright (C) 1998 B. D. Ripley",59],["rcond(B)",48]]},{"word":"BASIS","context":[["# distributed under the License is distributed on an \"AS IS\" BASIS,",920],["#   distributed under the License is distributed on an \"AS IS\" BASIS,",717],["# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",605],["# distributed under the License is distributed on an 'AS IS' BASIS,",397],["# software is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR",45],["## distributed under the License is distributed on an \"AS IS\" BASIS,",37],["#  distributed under the License is distributed on an \"AS IS\" BASIS,",22],["#    distributed under the License is distributed on an \"AS IS\" BASIS,",13],["#   distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",12]]},{"word":"C","context":[["#  Copyright (C) 1995-2012 The R Core Team",1657],["#  Copyright (C) 1995-2015 The R Core Team",699],["#  Copyright (C) 1995-2013 The R Core Team",623],["#  Copyright (C) 1995-2014 The R Core Team",505],["# (C) Copyright IBM Corp. 2010, 2015",285],["# Copyright (C) 2005-2008 Andrew C. Hooker, Justin J. Wilkins,",234],["# Copyright (C) 2005-2008 Andrew C. Hooker, Justin J. Wilkins,",234],["# Copyright (C) 1998-2004 E. Niclas Jonsson and Mats Karlsson.",234],["# Copyright (C) 2009-2010 Andrew C. Hooker, Mats O. Karlsson and",234],["# Copyright (C) 2009-2010 Andrew C. Hooker, Mats O. Karlsson and",234]]},{"word":"CONDITIONS","context":[["# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",1415],["#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",717],["# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",605],["# CONDITIONS OF ANY KIND, either express or implied.  See the License",45],["## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",41],["#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",26],["#   WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",12],["#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",12]]},{"word":"Call","context":[["on.exit( .Call(\"R_igraph_finalizer\", PACKAGE=\"igraph\") )",382],["cat(\"Call:\\n\")",132],["dl.index <- grid.Call(L_getDLindex)",109],["bounds <- grid.Call(L_locnBounds, x$x, x$y, 0)",108],["bounds <- grid.Call(L_locnBounds, x$x, x$y, theta)",99],["bounds <- grid.Call(L_rectBounds, x$x, x$y, x$width, x$height,",72],["Call <- match.call()",70],["mc <- match.call(get(Call, baseenv()), e[keep])",66],["Call <- deparse(e[[1L]])[1L]",66],["grid.Call(L_setDLindex, as.integer(dl.index))",58]]},{"word":"Check","context":[["## Check that state and outcome are valid",194],["# Check expected number of models",109],["# Check Arguments:",98],["### Check the network and arguments to make sure they are appropriate.",95],["# Check parameters coverage",93],["Log.info(\"Check cardinality of grid, that is, the correct number of models have been created...\")",91],["Log.info(\"Check that the hyper_params that were passed to grid, were used to construct the models...\")",87],["## Check names of formals.",63],["#Check data type",60],["# Check",58]]},{"word":"Class","context":[["dQuote(Class)),",271],["dQuote(Class),",180],["ClassDef <- getClass(Class)",112],["assignClassDef(Class, classDef, where)",109],["ClassDef <- getClassDef(Class, where)",87],["msg, dQuote(Class),",84],["def <- getClassDef(Class, value, NULL)",81],["else if(isClass(Class, where = where))",79],["classDef <- Class",63],["Class <- ClassDef@className",61]]},{"word":"ClassDef","context":[["ClassDef",135],["ClassDef <- getClass(Class)",112],["ClassDef <- getClassDef(Class, where)",87],["ext <- ClassDef@contains",81],["Class <- ClassDef@className",61],["className <- ClassDef@className",54],["properties <- ClassDef@slots",54],["dQuote(ClassDef@className),",52],["ClassDef <- Class",50],["if(is(ClassDef, \"refClassRepresentation\"))",40]]},{"word":"Copyright","context":[["#  Copyright (C) 1995-2012 The R Core Team",1657],["#  Copyright (C) 1995-2015 The R Core Team",699],["#  Copyright (C) 1995-2013 The R Core Team",623],["#  Copyright (C) 1995-2014 The R Core Team",505],["#   Copyright 2007-2015 The OpenMx Project",316],["# Copyright 2015, Timothy W. Cook <tim@mlhim.org>",313],["#   Copyright 2007-2016 The OpenMx Project",309],["# Copyright © 2010-2016 BeDataDriven Groep B.V. and contributors",309],["# (C) Copyright IBM Corp. 2010, 2015",285],["# Copyright (C) 1998-2004 E. Niclas Jonsson and Mats Karlsson.",234]]},{"word":"Core","context":[["#  Copyright (C) 1995-2012 The R Core Team",1657],["#  Copyright (C) 1995-2015 The R Core Team",699],["#  Copyright (C) 1995-2013 The R Core Team",623],["#  Copyright (C) 1995-2014 The R Core Team",505],["#  Copyright (C) 1995-2016 The R Core Team",225],["\"Copyright (C) 1997-2013 The R Core Team.\",",51],["\"Copyright (C) 2000-2013 The R Core Team.\",",46],["#  Copyright (C) 1998-2012 The R Core Team",37],["#  Copyright (C) 1999-2012 The R Core Team",31],["\"Ripley\", \"Ripley\", \"McNeil\", \"R Core\"),",20]]},{"word":"D","context":[["##D",140],["gps.db <- odbcConnectAccess2007('D:/Dropbox/tracking_db/GPS_db.accdb')",94],["# Author: Michael D. Hunter",71],["#  Copyright (C) 1998 B. D. Ripley",59],["#' @author Marco D. Visser",49],["D",40],["#' @source Andrade, D. F., Ogliari, P. J. (2010). Estatística para as",40],["as.integer(D),",37],["return(D)",36],["## It is hard to think of anything apart from -I* and -D* that is",34]]},{"word":"DESCRIPTION","context":[["dfile <- file.path(dir, \"DESCRIPTION\")",627],["# DESCRIPTION:",134],["db <- .read_description(file.path(dir, \"DESCRIPTION\"))",117],["Rdeps <- .split_description(.read_description(file.path(pkgDir, \"DESCRIPTION\")))$Rdepends2",66],["## DESCRIPTION",62],["## Are these mentioned in DESCRIPTION?",58],["checkingLog(Log, \"DESCRIPTION meta-information\")",54],["f <- file.path(pkgdir, \"DESCRIPTION\")",50],["## We definitely need a valid DESCRIPTION file.",49],["if (file.exists(file.path(instdir, \"DESCRIPTION\"))) {",48]]},{"word":"Data","context":[["if(is.null(Data))",240],[".Data",172],[".Data = new('character'),",172],[".Object@.Data <-",172],["#Load Data",166],["# Data:",155],["# Data",130],["Mo1 <- try(Model(prop, Data), silent=!Debug[[\"DB.Model\"]])",124],["Data[[\"parm.names\"]][j],",117],["cat(oname, \" <- LaplacesDemon(Model, Data=\", dname,",115]]},{"word":"Date","context":[["diagnosis.date <- as.Date(sprintf(\"%s-%s-%s\", diagnosis.year, \"01\", \"01\"))",174],["# Date: 2009.08.01",107],["## Date of Authorship: 2016",66],["\"Date\",",65],["Jericho_data$Date <- as.Date(Jericho_data$Date)",57],["Jericho_data$Date <- as.Date(Jericho_data$Date)",57],["Jericho_data$Date <- as.Date(Jericho_data$Date)",57],["#trdata$date = as.Date(trdata$date,\"%Y-%m-%d\")",49],["temp=as.Date(\"20140901\",format=\"%Y%m%d\")",45],["xlab(\"Date\") +",43]]},{"word":"Dev","context":[["Dev[t.iter] <- Mo0[[\"Dev\"]]",270],["Dev[t.iter] <- Mo0[[\"Dev\"]]",270],["else if(any(!is.finite(c(Mo1[[\"LP\"]], Mo1[[\"Dev\"]],",246],["Dev=Dev,",215],["Dev=Dev,",215],["Specs, Acceptance, Dev, DiagCovar, LIV, Mon, Mo0, ScaleF,",168],["Dev[t.iter] <- Mo1[[\"Dev\"]]",81],["Dev[t.iter] <- Mo1[[\"Dev\"]]",81],["Acceptance, Dev, DiagCovar, LIV, Mon, Mo0, ScaleF, thinned, tuning,",78],["Dev <- matrix(m.old[[\"Dev\"]],1,1)",63]]},{"word":"E","context":[["# E. Niclas Jonsson.",234],["# Copyright (C) 1998-2004 E. Niclas Jonsson and Mats Karlsson.",234],["# Mats O. Karlsson and E. Niclas Jonsson.",234],["#\tE-mail: claudio@unive.it                            #",100],["#   E-mail: claudio@unive.it                                #",49],["mxAlgebra(L %*% t(L) + vec2diag(E), name=\"impliedCovs\"),",42],["mxAlgebra(vectorofOnes - (diag2vec(L %*% t(L))) , name=\"E\"),",40],["weights <- E(graph)$weight",39],["the.graph <- delete.edges(the.graph, E(the.graph)[weight < theta]);",37],["## However, in the latter case, there seems no way to infer E",33]]},{"word":"Error","context":[["warning( \"Error message is: \", geterrmessage() );",263],["#### Error Bars ###",112],["if (any(grepl(\"^Error\", out))) {",77],["# Error handling",57],["# Error check and build model",54],["if (any(grepl(\"^Error\", out)) || length(attr(out, \"status\"))) {",52],["# Error handling:",47],["error = function(e) paste(\"Error:\", conditionMessage(e)))",40],["msg <- gsub(\"\\n\", \"\\n  \", sub(\"[^:]*: *\", \"\", xi$Error),",33],["Error = .error, Warnings = .warnings)",33]]},{"word":"F","context":[["stringsAsFactors=F)",206],["axis(side=3, labels=F, lwd.ticks=2, cex.axis=1.2, las=1)",129],["if(F){",122],["if( (q_use==F) && (p_use==F) )",115],["if( (q_use==F) && (p_use==F) )",115],["if( (q_use==F) && (p_use==T) )",115],["sig_ix = sort(p_values,decreasing=F,index.return=T)$ix",115],["axis(side=4, labels=F, at=log(seq(0.1:1, by = 0.1)), lwd.ticks=2, cex.axis=1.2, las=1)",113],["stringsAsFactors = F)",109],["return(F)",99]]},{"word":"FALSE","context":[["return(FALSE)",2961],["first <- FALSE",1729],["stringsAsFactors = FALSE)",1517],["call. = FALSE, domain = NA)",1289],["FALSE",1115],["call. = FALSE)",1000],["stringsAsFactors=FALSE)",801],["row.names=FALSE)",515],["##' \\code{FALSE}.",498],["any <- FALSE",483]]},{"word":"FITNESS","context":[["#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",5389],["# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",2572],["# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the",594],["## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",431],["#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",213],["#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",206],["# MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. Please refer to the",201],["#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",122],["# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE",116],["#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",96]]},{"word":"FIXME","context":[["## <FIXME>",1380],["## </FIXME>",1341],["## FIXME: this does not need to be run in another process",128],["## FIXME: what if conversion fails on e.g. UTF-8 comments",99],["print(res) # FIXME print to Log?",44],["# FIXME",41],["## <FIXME split.matrix>",35],["#FIXME",35],["## FIXME: is this still needed now we do dependency analysis?",33],["## FIXME: not yet supported by .createExdotR.",33]]},{"word":"FOR","context":[["#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",5389],["# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",2572],["# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the",594],["## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",431],["#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",213],["#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",206],["# MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. Please refer to the",201],["#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",122],["# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER",116],["# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE",116]]},{"word":"FUN","context":[["FUN = sum),",506],["FUN <- match.fun(FUN)",175],["FUN <- match.fun(FUN)",175],["function(X, FUN) {",99],["signature(X = \"RDD\", FUN = \"function\"),",76],["FUN = function(X){",72],["FUN = function(x, y)",68],["FUN = sum)",49],["FUN = function(x) {",47],["FUN = fillMissingValues, mc.cores = detectCores() - 1,",42]]},{"word":"File","context":[["c(gettextf(\"File %s:\", sQuote(f)),",93],["msg <- c(if(one) \"File\" else \"Files\",",58],["File = fname,",36],["files <- meta$File",33],["writeLines(c(sprintf(\"Error in file '%s':\", xi$File),",33],["c(gettextf(\"File '%s':\", fname),",33],["#  File src/library/tools/R/QC.R",33],["list(File = file.path(dir_name, f),",33],["grep(\"^(ftype: not found|File type)\", out,",32],["wrapLog(\"File names must not differ just by case\",",32]]},{"word":"For","context":[["requireNamespace(\"testit\")# For asserting conditions meet expected patterns.",57],["# For each feature in the model",56],["## For each state, find the hospital of the given rank",56],["## For debugging",51],["# This does the summary. For each group's data frame, return a vector with",41],["# For compatibility with 2.2.21",40],["## For matching \\S4method{GENERIC}{SIGLIST}.",34],["## For all fields used by the R package management system, values",34],["## For the time being, ignore base packages missing from the",34],["out <- list()                       # For the time being ...",34]]},{"word":"Forest","context":[["chk.land.Forest",112],["chk.dil * (df.output[ , \"Accum.Forest\"] -",112],["model.bac.total = df.output[ , \"Accum.Forest\"],",112],["chk.dil * (df.output[ , \"pop.total.in.Forest\"] -",96],["chk.pop <- rbind(data.frame(location = \"forest\", pop = chk.pop.on.land.Forest),",96],["model.pop.total = df.output[ , \"pop.total.in.Forest\"],",96],["chk.pop.on.land.Forest <- chk.pop.on.land * (chk.land.Forest / chk.land.Total)",96],["chk.pop.on.land.Forest <- chk.pop.on.land * (chk.land.Forest / chk.land.Total)",96],["chk.land.Total <- chk.land.Forest + chk.land.Pasture + chk.land.RAOCUT",80],["chk.bac[tmp.rows, \"total.bac\"] / chk.Forest",60]]},{"word":"Foundation","context":[["#  the Free Software Foundation; either version 2 of the License, or",5121],["# the Free Software Foundation, either version 3 of the License, or",1475],["# Licensed to the Apache Software Foundation (ASF) under one",607],["# the Free Software Foundation; either version 2 of the License, or",574],["# License as published by the Free Software Foundation; either",321],["# Free Foundation, Inc., 59 Temple Place, Suite 330, Boston,",292],["# the Free Software Foundation, either version 2 of the License, or",264],["# as published by the Free Software Foundation, either version 3",234],["#    the Free Software Foundation, either version 3 of the License, or",211],["# as published by the Free Software Foundation; either version 2",192]]},{"word":"Free","context":[["#  the Free Software Foundation; either version 2 of the License, or",5121],["# the Free Software Foundation, either version 3 of the License, or",1475],["# the Free Software Foundation; either version 2 of the License, or",574],["# License as published by the Free Software Foundation; either",321],["# Free Foundation, Inc., 59 Temple Place, Suite 330, Boston,",292],["# along with this program; if not, write to the Free Software",285],["# the Free Software Foundation, either version 2 of the License, or",264],["# as published by the Free Software Foundation, either version 3",234],["#    the Free Software Foundation, either version 3 of the License, or",211],["# as published by the Free Software Foundation; either version 2",192]]},{"word":"GNU","context":[["#  GNU General Public License for more details.",5412],["#  it under the terms of the GNU General Public License as published by",5392],["#  A copy of the GNU General Public License is available at",5168],["# GNU General Public License for more details.",2481],["# You should have received a copy of the GNU General Public License",2410],["# it under the terms of the GNU General Public License as published by",2082],["## GNU General Public License for more details.",501],["## You should have received a copy of the GNU General Public License",362],["# GNU Lesser General Public License for more details.",311],["## it under the terms of the GNU General Public License as published by",298]]},{"word":"General","context":[["#  GNU General Public License for more details.",5412],["#  it under the terms of the GNU General Public License as published by",5392],["#  A copy of the GNU General Public License is available at",5168],["# GNU General Public License for more details.",2481],["# You should have received a copy of the GNU General Public License",2410],["# it under the terms of the GNU General Public License as published by",2082],["## GNU General Public License for more details.",501],["## You should have received a copy of the GNU General Public License",362],["# GNU Lesser General Public License for more details.",311],["## it under the terms of the GNU General Public License as published by",298]]},{"word":"Get","context":[["# Get the i,j matrix positions of the regions that contain this subplot",197],["# Get the swirl state",138],["# Get the value which a user either entered directly or was computed",137],["# Get the last expression which the user entered at the R console.",136],["# Get models",111],["## Get the \\item tags inside \\describe.",66],["# Get data",39],["# Get summary statistics of chain:",38],["#' Get trade report field",38],["## Get variable names and data set usages first, mostly for",34]]},{"word":"H2O","context":[["#' @param x An H2O Frame object.",87],["# Check if we are running inside the H2O network by seeing if we can touch",49],["hdfs_name_node = H2O.INTERNAL.HDFS.NAME.NODE",47],["#' @param x An H2O Frame object",45],["Log.info(\"Compare model statistics in R to model statistics in H2O\")",42],["Log.info(\"Print model statistics for R and H2O... \\n\")",41],["print(\"Prediction from H2O\")",40],["print(paste(\"Rows from H2O\", nrow(prediction1)))",40],["#' # Try to connect to a local H2O instance that is already running.",37],["# Train H2O GBM Model:",37]]},{"word":"I","context":[["swirl_out(\"That's not the expression I expected but it works.\")",54],["swirl_out(\"I've executed the correct expression in case the result is needed in an upcoming question.\")",54],["set.seed(12345, 'Mersenne-Twister','I')",51],["for(i in 1:I){",48],["mxMatrix(\"Iden\",nrow=100,name=\"I\",condenseSlots=T),",41],["\"2 'I channel surf'\")",38],["k <- sample(1:K,Kcol) # this is where I generate the sample of columns",36],["# Here I first replace % (i.e., misValperc) of the data with missing data (i.e., NA)",35],["## It is hard to think of anything apart from -I* and -D* that is",34],["# set where you want to host the figures (I store them in my Dropbox Public",32]]},{"word":"ID","context":[["##' @param objectID DNAnexus object ID",358],["#' The source name and the CCD ID are also included in each row to assist in identifying the source of the data.",304],["## 'id' is an integer vector indicating the monitor ID numbers",172],["## where 'id' is the monitor ID number and 'nobs' is the",89],["##' (\"app-name\") or its full ID (\"app-xxxx\")",57],["# To get annotation for each Illumina ID",55],["# To get the gene symbol for each Illumina ID",55],["#'  \\item{region_id}{ID for region within a statistical area}",50],["colnames(outcome_matrix)[1:3] <- c(\"Ind.ID\",\"origin.pop\",\"pred.pop\")",40],["# Select the columns Patient ID [1], MMSE [3]  (Mini-Mental State Exam score, a cognitive assessment measure),",36]]},{"word":"IS","context":[["# distributed under the License is distributed on an \"AS IS\" BASIS,",920],["#   distributed under the License is distributed on an \"AS IS\" BASIS,",717],["# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",605],["# distributed under the License is distributed on an 'AS IS' BASIS,",397],["# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR",122],["# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR",122],["statement <- paste0(statement, \" person_id IS NULL\")",96],["statement <- paste0(statement, \" provider_id IS NULL\")",60],["# \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT",58],["# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS",58]]},{"word":"If","context":[["# along with this program.  If not, see <http://www.gnu.org/licenses/>.",649],["##' using \\code{RJSONIO::toJSON} to be used as the input to the API call.  If",498],["##' @return If the API call is successful, the parsed JSON of the API server",498],["# directory under \\share\\licenses. If not, see http://www.gnu.org/licenses/.",234],["# If layout is NULL, then use 'cols' to determine layout",195],["#    along with this program.  If not, see <http://www.gnu.org/licenses/>.",145],["#along with this program.  If not, see <http://www.gnu.org/licenses/>.",137],["# along with icd. If not, see <http:#www.gnu.org/licenses/>.",135],["# along with Rcpp.  If not, see <http://www.gnu.org/licenses/>.",133],["# along with rkwarddev.  If not, see <http://www.gnu.org/licenses/>.",121]]},{"word":"Inf","context":[["return(Inf)",86],["loglik = -Inf",82],["##-   100 -1e-13 Inf -Inf NaN 3.14 NA",76],["##-   100 -1e-13 Inf -Inf NaN 3.14 NA",76],["if (is.na(td0)) td0 <- Inf",53],["output$bfMin0 <- Inf",50],["output$bfPlus0 <- Inf",50],["dfGenes = topTable(fit, coef = n[i], number = Inf)",49],["return(-Inf)",46],["xmin=-Inf, xmax=Inf, ymin=-Inf, ymax=Inf) + theme_blank",42]]},{"word":"Internal","context":[[".Internal(printDeferredWarnings())",68],[".Internal(as.vector(argv[[1]], argv[[2]]));",38],[".Internal(`as.vector`(argv[[1]], argv[[2]]));",36],["if((as.character(e[[1L]])[1L] %in% \".Internal\") &&",33],["calls <- calls[.call_names(calls) == \".Internal\"]",33],["out <- c(out, \"with calls to .Internal functions\",",33],["\"Found .Internal calls in the following functions:\"",33],["details <- pkgname != \"relax\" # has .Internal in a 10,000 line fun",32],["wrapLog(c(\"Packages should not call .Internal():\",",32],[".Internal(paste(list(...), sep, collapse))",31]]},{"word":"K","context":[["K=5 # Number of subspaces into which the test is projected",110],["for (k in 1:K) {",107],["for(k in 1:K){",105],["## hi     1   8   hi   K[hi](r)",78],["## theo   2   2 theo K[theo](r)",78],["## obs    1   1  obs  K[obs](r)",78],["## obs            observed value of K(r) for data pattern",78],["## lo   lower pointwise envelope of K(r) from simulations",78],["## theo                 theoretical value of K(r) for CSR",78],["## hi   upper pointwise envelope of K(r) from simulations",78]]},{"word":"KIND","context":[["# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",1415],["#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",717],["# KIND, either express or implied.  See the License for the",605],["# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR",122],["# CONDITIONS OF ANY KIND, either express or implied.  See the License",45],["## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",41],["#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",26],["## THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR",16],["#   WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",12],["#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",12]]},{"word":"L","context":[["return(L)",88],["L",65],["##' @author Gavin L. Simpson",54],["mxAlgebra(L %*% t(L) + vec2diag(E), name=\"impliedCovs\"),",42],["mxAlgebra(L %*% t(L) + vec2diag(E), name=\"impliedCovs\"),",42],["mxAlgebra(vectorofOnes - (diag2vec(L %*% t(L))) , name=\"E\"),",40],["mxAlgebra(vectorofOnes - (diag2vec(L %*% t(L))) , name=\"E\"),",40],["##  Summary function: L(r)",39],["## \tSummary function: L(r)",39],["IPM.kernel <- mk_K(nBigMatrix, params, L.z, U.z)",38]]},{"word":"LICENSE","context":[["#     http://www.apache.org/licenses/LICENSE-2.0",686],["#        http://www.apache.org/licenses/LICENSE-2.0",678],["#   http://www.apache.org/licenses/LICENSE-2.0",619],["# http://www.apache.org/licenses/LICENSE-2.0",586],["#    http://www.apache.org/licenses/LICENSE-2.0",161],["# file LICENSE in this package.",75],["cran_pkg_unuseful <- paste(cran_pkg_dir,\"LICENSE\",sep=\"/\")",68],["### Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.",61],["#     http://kim.bio.upenn.edu/software/LICENSE",45],["#      http://www.apache.org/licenses/LICENSE-2.0",41]]},{"word":"License","context":[["#  GNU General Public License for more details.",5412],["#  it under the terms of the GNU General Public License as published by",5392],["#  A copy of the GNU General Public License is available at",5168],["#  the Free Software Foundation; either version 2 of the License, or",5121],["# GNU General Public License for more details.",2481],["# You should have received a copy of the GNU General Public License",2410],["# it under the terms of the GNU General Public License as published by",2082],["# the Free Software Foundation, either version 3 of the License, or",1475],["# See the License for the specific language governing permissions and",1314],["# limitations under the License.",1311]]},{"word":"Licensed","context":[["# Licensed under the Apache License, Version 2.0 (the \"License\");",865],["#   Licensed under the Apache License, Version 2.0 (the \"License\");",729],["# Licensed to the Apache Software Foundation (ASF) under one",607],["# Licensed under the Apache License, Version 2.0 (the 'License');",398],["# Licensed to the Apache Software Foundation (ASF) under one or more",154],["## Licensed under the Apache License, Version 2.0 (the \"License\");",36],["# * Licensed Materials - Property of IBM",32],["# Licensed under the BSD 3-clause license (see LICENSE.txt)",24],["#  Licensed under the Apache License, Version 2.0 (the \"License\");",22],["# Licensed under the MIT License (MIT)",19]]},{"word":"Licenses","context":[["#  http://www.r-project.org/Licenses/",4000],["#  https://www.R-project.org/Licenses/",1168]]},{"word":"Load","context":[["# Load data",294],["## Load package into code_env.",238],["#Load Data",166],["# Load packages",150],["# Load the required libraries",138],["# Load Library",115],["# Load libraries",99],["### Load SGP Package",98],["### Load data",92],["# Load Libraries",87]]},{"word":"Log","context":[["} else resultLog(Log, \"OK\")",1491],["warningLog(Log)",1033],["printLog0(Log, paste(c(out, \"\"), collapse = \"\\n\"))",975],["printLog0(Log,",707],["if (!any) warningLog(Log)",644],["if(!any) warningLog(Log)",588],["printLog(Log,",578],["summaryLog(Log)",523],["errorLog(Log)",508],["if(!any) noteLog(Log)",482]]},{"word":"LogFile","context":[["file=LogFile, append=TRUE)",1113],["file=LogFile, append=TRUE)}",278],["stop(\"The Specs argument is not a list.\", file=LogFile,",171],["stop(\"The Specs argument is incorrect.\", file=LogFile,",171],["sep=\"\"), \"\\n\", file=LogFile, append=TRUE)}",170],["stop(\"The Specs argument is required.\", file=LogFile,",88],["LogFile)",84],["\"\\n\", file=LogFile, append=TRUE)}",51],["\"value(s).\\n\", file=LogFile, append=TRUE)",49],["thinned, Debug, LogFile)}",45]]},{"word":"M","context":[[",strftime(Sys.time(), format = \"%Y%m%d%H%M\"),",190],["#  Author: Steven M. Boker",85],["#' @author M.Beauvais",82],["for (j in 1:M) {",79],["return(M)",74],["for (j in 1:M){",65],["mynoiseqHo.deg = degenes(mynoiseqHo, q = 0.95, M = NULL)",60],["mynoiseqHo.deg2 = degenes(mynoiseqHo, q = 0.95, M = \"down\")",60],["mynoiseqHo.deg1 = degenes(mynoiseqHo, q = 0.95, M = \"up\")",60],["M",49]]},{"word":"MERCHANTABILITY","context":[["#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",5389],["# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",2572],["# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the",594],["## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",431],["#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",213],["#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",206],["# MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. Please refer to the",201],["#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",122],["# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,",114],["#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",96]]},{"word":"Matrix","context":[["library(\"Matrix\")",828],["library(Matrix)",374],["require(Matrix)",85],["Ytemp = NeuroIm1_Final_AD_vs_NC_training$Group; # Output Matrix Y for SuperLearner",36],["exceptions <- c(exceptions, \"Matrix\", \"lattice\")",32],["unlink(file.path(tmplib, c(\"Matrix\", \"lattice\", \"nlme\")), TRUE)",32],["## stats has ::: to Matrix, Matrix depends on lattice",32],["if (pkg == \"Matrix\") unlink(file.path(tmplib, \"lattice\"), TRUE)",32],["library(Matrix);",32],["#' @import Matrix",32]]},{"word":"Mo0","context":[["Mo1 <- Mo0",341],["Dev[t.iter] <- Mo0[[\"Dev\"]]",270],["Mo0 <- Mo1",242],["round(Mo0[[\"LP\"]],1), \"\\n\", sep=\"\",",227],["thinned[t.iter,] <- Mo0[[\"parm\"]]",223],["Mon[t.iter,] <- Mo0[[\"Monitor\"]]}",215],["prop <- Mo0[[\"parm\"]]",173],["Specs, Acceptance, Dev, DiagCovar, LIV, Mon, Mo0, ScaleF,",168],["\"Current:\", round(Mo0[[\"parm\"]][j]),",129],["log.alpha <- Mo1[[\"LP\"]] - Mo0[[\"LP\"]]",87]]},{"word":"Mo1","context":[["Mo1 <- Mo0",341],["else if(any(!is.finite(c(Mo1[[\"LP\"]], Mo1[[\"Dev\"]],",246],["else if(any(!is.finite(c(Mo1[[\"LP\"]], Mo1[[\"Dev\"]],",246],["Mo0 <- Mo1",242],["if(inherits(Mo1, \"try-error\")) {",217],["Mo1[[\"Monitor\"]])))) {",190],["Mo1 <- try(Model(prop, Data), silent=!Debug[[\"DB.Model\"]])",124],["log.alpha <- Mo1[[\"LP\"]] - Mo0[[\"LP\"]]",87],["Dev[t.iter] <- Mo1[[\"Dev\"]]",81],["thinned[t.iter,] <- Mo1[[\"parm\"]]",81]]},{"word":"Model","context":[["if(Debug[[\"DB.Model\"]] == TRUE) {",443],["#' The data is structured according to the Multi-Level Healthcare Information Modelling Reference Model release 2.5.0",304],["silent=!Debug[[\"DB.Model\"]])",171],["if(Debug[[\"DB.Model\"]] == TRUE)",135],["Mo1 <- try(Model(prop, Data), silent=!Debug[[\"DB.Model\"]])",124],["Mo1 <- try(Model(prop, Data), silent=!Debug[[\"DB.Model\"]])",124],["cat(oname, \" <- LaplacesDemon(Model, Data=\", dname,",115],["Mo1 <- try(Model(prop, Data),",81],["# Model parameters",59],["Mo1 <- try(Model(prop, Data), silent=TRUE)",59]]},{"word":"Month","context":[["by.x = \"month.chr\", by.y = \"Month\")",598],["chk.total.bac.by.month$Month <- factor(strftime(as.POSIXct(paste0(\"2016-\",1:12,\"-01\")), \"%b\"),",46],["names(chk.total.bac.by.month) <- c(\"Month\", \"manual.calc.bac.total\",",46],["names(chk.pasture.accum.by.month) <- c(\"Month\", \"manual.calc.bac.total\",",46],["chk.RAOCUT.pop.by.month$Month <- factor(chk.RAOCUT.pop.by.month$Month,",46],["chk.RAOCUT.pop.by.month$Month <- factor(chk.RAOCUT.pop.by.month$Month,",46],["chk.RAOCUT.bac.by.month$Month <- factor(chk.RAOCUT.bac.by.month$Month,",46],["chk.RAOCUT.accum.by.month$Month <- factor(chk.RAOCUT.accum.by.month$Month,",46],["num = match(chk.forest.accum.by.month$Month, month.abb))",46],["chk.RAOCUT.accum.by.month$Month <- factor(chk.RAOCUT.accum.by.month$Month,",46]]},{"word":"N","context":[["for (i in 1:N) {",234],["for(i in 1:N){",181],["stop(sprintf(ngettext(N,",144],["if (is.null(N)) return()",112],["N, nrows), domain = NA)",95],["tkgrid(tklabel(tt,text=\"Size of process (N) : \"), N.entry, sticky=\"w\")",91],["tkgrid(tklabel(tt,text=\"Size of process (N) : \"), N.entry, sticky=\"w\")",91],["N <- length(x)",90],["for (i in 1:N){",88],["N      <- as.numeric(tclObj(N))",82]]},{"word":"NA","context":[["domain = NA)",10683],["NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,",2253],["NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,",2253],["NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,",2253],["NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,",2253],["NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,",2253],["NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,",2253],["NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,",2253],["NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,",2253],["NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,",2253]]},{"word":"NOTE","context":[["## </NOTE>",1416],["## <NOTE>",1382],["# NOTE: may be called directly with pathsofar=NULL",150],["stop(\"CHIPSTER-NOTE: Your input file is not a sequence file that is compatible with the tool you try to use\")",49],["## NOTE: Do not round the result!",46],["# NOTE:",45],["#  *************NOTE *****************************",32],["## NOTE: Function may be used by async R process; must not call back into",27],["sprintf(\"NOTE: arguments in definition %s changed from (%s) to (%s)\",",26],["## FUTURE NOTE (7/09):  For now, we are using an attribute for conflicts,",26]]},{"word":"NULL","context":[["NULL",7330],["return(NULL)",5221],["invisible(NULL)",972],["return(invisible(NULL))",683],["out <- R_runR(Rcmd, R_opts2, \"R_DEFAULT_PACKAGES=NULL\")",510],["united$TempBreed <- NULL",504],["else NULL",445],["function(package, dir, lib.loc = NULL)",419],["class(x) <- NULL",336],["} else NULL",310]]},{"word":"No","context":[["\"no\" =, \"No\" =, \"false\" =, \"False\" =, \"FALSE\" = FALSE,",100],["#' No description yet",45],["stop('No column named ', by, ' in ', substitute(data), '.')",36],["\"Split No\"     = as.numeric(iSplit),     # from function param",33],["## No valid Encoding metadata.",33],["## No log file and thus no chance to find out",32],["legend(x=\"topright\",legend=c(\"Shocks\", \"No Shocks\"),lwd=c(2.5,2.5),col=c(\"black\", \"red\"), lty=c(1,1),cex=0.4,bty = \"n\")",32],["## Case A: No redirection of stdout/stderr from installation.",32],["## No point in this test if already installed in .Library",31],["warning(\"No observations (at least after removing missing values)\")",30]]},{"word":"Not","context":[["stop(\"Not a graph object\")",215],["stop(\"Not OK check your values\")",139],["# one or both dates is \"[Not Available]\".  count tells us how many good",122],["## Not run:",74],["## End(Not run)",73],["## Not yet:",66],["if (!is.igraph(graph)) { stop(\"Not a graph object\") }",52],["if ( str.filetype == \"Not an EMBOSS compatible sequence file\"){",50],["##' @param ...  Not used.  Forces remaining arguments to be specified by name.",49],["warning(gettextf(\"Not all arguments are of the same length, the following need to be recycled: %s\",",48]]},{"word":"Note","context":[["## Does the package have a NAMESPACE file?  Note that when",104],["# Note:",93],[".addFootnote(footnotes, symbol=\"<em>Note.</em>\", text=message)",71],["#' \tNote: This function requires acting user",67],["## (Note that as.character(sapply(exprs, \"[[\", 1L)) does not do",66],["# so raise an exception. (Note that builtins were handled earlier.)",51],["# Note: Check extreme",40],["print(      \"(Note: That is the 1-based data row number, not the file line number.\")",40],["# Note: bfPlus0, bfMin0: PREPARE",35],["## formula.  (Note that any argument name mismatch throws an",34]]},{"word":"OF","context":[["# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",1415],["#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",717],["# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",605],["# ANY EXPRESS OR IMPLIED WARRANTY, INCLUDING THOSE OF NON-INFRINGEMENT,",199],["# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR",122],["# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,",114],["# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,",114],["# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN",77],["# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.",60],["# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.",60]]},{"word":"OK","context":[["} else resultLog(Log, \"OK\")",1491],["if (!any) resultLog(Log, \"OK\")",402],["resultLog(Log, \"OK\")",326],["OK <- FALSE",183],["ns <- asNamespace(ns, base.OK = FALSE)",156],["stop(\"Not OK check your values\")",139],["OK <- TRUE",113],["OK <- c(OK, grep(p, objects_in_code, value = TRUE))",102],["objects_in_code <- unique(OK)",102],["OK <- c(OK, grep(p, objects_in_code, value = TRUE))",102]]},{"word":"OP","context":[["cb$putcode(RETURN.OP)",258],["if (cntxt$tailcall) cb$putcode(RETURN.OP)",161],["cb$putcode(INVISIBLE.OP)",120],["cb$putcode(LDNULL.OP)",105],["cb$putcode(PUSHNULLARG.OP)",75],["cb$putcode(SWAP.OP)",71],["cb$putcode(POP.OP)",60],["cb$putcode(GOTO.OP, loop.label)",45],["cb$putcode(GETFUN.OP, ci)",45],["cb$putcode(CHECKFUN.OP)",45]]},{"word":"OR","context":[["# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",1415],["#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",717],["# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",605],["# MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. Please refer to the",201],["# ANY EXPRESS OR IMPLIED WARRANTY, INCLUDING THOSE OF NON-INFRINGEMENT,",199],["# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR",122],["# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER",116],["# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER",116],["# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,",114],["# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN",77]]},{"word":"OS","context":[["if(.Platform$OS.type == \"windows\") {",326],["WINDOWS <- .Platform$OS.type == \"windows\"",233],["if(.Platform$OS.type == \"windows\")",233],["if (.Platform$OS.type == \"windows\") {",173],["if (.Platform$OS.type == \"windows\")",69],["if(.Platform$OS.type == \"windows\" || .Platform$GUI == \"AQUA\"",68],["if(.Platform$OS.type == \"unix\") {",59],["root=ifelse(.Platform$OS.type==\"windows\",\"c:/repos\",\"~/Repos\");",57],["if (.Platform$OS.type == \"unix\") {",51],["if ( .Platform$OS.type == 'unix' )",42]]},{"word":"Object","context":[[".Object",716],["return(.Object)",513],["slot(.Object, 'schemaLocation') <-",173],["slot(.Object, 'lang') <-",172],[".Object@.Data <-",172],["slot(.Object, 'slot_order') <-",172],["validObject(.Object)",130],["name <- .Object@name",95],["function(.Object, modelname, namespace) {",89],[".Object <- callNextMethod()",80]]},{"word":"P","context":[["R <- T - P",61],["return(P)",52],["P <- Fs",52],["#' @param lower.tail logical; if TRUE (default), probabilities are P[X <= x], otherwise, P[X > x]",44],["#' @param lower.tail logical; if TRUE (default), probabilities are P[X <= x], otherwise, P[X > x]",44],["m1 <- feval(y=e.ret,X=dy,P=P)$forecast[,method]*w",43],["m2 <- feval(y=e.ret,X=dp,P=P)$forecast[,method]*w",43],["P",43],["m1 <- feval(y=e.ret,X=dy,P=P)$forecast[,method]*w",43],["m3 <- feval(y=e.ret,X=ep,P=P)$forecast[,method]*w",43]]},{"word":"PARTICULAR","context":[["#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",5389],["# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",2572],["# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the",594],["## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",431],["#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",213],["#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",206],["# MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. Please refer to the",201],["#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",122],["# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE",116],["#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",96]]},{"word":"POSIXct","context":[["as.POSIXct(paste0(\"2016-\",1:12,\"-01\")), \"%b\"))",598],["x <- as.POSIXct(x)",77],["as.POSIXct(paste0(\"2016-\",1:12,\"-01\")), \"%b\"),",46],["as.POSIXct(paste0(\"2016-\",1:12,\"-01\")), \"%b\")))",46],["chk.total.bac.by.month$Month <- factor(strftime(as.POSIXct(paste0(\"2016-\",1:12,\"-01\")), \"%b\"),",46],["chk.total.pop.by.month$Month <- factor(strftime(as.POSIXct(paste0(\"2016-\",1:12,\"-01\")), \"%b\"),",46],["return(.POSIXct(x))",38],["return(.POSIXct(res, tz))",38],["dates <- as.POSIXct(dates,format =\"%m/%d/%Y\")",34],["valid_time_end <- as.POSIXct(ds)",33]]},{"word":"PR","context":[["## protect against failure (PR#9801)",39],["## Claimed at one time at least one fewer copies: PR#15274",32],["## dates with fractional seconds after 2038 (PR#15200)",27],["## PR#15454",25],["## workaround for PR#7842. terms.formula may have flipped interactions",25],["## PR#15535 c() \"promoted\" raw vectors to bad logical values",25],["## by functions in base and utils, including PR#15499",25],["## PR#15004",25],["## PR#15679",24],["## PR#15642 segfault when parsing overflowing reals",24]]},{"word":"PURPOSE","context":[["#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",5389],["# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",2572],["# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the",594],["## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",431],["#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",213],["#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",206],["# MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. Please refer to the",201],["#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",122],["# PURPOSE:",120],["# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE",116]]},{"word":"Package","context":[["\"See section 'Package structure'\",",189],["package <- meta[\"Package\"]",146],["pkg_name <- db[\"Package\"]",99],["### Load SGP Package",98],["new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,\"Package\"])]",67],["packages <- db[, \"Package\"]",65],["sQuote(desc[\"Package\"]),",57],["#' Type: \\tab Package\\cr",49],["c(.get_standard_package_names()$base, db[, \"Package\"]))",48],["sprintf(\"Package license conflicts with %s override\",",44]]},{"word":"Part","context":[["#  Part of the R package, http://www.R-project.org",3868],["#  Part of the R package, https://www.R-project.org",1164],["##   License: Part of R @VERSION@",32],["# Part of the FALCON (Framework of Adaptive ensembLes for the Comparison Of",28],["# Part of the hydroPSO R package, http://www.rforge.net/hydroPSO/ ;",23],["## Part  1:  Load R libraries and define some functions.",21],["#' Part 1. Manual. \\emph{FAO Fisheries Technical Paper}, (306.1, Rev. 2). 407 p.",21],["## Part  7:  Figures about nucleosome contribution value (NCV).",18],["## Part  6:  Classify DNA regions based on NTR.",18],["## Part  5:  Classify DNA regions based on NOL.",17]]},{"word":"Pasture","context":[["chk.Percent.Pasture.in.and.around.streams / 100",180],["model.bac.total = df.output[ , \"Accum.Pasture\"],",96],["chk.dil * (df.output[ , \"Accum.Pasture\"] -",96],["chk.land.Pasture",96],["chk.pop.on.land.Pasture <- chk.pop.on.land * (chk.land.Pasture / chk.land.Total)",80],["chk.pop.on.land.Pasture <- chk.pop.on.land * (chk.land.Pasture / chk.land.Total)",80],["chk.dil * (df.output[ , \"pop.total.on.Pasture\"] -",80],["model.pop.total = df.output[ , \"pop.total.on.Pasture\"],",80],["data.frame(location = \"pasture\", pop = chk.pop.on.land.Pasture),",80],["chk.land.Total <- chk.land.Forest + chk.land.Pasture + chk.land.RAOCUT",80]]},{"word":"Platform","context":[["if(.Platform$OS.type == \"windows\") {",326],["WINDOWS <- .Platform$OS.type == \"windows\"",233],["if(.Platform$OS.type == \"windows\")",233],["if (.Platform$OS.type == \"windows\") {",173],["if (.Platform$pkgType == \"source\")",130],["r_arch <- .Platform$r_arch",71],["if (.Platform$OS.type == \"windows\")",69],["if(.Platform$OS.type == \"windows\" || .Platform$GUI == \"AQUA\"",68],["if(.Platform$OS.type == \"windows\" || .Platform$GUI == \"AQUA\"",68],["if(.Platform$OS.type == \"unix\") {",59]]},{"word":"Public","context":[["#  GNU General Public License for more details.",5412],["#  it under the terms of the GNU General Public License as published by",5392],["#  A copy of the GNU General Public License is available at",5168],["# GNU General Public License for more details.",2481],["# You should have received a copy of the GNU General Public License",2410],["# it under the terms of the GNU General Public License as published by",2082],["## GNU General Public License for more details.",501],["## You should have received a copy of the GNU General Public License",362],["# GNU Lesser General Public License for more details.",311],["## it under the terms of the GNU General Public License as published by",298]]},{"word":"R","context":[["#  Part of the R package, http://www.R-project.org",3868],["#  Part of the R package, http://www.R-project.org",3868],["setwd(normalizePath(dirname(R.utils::commandArgs(asValues=TRUE)$\"f\")))",3565],["#  Copyright (C) 1995-2012 The R Core Team",1657],["#  https://www.R-project.org/Licenses/",1168],["#  Part of the R package, https://www.R-project.org",1164],["#  Part of the R package, https://www.R-project.org",1164],["source('../h2o-runit.R')",1120],["source('../../h2o-runit.R')",867],["#  Copyright (C) 1995-2015 The R Core Team",699]]},{"word":"RAOCUT","context":[["## on RAOCUT",172],["## bac on RAOCUT",126],["## pop on RAOCUT",126],["chk.RAOCUT.pop <- data.frame(",126],["chk.RAOCUT.bac <- data.frame(",126],["## accum load on RAOCUT by month",92],["tmp.table <- tableGrob(chk.RAOCUT.pop, show.rownames = FALSE)",92],["chk.RAOCUT.pop.by.month <-",92],["chk.RAOCUT.accum.by.month <-",92],["location = c(\"pasture\", \"forest\", \"RAOCUT\",\"stream\"),",92]]},{"word":"Rcmd","context":[["Rcmd <- paste(\"options(warn=1)\\n\",",750],["out <- R_runR(Rcmd, R_opts2, \"R_DEFAULT_PACKAGES=NULL\")",510],["out <- R_runR2(Rcmd)",256],["Rcmd <- paste(\"options(warn=1, showErrorCalls=FALSE)\\n\",",160],["out <- R_runR2(Rcmd, \"R_DEFAULT_PACKAGES=NULL\")",128],["out <- R_runR(Rcmd, opts, c(env, env1), arch = arch)",96],["Rcmd <-",56],["out <- R_runR(Rcmd, opts, env, arch = arch)",52],["out <- R_runR(Rcmd, opts, env1, arch = arch)",32],["Rcmd <- \"tools:::.check_package_subdirs(\\\".\\\")\\n\"",32]]},{"word":"Rd","context":[["stop(gettextf(\"directory '%s' does not contain Rd objects\", dir),",166],["## Build Rd data base.",68],["writeSection(Rd[[i]], sections[i])",66],["## If not, we build the Rd db from the sources:",62],["bad <- grepl(\"[.](log|aux|bbl|blg|dvi|toc|out|Rd|Rout|dbj|drv|ins)$\",",60],["already <- c(\"jss.cls\", \"jss.bst\", \"Rd.sty\", \"Sweave.sty\")",60],["sections <- RdTags(Rd)",59],["filename <- paste0(name, \".Rd\")",58],["Rdfile <- attr(Rd, \"Rdfile\")",49],["rds <- file.path(dir, \"Meta\", \"Rd.rds\")",46]]},{"word":"Return","context":[["# Return Value:",728],["# Return",161],["# Return:",101],["# Return result",98],["## Return a numeric vector of correlations",97],["## Return a data frame of the form:",92],["## Return the mean of the pollutant across all monitors list",85],["#Return",83],["## Return hospital name in that state with lowest 30-day death",69],["## Return hospital name in that state with the given rank",59]]},{"word":"Returns","context":[["# Returns:",1277],["# Returns TRUE if e$expr matches any of the expressions given",142],["## Returns:",120],["#\tReturns:",109],["# Returns",51],["#   Returns:",40],["#' Returns:",37],["#' @return Returns an object of class \\linkS4class{H2ODimReductionModel}.",31],["#Returns:",29],["# Returns:     none",26]]},{"word":"Rscript","context":[["#!/usr/bin/env Rscript",1591],["#!/usr/bin/Rscript",680],["#! /usr/bin/env Rscript",126],["#! /usr/bin/Rscript",91],["#!/usr/bin/Rscript --vanilla",84],["# input/output filenames are passed as two additional arguments to Rscript",50],["#!/bin/env Rscript",48],["#!/bin/Rscript",40],["#!/usr/bin/env Rscript --vanilla",39],["if(any(grepl(\"[^/]Rscript\", lines))) {",32]]},{"word":"S","context":[["return(S)",49],["print(.jcall(\"java/lang/System\", \"S\", \"getProperty\", \"java.version\"))",47],["for (s in 1:S) {",40],["##' @author Barry S Rowlingson",38],["Sstar <- sc %*% S %*% sc",38],["format = \"%Y-%m-%d %H:%M:%S\",",37],["## error in current S-PLUS versions.)",34],["#' Prasad, S., Fard, A., Gupta, V., Martinez, J., LeFevre, J., Xu, V., Hsu, M., Roy, I.",31],["#' Venkataraman, S., Bodzsar, E., Roy, I., AuYoung, A., and",31],["if(!is.matrix(S)) S <- matrix(S)",30]]},{"word":"S3","context":[["## Determine names of declared S3 methods and associated S3",136],["## Determine names of declared S3 methods and associated S3",136],["\", to S3 method '\", dprs(expr[[1]]),",51],["\"There is no matching S3 method or default for object, \",",51],["# If the S3 method's first argument, expr[[2]], is anything but atomic",51],["# At this point, fct should be an ordinary function or an S3 method.",51],["# Set this to True if you want to fetch the data directly from S3.",39],["## Should maybe get S3 methods from the registry ...",34],["## For matching \\(S3)?method{GENERIC}{CLASS}.",34],["## S3 replacement methods from namespace registration?",34]]},{"word":"S4","context":[["#' @param object an S4 class object",160],["## S4 classes or methods.",102],["## Also check the code in S4 methods.",67],["## The S4 'system' does **copy** base code into packages ....",60],["# If fct is an (S4) standardGeneric, match.call is likely to give a misleading result,",51],["#' @param object an S4 object",43],["## one S4 class so that we can compare (at least) the slot names?",34],["## Compare the 'structure' of S4 classes in an installed package",34],["c(undoc_things, list(\"S4 classes\" = unique(S4_classes)))",34],["## We avoid markup for indicating S4 methods, hence need to",34]]},{"word":"See","context":[["#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",5389],["# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",2572],["# See the License for the specific language governing permissions and",1314],["#   See the License for the specific language governing permissions and",729],["# or more contributor license agreements.  See the NOTICE file",607],["# KIND, either express or implied.  See the License for the",605],["# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the",594],["## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",431],["#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",213],["#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",206]]},{"word":"Set","context":[["# Set up the page",211],["# Set working directory",78],["print(\"Set variables for h2o.\")",73],["print(paste(\"Starting: Set \", i, sep = \"\"))",62],["print(paste(\"Finished: Set \", i, sep = \"\"))",62],["# Set the presence of the signal in the sample to TRUE",56],["# Set the default presence of the signal in the sample to FALSE",56],["# Set the value of the displaying label",51],["# Set up plot layout, map will go on top and histogram on bottom",50],["# Set JAVA_HOME, set max. memory, and load rJava library",46]]},{"word":"Software","context":[["#  the Free Software Foundation; either version 2 of the License, or",5121],["# the Free Software Foundation, either version 3 of the License, or",1475],["# Licensed to the Apache Software Foundation (ASF) under one",607],["# the Free Software Foundation; either version 2 of the License, or",574],["# License as published by the Free Software Foundation; either",321],["# along with this program; if not, write to the Free Software",285],["# the Free Software Foundation, either version 2 of the License, or",264],["# as published by the Free Software Foundation, either version 3",234],["#    the Free Software Foundation, either version 3 of the License, or",211],["# as published by the Free Software Foundation; either version 2",192]]},{"word":"Sys","context":[["Sys.sleep(1)",265],["Sys.setlocale(\"LC_CTYPE\", \"C\")",212],["hdfs_name_node <- Sys.getenv(c(\"NAME_NODE\"))",209],["!(Sys.getlocale(\"LC_CTYPE\") %in% c(\"C\", \"POSIX\"))) {",191],[",strftime(Sys.time(), format = \"%Y%m%d%H%M\"),",190],["start.time <- Sys.time()",166],["start <- Sys.time()",144],["Sys.sleep(2)",129],["end.time <- Sys.time()",113],["Sys.sleep(5)",109]]},{"word":"T","context":[["par(new=T)",722],["free=T,",231],["record = system.time(gcFirst = T,",119],["sig_ix = sort(p_values,decreasing=F,index.return=T)$ix",115],["if( (q_use==F) && (p_use==T) )",115],["verbose = T",109],["return(T)",107],["tkgrid(tklabel(tt,text=\"Final time (T) : \"), T.entry,sticky=\"w\")",91],["tkgrid(tklabel(tt,text=\"Final time (T) : \"), T.entry,sticky=\"w\")",91],["ds <- gsub('T', ' ', ds)",86]]},{"word":"THE","context":[["# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR",122],["# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE",116],["# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,",114],["# THE SOFTWARE.",77],["# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN",77],["# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN",77],["# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.",60],["# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS",58],["# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR",58],["# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE",58]]},{"word":"TRUE","context":[["setwd(normalizePath(dirname(R.utils::commandArgs(asValues=TRUE)$\"f\")))",3565],["TRUE",2384],["return(TRUE)",2383],["any <- TRUE",2245],["args <- commandArgs(TRUE)",1677],["file=LogFile, append=TRUE)",1113],["sgp.exact.grade.progression=TRUE,",1079],["append=TRUE)",1053],["args <- commandArgs(trailingOnly = TRUE)",826],["if (USER$Logged == TRUE)",629]]},{"word":"Team","context":[["#  Copyright (C) 1995-2012 The R Core Team",1657],["#  Copyright (C) 1995-2015 The R Core Team",699],["#  Copyright (C) 1995-2013 The R Core Team",623],["#  Copyright (C) 1995-2014 The R Core Team",505],["#  Copyright (C) 1995-2016 The R Core Team",225],["\"Copyright (C) 1997-2013 The R Core Team.\",",51],["\"Copyright (C) 2000-2013 The R Core Team.\",",46],["#  Copyright (C) 1998-2012 The R Core Team",37],["#  Copyright (C) 1999-2012 The R Core Team",31],["# Copyright (C) 2011  RAdmant Development Team",28]]},{"word":"The","context":[["#  Copyright (C) 1995-2012 The R Core Team",1657],["#  Copyright (C) 1995-2015 The R Core Team",699],["#  Copyright (C) 1995-2013 The R Core Team",623],["# regarding copyright ownership.  The ASF licenses this file",607],["#  Copyright (C) 1995-2014 The R Core Team",505],["#' @param fileList - The path/file name(s) of the XML file(s) to process.",337],["#' The semantic reference(s) for this data:",337],["#   Copyright 2007-2015 The OpenMx Project",316],["#   Copyright 2007-2016 The OpenMx Project",309],["#' The source name and the CCD ID are also included in each row to assist in identifying the source of the data.",304]]},{"word":"This","context":[["#  This program is distributed in the hope that it will be useful,",5265],["#  This program is free software; you can redistribute it and/or modify",5207],["# This program is distributed in the hope that it will be useful,",1782],["# This program is free software: you can redistribute it and/or modify",682],["# This program is free software; you can redistribute it and/or modify",594],["# This library is free software; you can redistribute it and/or",268],["# This library is distributed in the hope that it will be useful,",267],["# This file is a part of Xpose 4.",234],["# This file was generated by Rcpp::compileAttributes",216],["## This program is distributed in the hope that it will be useful,",210]]},{"word":"To","context":[["# To define column names",121],["# To get an integer value of number of arrays",108],["# To compare if the arrays are the last 10 arrays or not",108],["# To run a while loop to generate different plots",108],["# To add 10 to a while loop",108],["# To filter out samples based on donor information",88],["# To check the input parameter for generating figures",62],["# To get the gene symbol for each Illumina ID",55],["# To get annotation for each Illumina ID",55],["# To store Illumina IDs information",55]]},{"word":"UTF","context":[["## FIXME: what if conversion fails on e.g. UTF-8 comments",99],["#' @encoding UTF-8",79],["fileEncoding=\"UTF-8\")",58],["knitr::knit(a[1], a[2], quiet = TRUE, encoding = 'UTF-8', envir = .GlobalEnv)",48],["### Encoding: UTF-8",43],["if (!nzchar(enc)) enc <- \"UTF-8\"",36],["utf8 <<- utf8 + sum(enc == \"UTF-8\")",33],["\"Note: found %d marked UTF-8 string\",",33],["if (! enc %in% c(\"latin1\", \"latin2\", \"UTF-8\"))",33],["enc <- if(l10n[[\"UTF-8\"]]) \"UTF-8\" else utils::localeToCharset()",33]]},{"word":"Unless","context":[["# Unless required by applicable law or agreed to in writing, software",1318],["#   Unless required by applicable law or agreed to in writing, software",729],["# Unless required by applicable law or agreed to in writing,",605],["# Unless you have received this program directly from RStudio pursuant",175],["# Unless required by applicable law or agreed to in writing, this",45],["## Unless required by applicable law or agreed to in writing, software",41],["#  Unless required by applicable law or agreed to in writing, software",26],["## but report references to itself.  Unless they should be :: .",26],["#' @section WARNING: This will modify the original dataset. Unless this is intended,",19],["#    Unless required by applicable law or agreed to in writing, software",13]]},{"word":"UseMethod","context":[["body(fx) <- substitute(UseMethod(ff), list(ff=f))",85],["isS3 <- function(fct)isTRUE(grep(\"UseMethod\", body(fct)) > 0)",51],["UseMethod = as.character(e[[2L]]),",43],["## too broad in the sense that a UseMethod call in a local function",27],["##      function(e) <UME>  # UME = UseMethod Expression",27],["## semantics.  Something containing a literal call to UseMethod is",27],["assign(\"Complex\", function(z) UseMethod(\"Complex\"),",26],["assign(\"Ops\", function(e1, e2) UseMethod(\"Ops\"),",26],["assign(\"Math\", function(x, ...) UseMethod(\"Math\"),",26],["(length(grep(\"UseMethod\", deparse(f))) > 0) ||",26]]},{"word":"V","context":[["# Copyright © 2010-2016 BeDataDriven Groep B.V. and contributors",309],["V",214],["n = V(ig)$name",131],["V(ig)$label = as.character(lab$SYMBOL)",128],["V = as.matrix(readMM(paste(args[1], \"V.mtx\", sep=\"\")))",85],["V = as.matrix(readMM(paste(args[1], \"V.mtx\", sep=\"\")))",85],["V)",79],["V(",79],["V\\u000a",69],["V,",65]]},{"word":"Version","context":[["# Licensed under the Apache License, Version 2.0 (the \"License\");",865],["#   Licensed under the Apache License, Version 2.0 (the \"License\");",729],["# to you under the Apache License, Version 2.0 (the",607],["# Licensed under the Apache License, Version 2.0 (the 'License');",398],["# The ASF licenses this file to You under the Apache License, Version 2.0",154],["if (R.Version()$os == \"Win32\" || R.Version()$os == \"mingw32\") flush.console()",153],["if (R.Version()$os == \"Win32\" || R.Version()$os == \"mingw32\") flush.console()",153],["## delete class: Version 3 idiom",80],["v_m <- package_version(meta[\"Version\"])",63],["#\tmodify it under the terms of the GNU General Public License Version 2",52]]},{"word":"WARRANTIES","context":[["# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",1415],["#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",717],["# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",605],["# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,",114],["# \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT",58],["# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR",58],["# software is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR",45],["## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",41],["#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",26],["## AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,",24]]},{"word":"WARRANTY","context":[["#  but WITHOUT ANY WARRANTY; without even the implied warranty of",5447],["# but WITHOUT ANY WARRANTY; without even the implied warranty of",3166],["## but WITHOUT ANY WARRANTY; without even the implied warranty of",474],["#    but WITHOUT ANY WARRANTY; without even the implied warranty of",233],["#but WITHOUT ANY WARRANTY; without even the implied warranty of",214],["# ANY EXPRESS OR IMPLIED WARRANTY, INCLUDING THOSE OF NON-INFRINGEMENT,",199],["# WITHOUT ANY WARRANTY; without even the implied warranty of",180],["#   but WITHOUT ANY WARRANTY; without even the implied warranty of",129],["# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR",122],["#     but WITHOUT ANY WARRANTY; without even the implied warranty of",105]]},{"word":"WITHOUT","context":[["#  but WITHOUT ANY WARRANTY; without even the implied warranty of",5447],["# but WITHOUT ANY WARRANTY; without even the implied warranty of",3166],["# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",1415],["#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",717],["# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",605],["## but WITHOUT ANY WARRANTY; without even the implied warranty of",474],["#    but WITHOUT ANY WARRANTY; without even the implied warranty of",233],["#but WITHOUT ANY WARRANTY; without even the implied warranty of",214],["# GNU Affero General Public License. This program is distributed WITHOUT",199],["# WITHOUT ANY WARRANTY; without even the implied warranty of",180]]},{"word":"We","context":[["## We should really determine the name g dispatches for, see",68],["## We should be able to safely strip all backticks; alternatively,",66],["## We need to rempve '...': OTOH the argument could be NULL",66],["#We need MASS to dump the matrix to a file.",51],["## We definitely need a valid DESCRIPTION file.",49],["## (We set .libPaths)",42],["## We may still have \\S4method{}{} entries in functions, which",34],["## (in case 'verbose' was true).  We now add this as an attribute to",34],["## what is actually in the code.  We most likely also should do",34],["## We avoid markup for indicating S4 methods, hence need to",34]]},{"word":"X","context":[["return(X)",240],["X",213],["n <- nrow(X)",118],["function(X, FUN) {",99],["xj <- X[[j]]",94],["p <- ncol(X)",90],["signature(X = \"RDD\", FUN = \"function\"),",76],["X <- as.matrix(X)",75],["X <- as.matrix(X)",75],["FUN = function(X){",72]]},{"word":"XML","context":[["data$ccd <- XML::xmlName(root)",608],["library(XML)",567],["#' @param fileList - The path/file name(s) of the XML file(s) to process.",337],["root <- XML::xmlRoot(doc)",312],["doc <- XML::xmlTreeParse(sourceName, handlers=list('comment'=function(x,...){NULL}), asTree = TRUE)",304],["require(XML)",173],["library(\"XML\")",98],["rk.XML.row(",61],["rk.XML.col(",57],["#' @import httr XML",52]]},{"word":"Y","context":[[",strftime(Sys.time(), format = \"%Y%m%d%H%M\"),",190],["ncol(Data[[\"Y\"]]))",80],["if(is.null(Data[[\"Y\"]]))",74],["fit.probit <- probit(Y = y.i.o, X = X.o, s = s.o, knots = knots,",62],["#trdata$date = as.Date(trdata$date,\"%Y-%m-%d\")",49],["X = Y[, \"Close\", drop = FALSE];",48],["Y = X;",47],["temp=as.Date(\"20140901\",format=\"%Y%m%d\")",45],["colnames(X) = attr(Y, \"SName\");",43],["n <- length(Y)",42]]},{"word":"You","context":[["# You should have received a copy of the GNU General Public License",2410],["# You may obtain a copy of the License at",1264],["#   You may obtain a copy of the License at",729],["# with the License.  You may obtain a copy of the License at",608],["## You should have received a copy of the GNU General Public License",362],["# You should have received a copy of the GNU Library General",291],["#  You should have received a copy of the GNU General Public License",288],["# You should have received a copy of the GNU Lesser General Public License",263],["# You can find out more about building applications with Shiny here:",223],["#    You should have received a copy of the GNU General Public License",221]]},{"word":"_","context":[["paste(c(\"[._[:alnum:]]*\",",66],["plot_name <- paste(plot_name, idx, sep='_')",48],["fn = gsub(\" \", \"_\", cmdname, fixed=TRUE)",48],["# cmdname may have blanks that need to be converted to _ to match the file",48],["d = gsub('^_|[.][a-zA-Z]+$', '', a[1])",47],["fn <- file.path(lib, paste(\"_test_dir\", Sys.getpid(), sep = \"_\"))",40],["phenotype = paste(phenotype_timepoint, phenotype_suffix, sep=\"_\")",35],["pattern = \"^[.]__[CT]_\")))",34],["\"_\",",34],["sub(\".*:([^_]*).*\", \"\\\\1\", attr(env, \"name\", exact = TRUE))",33]]},{"word":"a","context":[["# You should have received a copy of the GNU General Public License",2410],["# You may obtain a copy of the License at",1264],["#   You may obtain a copy of the License at",729],["# with the License.  You may obtain a copy of the License at",608],["a",562],["a(g189",528],["##' method; it is a simple wrapper around the \\code{\\link{dxHTTPRequest}}",498],["## You should have received a copy of the GNU General Public License",362],["# along with this program; if not, a copy is available at",314],["# You should have received a copy of the GNU Library General",291]]},{"word":"abline","context":[["abline(v=quickTP()[[2]], col=\"blue\")",480],["abline(v=TPanalysis()[[2]], col=\"blue\")",442],["abline(h=0)",352],["abline(0,1)",223],["abline(h = 0)",108],["abline(h = 0, lty = 2)",60],["abline(h=0,v=0)",54],["abline(h=0,col=\"black\",lty=3)",53],["abline(0,0)",52],["abline(v=median, col=\"red\", lty=2, lwd=2)",43]]},{"word":"about","context":[["# You can find out more about building applications with Shiny here:",223],["msg <- \"See the note in ?`:::` about the use of this operator.\"",80],["## There is no point in worrying about exportMethods directives",68],["# extract info about simulation settings",57],["# User has logged in. Record details about the HTTP session.",50],["# Find out more about building applications with Shiny here:",48],["if (debug) message(\"about to run \", cmd, domain = NA)",48],["intro_text <- 'Some introductory text about this particular question. Likely to be the same for all courses.\\n'",34],["## Hence, even if we still provide information about this, we",34],["## If we were really picky, we would worry about possible",34]]},{"word":"abs","context":[["stopifnot(abs(res$value - val) < res$abs.error)",144],["stopifnot(abs(res$value - val) < res$abs.error)",144],["#' @source Based on Australian Bureau of Statistics data \\url{http://www.abs.gov.au/}",52],["if (abs((as.numeric(feature_model)-as.numeric(feature_sample))*10^6/as.numeric(feature_model)) <= tolerance_ppm) {",48],["#'   max(abs(df1-df2))",39],["if(abs(rate*scale - 1) < 1e-15)",36],["init.values[[i]]$.RNG.seed <- abs(.Random.seed[i +",35],["max.raw <- max(abs(c(x, breaks)), na.rm = TRUE)",32],["abs(is - round(is)) < ts.eps) {",32],["if(any(abs(colSums(contrast)) > 1e-8))",31]]},{"word":"accum","context":[["chk.bac[tmp.rows, \"accum.bac\"] <- chk.bac[tmp.rows, \"total.bac\"] /",288],["chk.bac[tmp.rows, \"accum.bac\"] <-",180],["## accum",174],["## accum loads",158],["chk.bac[chk.bac$location == \"stream\", \"accum.bac\"] = NA",142],["sqolim.bac = chk.bac$accum.bac * chk.sqolim)",142],["chk.bac <- data.frame(chk.bac, accum.bac = -1)",142],["## accum load in forest",112],["chk.bac[chk.bac$location == \"forest\", \"accum.bac\"]) /",112],["chk.bac[chk.bac$location == \"forest\", \"accum.bac\"],",112]]},{"word":"action","context":[["function(formula, data, subset, na.action, ...)",101],["x <- na.action(as.ts(x))",88],["test_fit = t.test(sen_dat,insen_dat,na.action=\"na.omit\")",69],["test_fit = wilcox.test(sen_dat,insen_dat,na.action=\"na.omit\")",69],["options(na.action=na.exclude) # preserve missings",61],["m <- as.call(c(m, list(na.action = NULL)))",44],["res <- naresid(object$na.action, res)",41],["na.act <- attr(mf, \"na.action\")",41],["m <- match(c(\"formula\", \"data\", \"subset\", \"weights\", \"na.action\",",40],["fit$na.action <- attr(mf, \"na.action\")",39]]},{"word":"add","context":[["# To add 10 to a while loop",108],["US(add=TRUE, lwd=1.5)",96],["map(\"world\", \"Canada\", add=TRUE, lwd=1.5)",95],["if (!add) {",93],["add(repo, \"test.txt\")",87],["#' @param urlSuffix The partial URL suffix to add to the calculated base URL for the instance",84],["if(add.labs)",76],["summary.table <- add.to.sumtab(summary.table, adds=list(",73],["if (!missing(add.expr))",64],["eval(substitute(add.expr))",62]]},{"word":"aes","context":[["aes(",310],["stat_summary( aes(y=yAxis),   fun.y=mean, colour=\"white\", geom=\"point\", shape=19, size=1.5, show.legend = FALSE) +",176],["#geom_errorbar(aes(ymin=min,ymax=max),  data=whisk_1(DataFrame_Local),   width = 0.1, size=0.1, colour = \"black\") +",165],["#geom_errorbar(aes(ymin=TransformedNpercentLower, ymax=TransformedNpercentUpper), width=.01,",85],["geom_errorbar(aes(ymin=YMin,ymax=YMax)) +",68],["#geom_errorbar(aes(ymin=YMin,ymax=YMax)) +",65],["gp <- gp + geom_pointrange(aes(ymin = lower, ymax = upper))",61],["#geom_errorbar(aes(ymin=CMeanLower, ymax=CMeanUpper), width=.2,",60],["pdb + geom_line(aes(group=projid)) + facet_grid(msex~.)",60],["geom_violin(aes(y=yAxis), fill = \"gray\", colour = \"gray\", adjust = 3) +   scale_x_discrete(limits=sampleRank2)  +",55]]},{"word":"agreed","context":[["# Unless required by applicable law or agreed to in writing, software",1318],["#   Unless required by applicable law or agreed to in writing, software",729],["# Unless required by applicable law or agreed to in writing,",605],["# Unless required by applicable law or agreed to in writing, this",45],["## Unless required by applicable law or agreed to in writing, software",41],["## JMC agreed & proposed argument  'excludeEmpty = FALSE'",33],["#  Unless required by applicable law or agreed to in writing, software",26],["} else agreed <- character()",20],["agreed <- readLines(personal_file)",20],["writeLines(c(agreed, pkg), personal_file)",20]]},{"word":"aliases","context":[["##' @aliases",165],["#' @aliases",131],["aliases <- lapply(db, .Rd_get_metadata, \"alias\")",112],["aliases <- c(aliases, list(aliases1))",66],["aliases <- c(aliases, list(aliases1))",66],["aliases <- unlist(aliases[idx])",35],["aliases <- unlist(aliases[idx])",35],["## as is, but of course this is not what the aliases use ...",34],["aliases)",34],["data_frames_checked <- c(data_frames_checked, aliases[i])",34]]},{"word":"all","context":[["rm(list=ls(all=TRUE))",377],["arrows=1, connect=\"all.pairs\",",192],["# all colnames should be recognzied gene symbols.  no isoform suffixes yet",142],["#all reference trees to one comp tree",139],["MP.mp_ids           <- c(\"all\")",127],["MP.political_groups <- c(\"all\")",127],["MP.countries        <- c(\"all\")",127],["# all rownames should follow \"TCGA.02.0014\" format.  no multiply-sampled suffixes yet",122],["rm(list=ls(all=TRUE))  #Clear the variables from previous runs.",120],["tmp.table <- tableGrob(chk.all.pop, show.rownames = FALSE)",112]]},{"word":"along","context":[["# along with this program.  If not, see <http://www.gnu.org/licenses/>.",649],["# along with this program; if not, a copy is available at",314],["# Public License along with this library; if not, write to the",291],["# along with this program; if not, write to the Free Software",285],["# along with this program.  A copy can be cound in the R installation",234],["# You should have received a copy of the GNU General Public License along with",148],["#    along with this program.  If not, see <http://www.gnu.org/licenses/>.",145],["#along with this program.  If not, see <http://www.gnu.org/licenses/>.",137],["# along with icd. If not, see <http:#www.gnu.org/licenses/>.",135],["# along with Rcpp.  If not, see <http://www.gnu.org/licenses/>.",133]]},{"word":"alpha","context":[["alpha = alpha,",179],["alpha = alpha,",179],["alpha = 0.5,",144],["alpha.min = 0.1, alpha.max = 0.9,",138],["alpha.min = 0.1, alpha.max = 0.9,",138],["alpha.init = 0.5, rho.init = knots.h,",136],["xi.fix = TRUE, alpha.fix = FALSE,",136],["if(!is.finite(log.alpha)) log.alpha <- 0",131],["if(!is.finite(log.alpha)) log.alpha <- 0",131],["alpha <- 0.3",126]]},{"word":"already","context":[["# then, if the requested plot already exists, use it",228],["any(rdas$compress %in% c(\"bzip2\", \"xz\"))) # assume already optimized",66],["# if the requested plot already exists use it",62],["\"The following files are already in R: \",",60],["already <- c(\"jss.cls\", \"jss.bst\", \"Rd.sty\", \"Sweave.sty\")",60],["bad <- files[files %in% already]",60],["## check for indirect extensions => already completed",54],["fmt <- \"handler for '%s' is already defined for another package\"",45],["#' @param force logical, indicates how to deal with files that already exist.",38],["## Rd objects should already have been installed.",38]]},{"word":"also","context":[["#' The source name and the CCD ID are also included in each row to assist in identifying the source of the data.",304],["Log.info(\"Perform filtering with the '$' sign also\")",254],["#' these objects hold also the data assign to R, as \\code{dataframe}, from opal datasources.",84],["#' @param \\dots Further graphical parameters may also be supplied as arguments. See 'Details'.",51],["#wilcox rank sum test, and logistic regression are also provided: \"wilcox\", \"regression\"",37],["## what is actually in the code.  We most likely also should do",34],["## Note that this also allows us to get rid of S4 meta objects",34],["## We traditionally also use the usage \"texts\" for some sanity",33],["## forms, see also the code for undoc().",33],["## We currently use double quoting for the parse step.  As we also allow",33]]},{"word":"an","context":[["# distributed under the License is distributed on an \"AS IS\" BASIS,",920],["#   distributed under the License is distributed on an \"AS IS\" BASIS,",717],["# software distributed under the License is distributed on an",605],["##' @param inputParams Either an R object that will be converted into JSON",498],["# distributed under the License is distributed on an 'AS IS' BASIS,",397],["## 'id' is an integer vector indicating the monitor ID numbers",172],["#' @param object an S4 class object",160],["##' This is an internal function exported for those people who know",160],["# To get an integer value of number of arrays",108],["#' @param R an xts, vector, matrix, data frame, timeSeries or zoo object of",98]]},{"word":"analysis","context":[["# Renjin : JVM-based interpreter for the R language for the statistical analysis",309],["#  of packages for network analysis, http://statnet.org .",124],["print(summary(analysis))",82],["analysis <- load_analysis()",80],["## Using code analysis, we really don't know which",66],["# Bond Lab is a software application for the analysis of",52],["#### ROC analysis",45],["# This code is part of the MOCAT analysis pipeline",40],["# Initialize the multiple-QTL-model with the results from single QTL analysis",35],["analysis <- function(db) {",34]]},{"word":"and","context":[["#  This program is free software; you can redistribute it and/or modify",5207],["# See the License for the specific language governing permissions and",1314],["# update plot legend with ews and breakpoint lines",898],["#   See the License for the specific language governing permissions and",729],["# This program is free software: you can redistribute it and/or modify",682],["# specific language governing permissions and limitations",605],["# This program is free software; you can redistribute it and/or modify",594],["# Copyright © 2010-2016 BeDataDriven Groep B.V. and contributors",309],["#' The source name and the CCD ID are also included in each row to assist in identifying the source of the data.",304],["# This library is free software; you can redistribute it and/or",268]]},{"word":"ans","context":[["ans",1462],["return(ans)",649],["ans <- readline()",124],["#print(paste(\"User val is \",e$val,\"Correct ans is \",correctVal))",107],["ans <- is_robust_match(good_expr, e$expr, eval_for_class, eval_env)",85],["print(ans)",77],["ans <- list()",73],["return (ans)",66],["return(ans);",58],["if(ans!=\"\") {",51]]},{"word":"any","context":[["#  (at your option) any later version.",5319],["# (at your option) any later version.",2316],["any <- TRUE",2245],["if (!any) warningLog(Log)",644],["if(any(ind)) {",630],["if(!any) warningLog(Log)",588],["any <- FALSE",483],["if(!any) noteLog(Log)",482],["# of the License, or (at your option) any later version.",455],["if(any(ind))",416]]},{"word":"apache","context":[["#     http://www.apache.org/licenses/LICENSE-2.0",686],["#        http://www.apache.org/licenses/LICENSE-2.0",678],["#   http://www.apache.org/licenses/LICENSE-2.0",619],["# http://www.apache.org/licenses/LICENSE-2.0",586],["#    http://www.apache.org/licenses/LICENSE-2.0",161],["jc <- callJStatic(\"org.apache.spark.sql.functions\",",47],["#      http://www.apache.org/licenses/LICENSE-2.0",41],["##     http://www.apache.org/licenses/LICENSE-2.0",39],["#       http://www.apache.org/licenses/LICENSE-2.0",34],["\"org.apache.spark.sql.parquet\")",12]]},{"word":"append","context":[["file=LogFile, append=TRUE)",1113],["append=TRUE)",1053],["write(paste0(\"STOP \",sErrorMsg,\" \",date()),file=sLogFile,append=TRUE)",320],["file=LogFile, append=TRUE)}",278],["sep=\"\"), \"\\n\", file=LogFile, append=TRUE)}",170],["write(paste0(sWarningMsg,\" \",date()),file=sLogFile,append=TRUE)",54],["\"\\n\", file=LogFile, append=TRUE)}",51],["\"value(s).\\n\", file=LogFile, append=TRUE)",49],["adjusted_features_to_keep <- append(adjusted_features_to_keep, feature_sample)",49],["features_to_add <- append(features_to_add, feature_model)",49]]},{"word":"applicable","context":[["# Unless required by applicable law or agreed to in writing, software",1318],["#   Unless required by applicable law or agreed to in writing, software",729],["# Unless required by applicable law or agreed to in writing,",605],["# Unless required by applicable law or agreed to in writing, this",45],["## Unless required by applicable law or agreed to in writing, software",41],["warning(gettextf(\"method is only applicable to %s objects\",",32],["'not applicable', # names",32],["#  Unless required by applicable law or agreed to in writing, software",26],["cat(file = con, \"no applicable functions\\n\")",18],["stop(\"logic operator '\", nm, \"' not applicable to brobs\")",16]]},{"word":"apply","context":[["epsilon.summary <- apply(epsilon, 1, quantile,",90],["apply(",79],["#m = apply(m, 2, function(x) f_ivStabilizeData(x, fGroups))",51],["Handsontable.renderers.TextRenderer.apply(this, arguments);",51],["#' @param X The RDD to apply the transformation.",38],["m<-apply(t,1,min)",34],["\"The following options apply where sub-architectures are in use:\",",32],["# these settings are only for myself, and they will not apply to you, but",31],["retval$colSDs <- sx <- apply(x, 2, sd, na.rm = na.rm)",30],["retval$rowSDs <- sx <- apply(x, 1, sd, na.rm = na.rm)",30]]},{"word":"arch","context":[["out <- R_runR(Rcmd, opts, c(env, env1), arch = arch)",96],["out <- R_runR(Rcmd, opts, c(env, env1), arch = arch)",96],["opts <- if(nzchar(arch)) R_opts4 else R_opts2",84],["for (arch in archs) {",80],["starsmsg(\"***\", \"arch - \", arch)",72],["ss <- paste(\"src\", arch, sep = \"-\")",72],["for(arch in archs) {",72],["starsmsg(\"***\", \"arch - \", arch)",72],["for (arch in inst_archs) {",64],["if(nzchar(arch)) env0,",62]]},{"word":"are","context":[["#' The source name and the CCD ID are also included in each row to assist in identifying the source of the data.",304],["#' The vectors are: label, vtb, vte, #' dvstring_value, dvstring_language, #' ccd, sourceName,",224],["## Check that state and outcome are valid",194],["##' what they are doing.",156],["# To compare if the arrays are the last 10 arrays or not",108],["### Check the network and arguments to make sure they are appropriate.",95],["subgrid.density=10 # density of the (frequency) subgrid on which the two spectral density operators are compared",91],["# if no opal login details are provided look for 'opal' objects in the environment",67],["# modification, are permitted provided that the following conditions are",61],["# modification, are permitted provided that the following conditions are",61]]},{"word":"arg","context":[["type <- match.arg(type)",739],["method <- match.arg(method)",401],["test <- match.arg(test)",138],["alternative <- match.arg(alternative)",129],["tmp<- na.omit(sapply(argv,function(arg)",93],["units <- match.arg(units)",88],["arg.split <- strsplit(each.arg,'=',fixed=TRUE)[[1]] # split on =",80],["arg.split <- strsplit(each.arg,'=',fixed=TRUE)[[1]] # split on =",80],["family <- match.arg(family)",68],["if (! is.na(arg.split[2]) ) {",60]]},{"word":"args","context":[["args <- commandArgs(TRUE)",1677],["args <- commandArgs(trailingOnly = TRUE)",826],["args <- list(...)",635],["args <- commandArgs(trailingOnly=TRUE)",257],["writeMM(as(R, \"CsparseMatrix\"), paste(args[2], \"R\", sep=\"\"));",204],["A <- as.matrix(readMM(paste(args[1], \"A.mtx\", sep=\"\")))",197],["args <- args[-1L]",176],["args <- args[-1L]",176],["while(length(args)) {",162],["a <- args[1L]",158]]},{"word":"argument","context":[["stop(\"argument 'package' must be of length 1\")",667],["argument",234],["stop(\"The Specs argument is not a list.\", file=LogFile,",171],["stop(\"The Specs argument is incorrect.\", file=LogFile,",171],["# (as characters) in the argument.",142],["argument)",114],["stop(\"The Specs argument is required.\", file=LogFile,",88],["argument,",84],["if(!is.qr(qr)) stop(\"argument is not a QR decomposition\")",77],["if(missing(x)) stop(\"The x argument is required.\")",68]]},{"word":"arguments","context":[["# Make a list from the ... arguments and plotlist",207],["#' @param \\dots further arguments to be passed on (currently unimplemented)",192],["# arguments:",135],["#' @param ... Further arguments passed to or from other methods.",114],["#' @param \\dots further arguments to be passed to/from this method.",97],["### Check the network and arguments to make sure they are appropriate.",95],["### Process the arguments",85],["#' @param \\dots extra arguments to be passed if `object` is of type",78],["# validation des arguments #",68],["#' @param ... Further arguments to be passed from or to other methods.",60]]},{"word":"argv","context":[["tmp<- na.omit(sapply(argv,function(arg)",93],["do.call(`c`, argv);",74],["do.call(`list`, argv);",64],["do.call(`invisible`, argv);",50],["do.call(`as.character`, argv);",46],["do.call(`attr`, argv);",44],["do.call(`is.na`, argv);",44],["do.call(`-`, argv);",42],["do.call(`+`, argv);",38],[".Internal(as.vector(argv[[1]], argv[[2]]));",38]]},{"word":"around","context":[["##' method; it is a simple wrapper around the \\code{\\link{dxHTTPRequest}}",498],["chk.Percent.Pasture.in.and.around.streams / 100",180],["## pop in/around stream",158],["## bac in/around stream",158],["data.frame(location = \"stream\", pop = chk.pop.in.around.stream))",112],["### percent of animals in/around streams",112],["## with stream access on in/around atream",112],["chk.pop.w.stream.access * (1 - chk.in.and.around.streams / 100)",96],["chk.pop.in.around.stream <- chk.pop.w.stream.access * (chk.in.and.around.streams / 100)",96],["chk.pop.in.around.stream <- chk.pop.w.stream.access * (chk.in.and.around.streams / 100)",96]]},{"word":"array","context":[["write( toJSON( data, digits = 16, auto_unbox = TRUE ), \"./test/fixtures/array.json\" )",60],["# To store gene expression values for all the array",55],["matrix = , array = {",54],["#' @param symInfo RHost variable that stores the array",40],["#' @param varName RHost variable that stores the array",38],["stop(\"'x' must be an array of at least two dimensions\")",38],["if(!is.array(x) || length(dn <- dim(x)) < 2L)",34],["stop(\"'data' must be a data.frame, not a matrix or an array\")",33],["else if (is.array(data))",33],["simplify2array(answer, higher = (simplify == \"array\"))",30]]},{"word":"as","context":[["#  it under the terms of the GNU General Public License as published by",5392],["# it under the terms of the GNU General Public License as published by",2082],["x <- as.matrix(x)",696],["as.POSIXct(paste0(\"2016-\",1:12,\"-01\")), \"%b\"))",598],["##' using \\code{RJSONIO::toJSON} to be used as the input to the API call.  If",498],["# License as published by the Free Software Foundation; either",321],["## it under the terms of the GNU General Public License as published by",298],["patient.number <- as.integer(id.map[patient.id])",260],["x <- as.character(x)",254],["# as published by the Free Software Foundation, either version 3",234]]},{"word":"asValues","context":[["setwd(normalizePath(dirname(R.utils::commandArgs(asValues=TRUE)$\"f\")))",3565],["test_name <- R.utils::commandArgs(asValues=TRUE)$\"f\"",15],["setwd(normalizePath(dirname(R.utils::commandArgs(asValues= TRUE)$\"f\")))",12]]},{"word":"assign","context":[["assign(\"testSql\", c(get(\"testSql\", envir = globalenv()), statement), envir = globalenv())",136],["assign(f, fx, envir = env)",111],["assign (pos = 1, newnam, xpdb)",85],["assign (pos = 1, \".cur.db\", xpdb)",85],["#' these objects hold also the data assign to R, as \\code{dataframe}, from opal datasources.",84],["base::assign(\".ptime\", proc.time(), pos = \"CheckExEnv\")",73],["base::assign(\".dptime\", (proc.time() - get(\".ptime\", pos = \"CheckExEnv\")), pos = \"CheckExEnv\")",73],["pros.train <- h2o.assign(pros.hex[p.sid > .2, ], \"pros.train\")",68],["pros.test <- h2o.assign(pros.hex[p.sid <= .2, ], \"pros.test\")",68],["assign(x, value, envir = ns, inherits = FALSE)",66]]},{"word":"at","context":[["#  (at your option) any later version.",5319],["#  A copy of the GNU General Public License is available at",5168],["# (at your option) any later version.",2316],["# You may obtain a copy of the License at",1264],["#   You may obtain a copy of the License at",729],["# with the License.  You may obtain a copy of the License at",608],["# of the License, or (at your option) any later version.",455],["## (at your option) any later version.",345],["# along with this program; if not, a copy is available at",314],["# version 2 of the License, or (at your option) any later version.",297]]},{"word":"attr","context":[["response <- attr(attr(mf, \"terms\"), \"response\")",126],["response <- attr(attr(mf, \"terms\"), \"response\")",126],["attr(value, \"row.names\") <- row.names",116],["bad_lines <- lapply(db_usages[ind], attr, \"bad_lines\")",102],["function(x) !is.null(attr(x, \"bad_lines\"))))",98],["rows <- attr(x, \"row.names\")",97],["attr(bad_doc_objects, \"bad_lines\") <- bad_lines",94],["obj <- .td.object(attr(tdf, \"tableName\"), attr(tdf, \"database\"))",81],["obj <- .td.object(attr(tdf, \"tableName\"), attr(tdf, \"database\"))",81],["attr(aod, \"heading\") <- head",78]]},{"word":"attributes","context":[["pnames <- names(attributes(prototype))",108],["level <- as.matrix(attributes(df)$levels)",101],["attributes(value) <- NULL",93],["a <- attributes(x)",80],["attributes(x)",58],["if (!is.logical(check.attributes))",50],["msg <-  if(check.attributes) attr.all.equal(target, current, ...)",46],["attributes(x) <- a",45],["at <- attributes(x)",43],["stop(gettextf(\"'%s' must be logical\", \"check.attributes\"), domain = NA)",40]]},{"word":"author","context":[["#' @author",355],["#' @author Nicholas J. Matzke \\email{matzke@@berkeley.edu}",240],["#' @author Yassen Assenov",187],[", author = \"Roger\"",184],["#' @author Martin Vincent",158],["#' @author Matt Owen \\email{mowen@@iq.harvard.edu}",144],["#' @author Phil Chalmers \\email{rphilip.chalmers@@gmail.com}",139],["#' @author Derek H. Ogle, \\email{derek@@derekogle.com}",133],["#' @author John Brzustowski \\email{jbrzusto@@REMOVE_THIS_PART_fastmail.fm}",131],["#' @author Eliot McIntire",120]]},{"word":"available","context":[["#  A copy of the GNU General Public License is available at",5168],["# along with this program; if not, a copy is available at",314],["if(is.null(available))",130],["available <- available.packages(contriburl = contriburl,",96],["available <- available.packages(contriburl = contriburl,",96],["available <-",90],["### It is made available under the terms of the GNU General Public",82],["method, available = NULL, destdir = NULL,",64],["method = method, available = available,",60],["method = method, available = available,",60]]},{"word":"axes","context":[["plotPolys(pulayer,col=colours,axes=FALSE,border=NA,cex.lab=0.1,cex.axis=0.1)",121],["if (axes) {",90],["axes = FALSE,",85],["plot(1, type='n', xlim=0:1, ylim=0:1, bty='n', axes=FALSE, xlab=\"\", ylab=\"\")",74],["axes=FALSE,",71],["if(axes) {",68],["plot(ddr, horiz = TRUE, axes = FALSE, yaxs = \"i\", leaflab = \"none\")",58],["axes = FALSE)",51],["barplot(xhist$counts, axes=FALSE, ylim=c(0, top), space=0,",50],["barplot(yhist$counts, axes=FALSE, xlim=c(0, top), space=0,",50]]},{"word":"axis","context":[["axis(2)",443],["theme(axis.text = element_text(size = 9),",378],["axis(1)",322],["axis.text.x = element_blank(),",306],["axis.title.y = element_blank(),",219],["axis.title.x = element_blank(),",214],["axis.ticks = element_blank(),",212],["theme(axis.text.x=element_text(angle = 50, vjust=1.2, hjust = 1.2),",196],["# draw rescaled ews line, axis, and label (from 'plotrix')",193],["axis.title.x=element_blank(),",189]]},{"word":"b","context":[["as.POSIXct(paste0(\"2016-\",1:12,\"-01\")), \"%b\"))",598],["b",255],["type = \"b\",",104],["remove(\"a\", \"b\")",87],["b = b,",86],["type=\"b\",",86],["b = b,",86],["return(b)",85],["for (b in 1:B) {",80],["add_panel_label(\"b\")",80]]},{"word":"bac","context":[["\"model.bac.total\")",368],["chk.bac[tmp.rows, \"accum.bac\"] <- chk.bac[tmp.rows, \"total.bac\"] /",288],["chk.bac[tmp.rows, \"accum.bac\"] <- chk.bac[tmp.rows, \"total.bac\"] /",288],["chk.bac[tmp.rows, \"accum.bac\"] <- chk.bac[tmp.rows, \"total.bac\"] /",288],["chk.bac[tmp.rows, \"accum.bac\"] <- chk.bac[tmp.rows, \"total.bac\"] /",288],["## bac load in forest",204],["## bac load on pasture",188],["chk.bac[tmp.rows, \"accum.bac\"] <-",180],["chk.bac[tmp.rows, \"accum.bac\"] <-",180],["tmp.rows <- grep(\"TRUE\", with(chk.bac,",180]]},{"word":"background","context":[["panel.background = element_blank(),",345],["panel.background=element_blank(),",125],["plot.background = element_blank(),",118],["strip.background = element_blank(),",112],["theme(panel.background = element_blank(),",103],["panel.background = element_rect(fill = \"white\"),",101],["theme(strip.background = element_blank(),",91],["theme(panel.grid.major = element_blank(),panel.grid.minor = element_blank(), panel.background = element_blank(),",66],["panel.background = element_rect(fill = \"transparent\",colour = NA),",55],["plot.background=element_blank(),",49]]},{"word":"bad","context":[["} else if(length(bad)) {",283],["if (length(bad)) {",246],["bad <- character()",231],["if(length(bad))",164],["bad <- TRUE",140],["paste(\" \", bad))",126],["## The bad ones:",101],["if(length(bad) > 1L)",95],["bad),",90],["bad <- c(bad, pkg)",74]]},{"word":"base","context":[["is_base <- basename(dir) == \"base\"",242],["if (file.exists(base.path1))  {",234],["ret = base.path2",176],["nobj <- base",168],["ret = paste0(base.path1,\"/\")",158],["ns <- asNamespace(ns, base.OK = FALSE)",156],["base.path2 = \"\"",156],["base.path1 = \"\"",156],["base.path1 = \"C:/docs/ff/gitHub/fast-furious/data_process\"",136],["base.path2 = \"/Users/gino/kaggle/fast-furious/gitHub/fast-furious/data_process/\"",136]]},{"word":"basename","context":[["is_base <- basename(dir) == \"base\"",242],["nsInfo <- parseNamespaceFile(basename(dir), dirname(dir))",192],["sQuote(basename(bad_vignettes))),",96],["dir_name <- basename(dir)",66],["row.names(rdas2) <- basename(row.names(rdas2))",66],["row.names(rdas) <- basename(row.names(rdas))",66],["db <- tryCatch(Rd_db(basename(outDir), lib.loc = dirname(outDir)),",62],["== 3L) bad <- c(bad, basename(f))",60],["paste(\"when running code in\", sQuote(basename(file))),",60],["files2 <- files2[! basename(files2) %in%",58]]},{"word":"be","context":[["#  This program is distributed in the hope that it will be useful,",5265],["# This program is distributed in the hope that it will be useful,",1782],["stop(\"argument 'package' must be of length 1\")",667],["##' @param inputParams Either an R object that will be converted into JSON",498],["##' using \\code{RJSONIO::toJSON} to be used as the input to the API call.  If",498],["# This library is distributed in the hope that it will be useful,",267],["# along with this program.  A copy can be cound in the R installation",234],["## This program is distributed in the hope that it will be useful,",210],["#This program is distributed in the hope that it will be useful,",203],["#' @param \\dots further arguments to be passed on (currently unimplemented)",192]]},{"word":"beta","context":[["rho.fix = FALSE, beta.fix = TRUE,",122],["fit.rarebinaryCPP(beta.init = 0, xi.init = 0,",114],["beta = beta,",98],["beta = beta,",98],["beta.attempts = 50, xi.attempts = 50,",87],["knots = knots, beta.tune = 1, xi.tune = 0.1,",80],["beta.init = fit.pcl$beta, beta.m = 0, beta.s = 100,",58],["beta.init = fit.pcl$beta, beta.m = 0, beta.s = 100,",58],["beta.init = fit.pcl$beta, beta.m = 0, beta.s = 100,",58],["beta.init = fit.pcl$beta, beta.m = 0, beta.s = 100,",58]]},{"word":"bg","context":[["bg = \"transparent\", canvas = \"white\", units = \"px\", dpi = \"auto\")",122],["pointsize = 12, bg = \"white\")",104],["if(!missing(bg)) new$bg <- bg",47],["if(!missing(bg)) new$bg <- bg",47],["if(!missing(bg)) new$bg <- bg",47],["}, bg = \"transparent\")",45],["par(bg=bg, font.main = 2, font.lab = 2)",43],["bg = 'transparent',",43],["par(bg=bg, font.main = 2, font.lab = 2)",43],["bg = \"transparent\", canvas = \"white\", units = \"px\", dpi = 82)",41]]},{"word":"bin","context":[["#!/usr/bin/env Rscript",1591],["#!/usr/bin/Rscript",680],["tkwm.iconbitmap(tt, default = file.path(R.home(\"bin\"), \"Rgui.exe\"))",153],["cmd <- paste(shQuote(file.path(R.home(\"bin\"), \"R\")),",128],["#! /usr/bin/env Rscript",126],["wd2 <- setwd(file.path(R.home(\"bin\"), \"exec\"))",104],["#! /usr/bin/Rscript",91],["#!/usr/bin/R",88],["#!/usr/bin/Rscript --vanilla",84],["#!/usr/bin/r -t",72]]},{"word":"binary","context":[["# Redistribution and use in source and binary forms, with or without",77],["if(binary.target){",54],["#     Redistributions in binary form must reproduce the above copyright",53],["# binary",52],["sfcheck.binary <- file.path(chipster.module.path ,\"/shell/sfcheck.sh\")",50],["if(!binary.target){",45],["## Redistribution and use in source and binary forms, with or without",45],["samtools.binary <- c(file.path(chipster.tools.path, \"samtools\", \"samtools\"))",43],["sfcheck.command <- paste(sfcheck.binary, emboss.path, inputfile.to.check )",39],["## Now see what we can get as binary packages.",35]]},{"word":"black","context":[["col=c(\"black\", \"blue\", \"green4\"), bty=\"n\")",833],["lty=1, lcol=\"black\")",833],["lty=c(1, 1), col=c(\"black\", \"green4\"), bty=\"n\")",701],["#geom_errorbar(aes(ymin=min,ymax=max),  data=whisk_1(DataFrame_Local),   width = 0.1, size=0.1, colour = \"black\") +",165],["theme_bw() + geom_line(colour=\"black\") + geom_hline(yintercept=0,lty=2) +",140],["col=c(\"black\", \"green4\"), bty=\"n\")",132],["axis.text=element_text(color='black'),",119],["panel.border =element_rect(colour = \"black\",fill=NA),",112],["col = \"black\",",109],["lty=c(1, 1), col=c(\"black\", \"blue\"), bty=\"n\")",80]]},{"word":"block","context":[["writeContent(block, tag)",251],["writeContent(block[[2L]], tag)",142],["block <- env$block",132],["block <- env$block",132],["for(t in 1:block){",123],["writeContent(block[[1L]], tag)",96],["block <- blocks[[i]]",67],["div(style=\"display:inline-block\",",43],["if (length(block) > 1L) {",43],["writeBin(block, con)",42]]},{"word":"blue","context":[["col=c(\"black\", \"blue\", \"green4\"), bty=\"n\")",833],["abline(v=quickTP()[[2]], col=\"blue\")",480],["abline(v=TPanalysis()[[2]], col=\"blue\")",442],["colours2=c( \"banding\"=\"blue\",  \"sham\"=\"green4\"  ),",114],["colours2=c( \"week0_EEDheto\"=\"red\",  \"week0_EEDko\"=\"red4\",   \"week4_EEDheto\"=\"skyblue\",  \"week4_EEDko\"=\"blue\" ),",94],["lty=c(1, 1), col=c(\"black\", \"blue\"), bty=\"n\")",80],["geom_line(size=0.5, colour=\"red\") + geom_hline(yintercept = 0.2, colour=\"blue\") +",76],["col=\"blue\")",74],["colours2=c(\"red\",  \"red4\",   \"blue\",    \"blue4\" ),",72],["col = \"blue\",",65]]},{"word":"body","context":[["body",485],["respone <- httr::POST(url, body = payload)",129],["body(fx) <- substitute(UseMethod(ff), list(ff=f))",85],["tags$body(onload=\"setvalues()\"),",73],["exprs <- c(exprs, lapply(mlist, body))",66],["toExpr <- body(f)",54],["body(f, envir = environment(f)) <- expr",54],["!(identical(body(f1), body(f2)) && identical(args(f1), args(f2)))",52],["!(identical(body(f1), body(f2)) && identical(args(f1), args(f2)))",52],["isS3 <- function(fct)isTRUE(grep(\"UseMethod\", body(fct)) > 0)",51]]},{"word":"border","context":[["panel.border = element_blank(),",316],["plotPolys(pulayer,col=colours,axes=FALSE,border=NA,cex.lab=0.1,cex.axis=0.1)",121],["panel.border =element_rect(colour = \"black\",fill=NA),",112],["panel.border=element_blank(),",73],["border=FALSE)",63],["border=NA)",59],["col = sepcolor, border = sepcolor)",48],["polygon(dens, col=\"black\", border=\"black\")",45],["border = border)",40],["border = border)",40]]},{"word":"both","context":[["# one or both dates is \"[Not Available]\".  count tells us how many good",122],["if (!missing(prob)) stop(\"'prob' and 'mu' both specified\")",56],["# Testing for both correct expression and correct value",54],["if (trace %in% c(\"both\", \"column\")) {",46],["if (trace %in% c(\"both\", \"row\")) {",46],["warning(\"specify 'rate' or 'scale' but not both\")",44],["#both",44],["if (dendrogram %in% c(\"both\", \"row\")) {",40],["if (dendrogram %in% c(\"both\", \"column\")) {",40],["if (any(label.axes.box == \"box\") || any(label.axes.box == \"both\")) {",38]]},{"word":"box","context":[["box()",1495],["box(",404],["box(lwd=2)",155],["box(lwd = 2)",118],["leg <- which(sapply(tmp$grobs, function(x) x$name) == \"guide-box\")",84],["box(bty=\"l\")",57],["return(box)",45],["box <- valueBox(",44],["#box()",39],["if (any(label.axes.box == \"box\") || any(label.axes.box == \"both\")) {",38]]},{"word":"br","context":[["br(),",4494],["tags$br(),",432],["br()",248],["HTML(\"<br>\"),",248],["br(),br(),",132],["br(),br(),",132],["HTML('<br>'),",70],["#br(),",69],["br(), br(),",66],["br(), br(),",66]]},{"word":"break","context":[["break",4443],["break;",296],["break()",145],["break}",135],["if(dep$version >= package_version(\"2.10\")) {OK <- TRUE; break;}",66],["if(!is(err, \"try-error\"))break",51],["if (has_error) break",48],["if(res) break",48],["if (idx > nrow(clusters)) break",48],["OK <- FALSE; break",30]]},{"word":"breaks","context":[["scale_y_continuous(breaks =c(-.5, 0, .5, .75, 1), labels = c(\"-50%\", \"0%\", \"50%\", \"75%\", \"100%\")) +",196],["scale_x_discrete(breaks=c(1, 7, 79, 157), labels = c(\"9:30am\", \"10:00am\", \"Day 1 Close\", \"Day 2 Close\")) +",196],["breaks = breaks)",59],["breaks = breaks)",59],["if (length(breaks) == 1) {",56],["if(is.na(valid)) stop(\"invalid specification of 'breaks'\")",52],["## specified number of breaks",52],["breaks <- seq(start, maxx + incr, breaks)",52],["breaks <- seq(start, maxx + incr, breaks)",52],["breaks = breaks,",50]]},{"word":"browser","context":[["# browser()",515],["#browser()",487],["browser()",374],["# # browser()",170],["#\tbrowser()",134],["if(debug) browser()",93],["# find the html help file and display in the default browser",48],["#\t\tbrowser()",44],["##browser()",42],["#options(error = browser)",41]]},{"word":"bty","context":[["col=c(\"black\", \"blue\", \"green4\"), bty=\"n\")",833],["lty=c(1, 1), col=c(\"black\", \"green4\"), bty=\"n\")",701],["col=c(\"black\", \"green4\"), bty=\"n\")",132],["lty=c(1, 1), col=c(\"black\", \"blue\"), bty=\"n\")",80],["plot(1, type='n', xlim=0:1, ylim=0:1, bty='n', axes=FALSE, xlab=\"\", ylab=\"\")",74],["lty=c(1, 1), col=c(\"red\", \"green4\"), bty=\"n\")",65],["lty=c(1, 1, 1), col=c(\"red\", \"blue\", \"green4\"), bty=\"n\")",65],["bty = \"n\",",59],["box(bty=\"l\")",57],["bty=\"n\")",55]]},{"word":"build","context":[["paste0(\"--build-dir=\", shQuote(build_dir)),",96],["dir.create(\"build\", showWarnings = FALSE)",62],["## If not, we build the Rd db from the sources:",62],["print(\"Time it took to build GBM\")",54],["# Error check and build model",54],["} else if (a == \"--no-build-vignettes\") {",50],["stages = c(\"build\", \"install\", \"render\"))",50],["print(\"Time it took to build GLM\")",46],["args <- args0[! args0 %in% c(\"--merge-multiarch\", \"--build\")]",46],["msg <- c(\"Output(s) listed in 'build/vignette.rds' but not in package:\",",44]]},{"word":"but","context":[["#  but WITHOUT ANY WARRANTY; without even the implied warranty of",5447],["# but WITHOUT ANY WARRANTY; without even the implied warranty of",3166],["## but WITHOUT ANY WARRANTY; without even the implied warranty of",474],["Log.info(\"Now do the same filter & subset, but select complement of columns.\")",285],["#    but WITHOUT ANY WARRANTY; without even the implied warranty of",233],["#but WITHOUT ANY WARRANTY; without even the implied warranty of",214],["q.but <- tkbutton(tt,text=\"Quit\",",144],["reset.but  <- tkbutton(tt, text=\"Reset\", command=reset)",142],["tkgrid(DimHlp.but, row=4, column=2,sticky=\"w\")",140],["# Rcpp is distributed in the hope that it will be useful, but",133]]},{"word":"by","context":[["#  it under the terms of the GNU General Public License as published by",5392],["# it under the terms of the GNU General Public License as published by",2082],["# Unless required by applicable law or agreed to in writing, software",1318],["#   Unless required by applicable law or agreed to in writing, software",729],["# Unless required by applicable law or agreed to in writing,",605],["by.x = \"month.chr\", by.y = \"Month\")",598],["by.x = \"month.chr\", by.y = \"Month\")",598],["# License as published by the Free Software Foundation; either",321],["## it under the terms of the GNU General Public License as published by",298],["# A function implemented by Diethelm Wuertz",283]]},{"word":"c","context":[["par(mfrow=c(1,1))",1117],["printLog0(Log, paste(c(out, \"\"), collapse = \"\\n\"))",975],["col=c(\"black\", \"blue\", \"green4\"), bty=\"n\")",833],["par(mfrow=c(2,2))",802],["par(mfrow=c(1,2))",779],["c(",707],["lty=c(1, 1), col=c(\"black\", \"green4\"), bty=\"n\")",701],["lty=c(1, 1), col=c(\"black\", \"green4\"), bty=\"n\")",701],["par(mfrow=c(2,1))",456],["input$quick_ewsRadioButtons), lty=c(1, 1, 1),",428]]},{"word":"calc","context":[["manual.calc.bac.total = sum(chk.bac$total.bac),",142],["manual.calc.pop.total = sum(chk.pop$pop),",142],["manual.calc.bac.total = chk.bac[chk.bac$location == \"forest\", \"accum.bac\"],",112],["manual.calc.bac.total = chk.bac[chk.bac$location == \"forest\", \"total.bac\"],",112],["manual.calc.pop.total = chk.pop[chk.pop$location == \"stream\", \"pop\"],",112],["manual.calc.bac.total = chk.bac[chk.bac$location == \"stream\", \"total.bac\"],",112],["manual.calc.pop.total = chk.pop[chk.pop$location == \"forest\", \"pop\"],",112],["manual.calc.bac.total = chk.bac[chk.bac$location == \"pasture\", \"total.bac\"],",96],["manual.calc.bac.total = chk.bac[chk.bac$location == \"pasture\", \"accum.bac\"],",96],["manual.calc.pop.total = chk.pop[chk.pop$location == \"pasture\", \"pop\"],",96]]},{"word":"call","context":[["call. = FALSE, domain = NA)",1289],["call. = FALSE)",1000],["##' @return If the API call is successful, the parsed JSON of the API server",498],["##' using \\code{RJSONIO::toJSON} to be used as the input to the API call.  If",498],["##' @param jsonifyData Whether to call \\code{RJSONIO::toJSON} on",498],["domain = NA, call. = FALSE)",433],["stop(msg, call. = FALSE)",398],["m <- match.call(expand.dots = FALSE)",343],["call.=FALSE)",318],["call <- match.call()",240]]},{"word":"calls","context":[["calls",263],["calls <- Filter(length,",150],["#These first few lines run only when the file is run in RStudio, !!NOT when an Rmd/Rnw file calls it!!",95],["calls <- list()",91],["cnames <- .call_names(calls)",66],["c(gettextf(\"  %s calls:\", f),",63],["calls <- c(calls, new)",63],["## Look at all calls (not only at top level).",63],["if(!length(calls)) return(out)",63],["calls <- c(calls, new)",63]]},{"word":"can","context":[["#  This program is free software; you can redistribute it and/or modify",5207],["# This program is free software: you can redistribute it and/or modify",682],["# This program is free software; you can redistribute it and/or modify",594],["# This library is free software; you can redistribute it and/or",268],["# along with this program.  A copy can be cound in the R installation",234],["# Xpose 4 is free software; you can redistribute it and/or",234],["# You can find out more about building applications with Shiny here:",223],["# This program is free software; you can redistribute it and/or",200],["#    This program is free software: you can redistribute it and/or modify",180],["#This program is free software: you can redistribute it and/or modify",172]]},{"word":"cannot","context":[["stop(\"current working directory cannot be ascertained\")",190],["## working on the sources we (currently?) cannot deal with the",104],["stop(\"cannot determine a usable name\")",47],["cntxt$stop(gettext(\"cannot compile promise literals in code\"),",45],["cntxt$stop(gettext(\"cannot compile byte code literals in code\"),",45],["cntxt$stop(gettext(\"cannot compile this expression\"), cntxt)",44],["if(\"\" %in% j) stop(\"column name \\\"\\\" cannot match any column\")",44],["} else if (errorMessage == \"'from' cannot be NA, NaN or infinite\") {",36],["stop(\"cannot handle more than one 'x' coordinate\")",35],["## cannot have a corresponding object in the code.  Hence, we",34]]},{"word":"case","context":[["## The dir case.",96],["files, ignore.case = TRUE)",92],["value = TRUE, ignore.case = TRUE)",84],["ignore.case = TRUE)",74],["# Trivial case",71],["## produce output here in case we found something.",66],["## special case common problems.",60],["ignore.case, perl, fixed, useBytes))",56],["for (case in cases){",54],["swirl_out(\"I've executed the correct expression in case the result is needed in an upcoming question.\")",54]]},{"word":"cat","context":[["cat(\"\\n\")",4572],["cat( y, sep = \",\\n\" )",427],["cat('\\n')",422],["cat(\"\\n\\n\")",332],["cat(paste0(sErrorMsg,\"\\n\"))",320],["cat(\"  Iteration:\", iter, \"Proposal:\\n\",",302],["cat(",248],["cat(\"\",",231],["cat(\".\")",207],["cat(\"\\n\\n\\n\")",207]]},{"word":"cb","context":[["cb$putcode(RETURN.OP)",258],["if (cntxt$tailcall) cb$putcode(RETURN.OP)",161],["ci <- cb$putconst(e)",134],["cb$putcode(INVISIBLE.OP)",120],["end.label <- cb$makelabel()",116],["cb$putlabel(end.label)",116],["ci <- cb$putconst(call)",112],["cb$putcode(LDNULL.OP)",105],["cmpSpecial(e, cb, cntxt)",101],["cmpBuiltin(e, cb, cntxt)",97]]},{"word":"cbind","context":[["df.output.chk <- cbind(df.output.chk,",176],["train = cbind(train,tr)",114],["test = cbind(test,ts)",114],["cbind(",71],["g <- cbind(fp,rp)",49],["tube = cbind(tube,spec_enc)",45],["cbind(dependencies[ind],",44],["tube = cbind(tube_base,bom_base)",43],["update <- unique(cbind(pkgs, lib))",41],["image(cbind(1:nc), col = ColSideColors[colInd], axes = FALSE)",41]]},{"word":"cex","context":[["mtext(paste(\"Parameters:\", param_file), side=1, line=3, cex=0.75)  # Add parameter file",253],["text(xxt, mean(c(yya1, yya2)), labels = \"Evidence for H0\", cex= cexText)",158],["axis(side=3, labels=F, lwd.ticks=2, cex.axis=1.2, las=1)",129],["plotPolys(pulayer,col=colours,axes=FALSE,border=NA,cex.lab=0.1,cex.axis=0.1)",121],["plotPolys(pulayer,col=colours,axes=FALSE,border=NA,cex.lab=0.1,cex.axis=0.1)",121],["axis(side=4, labels=F, at=log(seq(0.1:1, by = 0.1)), lwd.ticks=2, cex.axis=1.2, las=1)",113],["cex=1.1,",112],["axis(side=1, labels=T, lwd.ticks=2, cex.axis=1.2, las=1)",84],["cex=1,",82],["par(cex = 0.5)",72]]},{"word":"character","context":[["character()",875],["return(character())",404],["c(character(),",355],["} else character()",295],["## 'directory' is a character vector of length 1 indicating",280],["x <- as.character(x)",254],["else character()",237],["if(!length(x)) return(character())",236],["bad <- character()",231],["result <- character()",215]]},{"word":"check","context":[["## check model output",158],["# sanity check",148],["stop(\"Not OK check your values\")",139],["# check",120],["print(check.normal.quantiles(r))",93],["# check required information",86],["a <- check.ErgmTerm(nw, arglist,",77],["# check out if the file is compressed and if so unzip it",69],["## Also check the code in S4 methods.",67],["## Because we really only need this for calling from R CMD check, we",66]]},{"word":"checkingLog","context":[["checkingLog(Log, \"re-building of vignette outputs\")",84],["checkingLog(Log, \"running R code from vignettes\")",64],["checkingLog(Log,",64],["checkingLog(Log, \"examples\")",64],["checkingLog(Log, \"DESCRIPTION meta-information\")",54],["checkingLog(Log, \"data for ASCII and uncompressed saves\")",32],["checkingLog(Log, \"package vignettes in \", sQuote(\"inst/doc\"))",32],["checkingLog(Log, \"for sufficient/correct file permissions\")",32],["checkingLog(Log, \"foreign function calls\")",32],["checkingLog(Log, \"R code for possible problems\")",32]]},{"word":"children","context":[["tmp.gt <- gTree(children=gList(tmp.table, tmp.title))",1432],["children = structure(list(), class = \"AsIs\")), .Names = c(\"text\",",212],["gTree$children[[childName]] <- newChild",90],["\"opened\", \"selected\", \"disabled\", \"icon\")), children = structure(list(), class = \"AsIs\")), .Names = c(\"text\",",63],["children = list(",61],["child <- gTree$children[[childName]]",60],["# Search children for match",60],["\"opened\", \"selected\", \"disabled\", \"icon\")), children = structure(list(",59],["children=result)",57],["# Just check for gPath$name amongst children and recurse if no match",50]]},{"word":"chk","context":[["chk.dil = chk.dil)",592],["chk.dil = chk.dil)",592],["df.output.chk = df.output.chk, df.comp = df.comp,",592],["df.output.chk = df.output.chk, df.comp = df.comp,",592],["dil = round(chk.dil *",506],["chk.bac[tmp.rows, \"accum.bac\"] <- chk.bac[tmp.rows, \"total.bac\"] /",288],["chk.bac[tmp.rows, \"accum.bac\"] <- chk.bac[tmp.rows, \"total.bac\"] /",288],["chk.dil <- 1E+06 # need to explain this",190],["tmp.rows <- grep(\"TRUE\", with(chk.bac,",180],["chk.Percent.Pasture.in.and.around.streams / 100",180]]},{"word":"chr","context":[["by.x = \"month.chr\", by.y = \"Month\")",598],["gsub(\"\\\\.txt\",\"-\",chr.input)",190],["if(is.null(chr)){",53],["chk.pasture.bac.by.month <- merge(summaryBy(total.bac ~ month.chr,",46],["chk.forest.accum.by.month <- merge(summaryBy(accum.bac ~ month.chr,",46],["chk.stream.bac.by.month <- merge(summaryBy(total.bac ~ month.chr,",46],["month.chr =  factor(strftime(",46],["chk.RAOCUT.accum.by.month <- merge(summaryBy(accum.bac ~ month.chr,",46],["chk.RAOCUT.bac.by.month <- merge(summaryBy(total.bac ~ month.chr,",46],["chk.forest.bac.by.month <- merge(summaryBy(total.bac ~ month.chr,",46]]},{"word":"ci","context":[["ci <- cb$putconst(e)",134],["ci <- cb$putconst(call)",112],["datac$ci <- datac$se * ciMult",67],["cb$putcode(start.op, ci, end.label)",56],["agr$YMin = agr$Probability - agr$ci.low",55],["agr$YMax = agr$Probability + agr$ci.high",55],["summarise(Probability=mean(Mentioned),ci.low=ci.low(Mentioned),ci.high=ci.high(Mentioned))",49],["summarise(Probability=mean(Mentioned),ci.low=ci.low(Mentioned),ci.high=ci.high(Mentioned))",49],["summarise(Probability=mean(Mentioned),ci.low=ci.low(Mentioned),ci.high=ci.high(Mentioned))",49],["summarise(Probability=mean(Mentioned),ci.low=ci.low(Mentioned),ci.high=ci.high(Mentioned))",49]]},{"word":"cl","context":[["stopCluster(cl)",782],["registerDoParallel(cl)",507],["cl <- oldClass(x)",362],["cl <- match.call()",230],["class(x) <- cl",216],["cl = makeCluster(no_cores)",206],["cl <- class(x)",132],["class(val) <- cl",110],["cl <- defaultCluster(cl)",106],["cl <- defaultCluster(cl)",106]]},{"word":"class","context":[["class(x) <- NULL",336],["class(x) <- cl",216],["children = structure(list(), class = \"AsIs\")), .Names = c(\"text\",",212],["#' @rdname H2OModelMetrics-class",183],["class(result) <- \"gridListing\"",169],["#' @param object an S4 class object",160],["#' @docType class",141],["else if(class(tr2)==\"phylo\" & class(ref2)==\"multiPhylo\") {",139],["else if(class(tr2)==\"phylo\" & class(ref2)==\"multiPhylo\") {",139],["else if(class(tr2)==\"multiPhylo\" & class(ref2)==\"multiPhylo\") {",139]]},{"word":"classDef","context":[["assignClassDef(Class, classDef, where)",109],["if(is.null(classDef))",64],["classDef <- Class",63],["classDef",63],["classDef <- getClass(Class)",60],["superClasses <- names(classDef@contains)",51],["where <- .classDefEnv(classDef)",44],["classDef@sealed <- TRUE",44],["classDef <- getClassDef(Class, where)",44],["if(is(classDef, \"classRepresentation\"))",42]]},{"word":"className","context":[["dQuote(def@className),",132],["dQuote(className),",125],["dQuote(className)),",101],["Class <- ClassDef@className",61],["dQuote(thisClass@className)),",56],["className <- ClassDef@className",54],["className <- ClassDef@className",54],["dQuote(ClassDef@className),",52],["dQuote(def@className)),",44],["Class <- Class@className",44]]},{"word":"classes","context":[["## S4 classes or methods.",102],["for(i in seq_along(classes)) {",90],["for(i in 1:classes) {",84],["#' @keywords classes",66],["classes <- as.character(signature)",60],["for (i in 1:classes) {",59],["for(cls in classes){",52],["classes <- try(class(temp), silent=TRUE)",51],["#' @include plotting-classes.R",49],["classi <- classes[[i]]",44]]},{"word":"clean","context":[["## clean up",206],["clean <- TRUE",112],["do_cleanup(clean)",78],["set_folders(\"clean\")",72],["if(clean) {",69],["\"--no-clean\", \"--no-index\",",64],["# clean up",60],["clean <- FALSE",60],["# clean workspace",50],["} else if (a %in% c(\"-c\", \"--clean\")) {",48]]},{"word":"close","context":[["close(con)",743],["on.exit(close(con))",690],["close(pb)",313],["on.exit(close(file))",278],["on.exit(progress$close())",205],["close(zz)",197],["close(f)",191],["## close the pdf file",158],["close(conn)",139],["close(fileConn)",108]]},{"word":"cluster","context":[["ground.truth.clusters=the.true.cluster));",210],["library(cluster)",182],["group_by(cluster.id) %>%",169],["dplyr::select(cluster.id)",145],["the.true.cluster = load.true.cluster(file.path=node.path);",112],["the.true.cluster = load.true.cluster(file.path=node.path);",112],["colnames(dfCluster) = c('gene', 'cluster')",77],["a.trial.min.cut(the.graph, the.true.cluster, theta, method, overlap,",73],["# cluster sizes and number of clusters",56],["#cluster",55]]},{"word":"cmd","context":[["safeSystem(cmd)",258],["system(cmd)",249],["res <- system(cmd)",198],["cmd <- paste(shQuote(file.path(R.home(\"bin\"), \"R\")),",128],["cmd",89],["lapply(cmd, system)",81],["cmd <- sprintf(\"rm -fr %s\", tmpdir_name)",76],["cat(cmd)",66],["function(cmd,",64],["out <- R_runR(cmd, R_opts2, env)",64]]},{"word":"cntxt","context":[["ncntxt <- make.nonTailCallContext(cntxt)",183],["if (cntxt$tailcall) cb$putcode(RETURN.OP)",161],["cntxt)",157],["ncntxt <- make.argContext(cntxt)",138],["if (cntxt$tailcall)",108],["if (cntxt$tailcall) {",105],["cmpSpecial(e, cb, cntxt)",101],["cmpBuiltin(e, cb, cntxt)",97],["if (! suppressAll(cntxt))",94],["cntxt",75]]},{"word":"code","context":[["test(id=0, code={",3834],["##' using \\code{RJSONIO::toJSON} to be used as the input to the API call.  If",498],["##' \\code{FALSE}.",498],["##' method; it is a simple wrapper around the \\code{\\link{dxHTTPRequest}}",498],["##' \\code{inputParams} to create the JSON string or pass through the value of",498],["##' @seealso \\code{\\link{dxHTTPRequest}}",498],["##' response is returned (using \\code{RJSONIO::fromJSON}).",498],["##' providing the JSON string directly, you must set \\code{jsonifyData} to",498],["##' \\code{inputParams} directly.  (Default is \\code{TRUE}.)",498],["##' \\code{inputParams} directly.  (Default is \\code{TRUE}.)",498]]},{"word":"code_env","context":[["code_env <- .package_env(package)",271],["code_env <- new.env(hash = TRUE)",261],[".source_assignments_in_code_dir(code_dir, code_env, meta)",261],["## Load package into code_env.",238],["bad_closures <- find_bad_closures(code_env)",192],["objects_in_code <- sort(names(code_env))",147],["if(file_test(\"-f\", sys_data_file)) load(sys_data_file, code_env)",137],["mlist <- .get_S4_methods_list(f, code_env)",132],["code_env <- if(packageHasNamespace(package, dirname(dir)))",96],["f <- get(f, envir = code_env) # get is expensive",92]]},{"word":"coef","context":[["a.smooth.coef=0 # coefficient for scaling the entries of the MA filter dimensionwise (not varying in these simulations)",110],["coef(ModelTDTNVar)",66],["dfGenes = topTable(fit, coef = n[i], number = Inf)",49],["coef[mask] <- res$par",43],["coef",42],["dimnames(coef.table) <- list(names(coef.p),",41],["dimnames(coef.table) <- list(names(coef.p),",41],["coef.table <- cbind(coef.p, s.err, tvalue, pvalue)",39],["coef.table <- cbind(coef.p, s.err, tvalue, pvalue)",39],["dimnames(coef) <- list(dn, colnames(y))",33]]},{"word":"col","context":[["col=c(\"black\", \"blue\", \"green4\"), bty=\"n\")",833],["lty=c(1, 1), col=c(\"black\", \"green4\"), bty=\"n\")",701],["abline(v=quickTP()[[2]], col=\"blue\")",480],["mtext(input$quick_ewsRadioButtons, side=4, col=\"green4\")",460],["abline(v=TPanalysis()[[2]], col=\"blue\")",442],["mtext(input$ewsRadioButtons, side=4, col=\"green4\")",438],["layout.pos.col = matchidx$col))",203],["layout.pos.col = matchidx$col))",203],["col=c(\"black\", \"green4\"), bty=\"n\")",132],["plotPolys(pulayer,col=colours,axes=FALSE,border=NA,cex.lab=0.1,cex.axis=0.1)",121]]},{"word":"collapse","context":[["printLog0(Log, paste(c(out, \"\"), collapse = \"\\n\"))",975],["collapse = \"\\n\")",442],["collapse = \", \")),",314],["collapse = \"\\n\"))",184],["printLog0(Log, paste(out, collapse = \"\\n\"), \"\\n\")",176],["indent = 2, exdent = 2), collapse = \"\\n\"),",173],["collapse = \"\\n\"),",166],["paste(\"c(\",paste(prop, collapse=\",\"),\")\",",152],["printLog(Log, paste(c(out, \"\"), collapse = \"\\n\"))",129],["args <- paste(args, collapse=\" \")",112]]},{"word":"colnames","context":[["# all colnames should be recognzied gene symbols.  no isoform suffixes yet",142],["#colnames(x) <- c(\"j\",\"ref\",\"rf\",\"pd\")",139],["train_pats = colnames(train_dat)",115],["curr.train_dat = train.dat[ ,match(bs_mat.pats[,bs],colnames(train.dat)) ]",89],["colnames(dfCluster) = c('gene', 'cluster')",77],["list.bs_mat = bootstrap_sample( colnames(train.dat), train.resp, BS=BS)",67],["colnames(performances)=c(\"c01\", \"c02\", \"c03\", \"c04\");",58],["train.resp = as.character(train.info$response[match(colnames(train.dat),as.character(train.info$patient))])",57],["#' @rdname h2o.colnames",54],["colnames(m1) = fGroups",53]]},{"word":"color","context":[["geom_point(size = 3, color=\"red\") +",289],["axis.text=element_text(color='black'),",119],["# draw the heatmap  color='-RdBu:50'",70],["color = boxcolor",46],["# Set color range",44],["aheatmap(m1, color=c('blue', 'black', 'red'), breaks=0, scale='none', Rowv = TRUE,",43],["color = color,",42],["color = color,",42],["legend.text = element_text(color=\"black\", size=16),",40],["col = na.color, add = TRUE)",37]]},{"word":"colour","context":[["stat_summary( aes(y=yAxis),   fun.y=mean, colour=\"white\", geom=\"point\", shape=19, size=1.5, show.legend = FALSE) +",176],["#geom_errorbar(aes(ymin=min,ymax=max),  data=whisk_1(DataFrame_Local),   width = 0.1, size=0.1, colour = \"black\") +",165],["theme_bw() + geom_line(colour=\"black\") + geom_hline(yintercept=0,lty=2) +",140],["panel.border =element_rect(colour = \"black\",fill=NA),",112],["geom_line(size=0.5, colour=\"red\") + geom_hline(yintercept = 0.2, colour=\"blue\") +",76],["geom_line(size=0.5, colour=\"red\") + geom_hline(yintercept = 0.2, colour=\"blue\") +",76],["axis.ticks =element_line(colour = \"black\"),",70],["panel.grid.major = element_line(colour = \"gray\"),",62],["axis.line = element_line(colour = \"black\"),",60],["panel.background = element_rect(fill = \"transparent\",colour = NA),",55]]},{"word":"cols","context":[["layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),",201],["layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),",201],["ncol = cols, nrow = ceiling(numPlots/cols))",199],["ncol = cols, nrow = ceiling(numPlots/cols))",199],["# If layout is NULL, then use 'cols' to determine layout",195],["# nrow: Number of rows needed, calculated from # of cols",192],["multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {",164],["# - layout: A matrix specifying the layout. If present, 'cols' is ignored.",111],["# - cols:   Number of columns in layout",110],["cols <- names(y)",88]]},{"word":"column","context":[["column(4,",671],["column(3,",648],["column(6,",567],["column(",411],["column(jc)",388],["column(12,",370],["column(2,",314],["column(8,",167],["column(5,",152],["tkgrid(DimHlp.but, row=4, column=2,sticky=\"w\")",140]]},{"word":"columns","context":[["Log.info(\"Now do the same filter & subset, but select complement of columns.\")",285],["# ncol: Number of columns of plots",192],["# - cols:   Number of columns in layout",110],["#' @format Data frame with columns",64],["if(anyNA(cols)) stop(\"undefined columns selected\")",64],["# keep only lon and lat columns",51],["# Rename columns",48],["stop(\"numbers of columns of arguments do not match\")",44],["##### Determine the columns to keep and the column to add",43],["stop(\"`x' must have at least 2 rows and 2 columns\")",42]]},{"word":"com","context":[["#' \\url{http://phylo.wikidot.com/matzke-2013-international-biogeography-society-poster}",218],["# http://shiny.rstudio.com",168],["#' @author Phil Chalmers \\email{rphilip.chalmers@@gmail.com}",139],["#' @author Derek H. Ogle, \\email{derek@@derekogle.com}",133],["#'@author Sili Fan \\email{fansili2013@gmail.com}",88],["#' \\url{https://code.google.com/p/lagrange/}",75],["##  Marco Guazzone (marco.guazzone@gmail.com)",72],["##' @contact elahi.robin@gmail.com",70],["# Author : Sylvain Mareschal <maressyl@gmail.com>",59],["# http://www.rstudio.com/shiny/",53]]},{"word":"command","context":[["system(command)",182],["command=function() tkdestroy(tt))",152],["reset.but  <- tkbutton(tt, text=\"Reset\", command=reset)",142],["command=function(){USTHB()})",140],["# by the command he or she entered.",137],["system(echo.command)",83],["system(command);",67],["system(command.full)",58],["check2showcommand(params$opt$showc, command, file2process.my2);",51],["# command",50]]},{"word":"commandArgs","context":[["setwd(normalizePath(dirname(R.utils::commandArgs(asValues=TRUE)$\"f\")))",3565],["args <- commandArgs(TRUE)",1677],["args <- commandArgs(trailingOnly = TRUE)",826],["args <- commandArgs(trailingOnly=TRUE)",257],["ipPort <- get_args(commandArgs(trailingOnly = TRUE))",159],["args<-commandArgs(TRUE)",154],["args = commandArgs(trailingOnly=TRUE)",91],["args = commandArgs(trailingOnly = TRUE)",80],["args <- commandArgs()",79],["## be what commandArgs(TRUE) would return, that is a character vector",78]]},{"word":"comment","context":[["# TODO: Add comment",388],["doc <- XML::xmlTreeParse(sourceName, handlers=list('comment'=function(x,...){NULL}), asTree = TRUE)",304],["## comment",70],["# library(microbenchmark)  # comment out for beowulf",60],["fill = TRUE, comment.char = \"\", ...)",44],["## ----message=FALSE, comment=NA-------------------------------------------",44],["email = NULL, role = NULL, comment = NULL,",38],["comment.char=\"\",",36],["comment=TRUE",34],["comment.char = comment.char, ...)",33]]},{"word":"comp","context":[["df.output.chk = df.output.chk, df.comp = df.comp,",592],["df.output.chk = df.output.chk, df.comp = df.comp,",592],["#all reference trees to one comp tree",139],["stop(\"invalid vector for 'comp'.\")",64],["if (!is.numeric(comp) || any(comp < 1))",60],["if (!is.numeric(comp) || any(comp < 1))",60],["main='PCA comp 1 and 2')",50],["main='PCA comp 1 and 3')",48],["main='PCA comp 2 and 3')",48],["comp <- F",43]]},{"word":"complete","context":[["plot[[\"status\"]] <- \"complete\"",145],["complete <- function(directory, id = 1:332) {",130],["## number of complete cases",90],["## (asserted not to be needed if the subclass slot is complete)",54],["# If it's a complete match, look for gPath$name amongst child",50],["OK <- complete.cases(x, y)",45],["cat(\"data set\", names(data[i]), \": run complete\\n\")",36],["complete <- TRUE",34],["cat(\" failed to complete the test\\n\")",32],["\"a complete check.\\n\",",32]]},{"word":"compliance","context":[["# you may not use this file except in compliance with the License.",1263],["#   you may not use this file except in compliance with the License.",729],["# \"License\"); you may not use this file except in compliance",607],["# (the \"License\"); you may not use this file except in compliance with",154],["# You may not use this file except in compliance with the Kim Lab License",45],["## you may not use this file except in compliance with the License.",41],["#  you may not use this file except in compliance with the License.",26],["# in compliance with the License.  You may obtain a copy of the License at",17],["#   use this file except in compliance with the License. You may obtain a copy",12]]},{"word":"con","context":[["close(con)",743],["on.exit(close(con))",690],["dbDisconnect(con)",474],["function(con)",146],["con,",142],["if(is.character(con)) {",135],["x <- .con_read_bytes(con, 1L)",133],["} else con <- file",125],["read_next_non_whitespace_and_seek_back(con)",105],["cat(file = con, sep=\"\\n\",",90]]},{"word":"conn","context":[["close(conn)",139],["dbDisconnect(conn)",136],["test <- function(conn) {",100],["conn <- h2o.init(ip=myIP, port=myPort, startH2O = FALSE)",94],["stopifnot(is(conn, \"H2OConnection\"))",72],["dbSendUpdate(conn,sql)",52],["#dbListTables(conn)",50],["conn <- new(\"H2OClient\", ip=myIP, port=myPort)",49],["conn <- dbConnect(drv, \"jdbc:hsqldb:hsql://localhost:9005/proc_hom\", \"SA\", \"\")",48],["parse_time <- system.time(data.hex <- h2o.importFile(conn, url))",46]]},{"word":"console","context":[["flush.console()",1209],["utils::flush.console()",160],["if (R.Version()$os == \"Win32\" || R.Version()$os == \"mingw32\") flush.console()",153],["# Get the last expression which the user entered at the R console.",136],["cat(\"\\f\") # clear console",97],["#flush.console()",38],["if(k%%1000==0) cat(k,\"\");flush.console()",28],["utils = c(\"close.socket\", \"flush.console\", \"update.packages\")",26],["## back to the console",25],["# TODO: Be careful, there might be a limit on how long a vector you can define in console",24]]},{"word":"contains","context":[["contains = c('eml-2.1.1', 'character')",167],["contains = 'list',",128],["ext <- ClassDef@contains",81],["getClass(Class, where = where)@contains",52],["Class@contains",52],["superClasses <- names(classDef@contains)",51],["##   measurevar: the name of a column that contains the variable to be summariezed",43],["contains = \"BaseCompute\",",41],["contains = sampler_BASE,",39],["#'   # load that contains the login details",39]]},{"word":"content","context":[["content = function(file) {",1166],["content = function(file){",90],["content <- .endSaveImage(image)",84],["\"content-type\" = 'text/html',",62],["##' .. content for \\details{} ..",56],["list(file = file, \"content-type\" = mime_type(path))",53],["content,",53],["tags <- RdTags(content)",43],["content <- table[[2L]]",43],["plot[[\"data\"]]  <- content",43]]},{"word":"control","context":[["str(control)",108],["control = list(), program = NULL, dictionaries = character())",105],["control = control,",103],["control = control,",103],["control",75],["if(!is.null(d <- defaults$control))",68],["control <- d",68],["InitializeR(duplex.output.to = control$path.out.log)",59],["control = optim.control)",59],["control = optim.control)",59]]},{"word":"copy","context":[["#  A copy of the GNU General Public License is available at",5168],["# You should have received a copy of the GNU General Public License",2410],["# You may obtain a copy of the License at",1264],["#   You may obtain a copy of the License at",729],["# with the License.  You may obtain a copy of the License at",608],["## You should have received a copy of the GNU General Public License",362],["# along with this program; if not, a copy is available at",314],["# You should have received a copy of the GNU Library General",291],["#  You should have received a copy of the GNU General Public License",288],["# You should have received a copy of the GNU Lesser General Public License",263]]},{"word":"cor","context":[["cor.test(c(1, 2, 3, 4, 5), c(8, 6, 7, 5, 3), method = \"kendall\",",54],["cor.test(c(1, 2, 3, 4, 5), c(8, 6, 7, 5, 3), method = \"spearman\",",54],["symbolic.cor = x$symbolic.cor,",53],["symbolic.cor = x$symbolic.cor,",53],["ans$symbolic.cor <- symbolic.cor",51],["ans$symbolic.cor <- symbolic.cor",51],["if(missing(cex.cor)) cex.cor <- 0.8/strwidth(txt)",49],["if(missing(cex.cor)) cex.cor <- 0.8/strwidth(txt)",49],["mCor = cor(mCounts)",46],["summary(fit, cor = TRUE)",43]]},{"word":"could","context":[["## the first argument could be named, or could be a variable name.",66],["## the first argument could be named, or could be a variable name.",66],["## We need to rempve '...': OTOH the argument could be NULL",66],["## we could do something like",66],["## this could be noisy",56],["## 'file' could be a file path",52],["## Of course, these could still be 'documented' via \\alias.",34],["if(file.exists(code_file))      # could be data-only",34],["## data.frame (could add support for other classes later) variable",34],["## Actually, all repositories could be local file:// mirrors.",33]]},{"word":"count","context":[["count <- count + 1",368],["count <- count + 1",368],["count <- 1",348],["count <- 0",298],["count <- count + length(new.list)",187],["count <- count + length(new.list)",187],["range <- count:(count+length(new.list)-1)",187],["range <- count:(count+length(new.list)-1)",187],["# one or both dates is \"[Not Available]\".  count tells us how many good",122],["# New version of length which can handle NA's: if na.rm==T, don't count them",72]]},{"word":"counts","context":[["top <- max(c(xhist$counts, yhist$counts))",69],["top <- max(c(xhist$counts, yhist$counts))",69],["return(counts)",53],["barplot(xhist$counts, axes=FALSE, ylim=c(0, top), space=0,",50],["barplot(yhist$counts, axes=FALSE, xlim=c(0, top), space=0,",50],["equidist = TRUE), .Names = c(\"breaks\", \"counts\", \"density\",",44],["hy <- c(h$counts, h$counts[length(h$counts)])",40],["hy <- c(h$counts, h$counts[length(h$counts)])",40],["hy <- c(h$counts, h$counts[length(h$counts)])",40],["counts",36]]},{"word":"create","context":[["##' \\code{inputParams} to create the JSON string or pass through the value of",498],["dir.create(path)",103],["dir.create(\"data\")",100],["dir.create(tmpdir, showWarnings=FALSE)",96],["stop(gettextf(\"unable to create temporary directory %s\",",90],["int_slope(dsL) # create scatterplot",90],["# observed_predicted(dsL) # create scatterplot",82],["# create widget",81],["if (!file.exists(\"pirana_reports\")) {dir.create (\"pirana_reports\")}",75],["if (!file.exists(tmpd) && !dir.create(tmpd))",74]]},{"word":"csv","context":[["#' prosPath <- system.file(\"extdata\", \"prostate.csv\", package=\"h2o\")",363],["the.graph = load.graph.csv(edge.path, node.path);",108],["cars <- h2o.uploadFile(locate(\"smalldata/junit/cars_20mpg.csv\"))",103],["prosPath <- system.file(\"extdata\", \"prostate.csv\", package=\"h2o\")",85],["tkgrid(tklabel(tt,text = \"Output in Excel (.csv) : \"),sticky = \"w\")",85],["dat <- read.csv(text=input$text, sep=\"\\t\")",79],["file.copy(paste(indir,'/',infile.ind,'_IND.csv',sep=''), paste(tmpdir,'/',infile.ind,label,'_IND.csv',sep=''))",74],["file.copy(paste(indir,'/',infile.trm,'_TRM.csv',sep=''), paste(tmpdir,'/',infile.trm,label,'_TRM.csv',sep=''))",74],["file.copy(paste(indir,'/',infile.ind,'_IND.csv',sep=''), paste(tmpdir,'/',infile.ind,label,'_IND.csv',sep=''))",74],["file.copy(paste(indir,'/',infile.trm,'_TRM.csv',sep=''), paste(tmpdir,'/',infile.trm,label,'_TRM.csv',sep=''))",74]]},{"word":"current","context":[["checkIdentical(target, current)",247],["stop(\"current working directory cannot be ascertained\")",190],["current",80],["if(is.null(current))",68],["## This is patterned after the current codoc().",68],["!do.call(depends$op, list(current, depends$version))",68],["if(data.class(target) != data.class(current)) {",64],["current.device <- dev.cur()",62],["current <- as.numeric_version(\"3.0.1\")",54],["current <- wc()",54]]},{"word":"cv","context":[["cv.mat[fd.ix==j,j] = \"validation\"",56],["cv.mat = matrix(\"NULL\",nrow=length(obs),ncol=k)",56],["rownames(cv.mat) = obs",56],["cv.mat[fd.ix!=j,j] = \"train\"",56],["return(cv.mat)",56],["print(bst.cv)",50],["cv.nround = cv.nround * 2",44],["cv.nround = cv.nround * 2",44],["if (early.stop < cv.nround) {",43],["cv <- covmat$cov",37]]},{"word":"d","context":[["d",516],["return(d)",458],["d <- dim(x)",230],[",strftime(Sys.time(), format = \"%Y%m%d%H%M\"),",190],["if(!file_test(\"-d\", dir))",170],["for(i in 1:d.size){",147],["y = y.i.o, dw2 = dw2.o, d = d.o,",132],["y = y.i.o, dw2 = dw2.o, d = d.o,",132],["head(d)",130],["d.ts=20 # Dimension of the FTS",110]]},{"word":"dQuote","context":[["dQuote(Class)),",271],["dQuote(Class),",180],["dQuote(def@className),",132],["dQuote(dataPartClass)),",126],["dQuote(className),",125],["dQuote(className)),",101],["msg, dQuote(Class),",84],["dQuote(class(object))),",71],["dQuote(thisClass@className)),",56],["dQuote(ClassDef@className),",52]]},{"word":"dat","context":[["return(dat)",304],["dat",219],["head(dat)",121],["fm_train_real <- t(as.matrix(read.table('../data/fm_train_real.dat')))",110],["fm_test_real <- t(as.matrix(read.table('../data/fm_test_real.dat')))",110],["curr.train_dat = train.dat[ ,match(bs_mat.pats[,bs],colnames(train.dat)) ]",89],["curr.train_dat = train.dat[ ,match(bs_mat.pats[,bs],colnames(train.dat)) ]",89],["datvar <- datVar() # requested variable name, x of dat.x",86],["train.dat = tmp_list[[1]]",85],["str(dat)",84]]},{"word":"data","context":[["return(data)",2047],["library(data.table)",1845],["#' @docType data",1301],["data",880],["data.frame(",754],["data$ccd <- XML::xmlName(root)",608],["data <- data.table::rbindlist(data, fill=TRUE)",608],["data <- data.table::rbindlist(data, fill=TRUE)",608],["data <- data.table::rbindlist(data, fill=TRUE)",608],["data = list(",494]]},{"word":"dataset","context":[["return(dataset)",79],["## MSE obtained by looping through the predictions made on the external dataset of q patients",70],["#' @param x A TRONCO compliant dataset.",64],["dataset",64],["if (is.null(dataset)) {",59],["switch(input$dataset,",49],["if (is.null(dataset))",46],["\"does not have a dataset associated with it in model\",",43],["# Add the file names recursively, scrolling the whole spectral dataset",43],["session$sendCustomMessage(type = \"showalert\", \"Analysis report generated and linked to the current dataset.\")",43]]},{"word":"datasets","context":[["#' @keywords datasets",789],["library(datasets)",202],["hdfs_data_file = \"/datasets/airlinesbillion.csv\"",68],["# get the datasets",56],["#' ## Loading datasets",44],["#remove datasets with too many missing top gene features",44],["hdfs_data_file = \"/datasets/15Mx2.2k.csv\"",44],["hdfs_data_file = \"/datasets/1Mx2.2k.csv\"",43],["### Keywords: datasets",34],["onco <- OncoDev14(port=port, scriptDir=scriptDir, userID=userID, datasetNames=current.datasets)",30]]},{"word":"date","context":[["write(paste0(\"STOP \",sErrorMsg,\" \",date()),file=sLogFile,append=TRUE)",320],["diagnosis.date <- as.Date(sprintf(\"%s-%s-%s\", diagnosis.year, \"01\", \"01\"))",174],["date()",172],["#   $date [1] \"7/12/2006\"",100],["y.date = \"DateTime_numeric\", index = \"SPY\", est.win = 390, digits = 6,",99],["y.date = \"DateTime_numeric\", index = \"SP\", est.win = 390, digits = 6,",93],["# seperating out the elements of the date column for the train set",79],["# removing the date column",76],["dateDownloaded <- date()",57],["write(paste0(sWarningMsg,\" \",date()),file=sLogFile,append=TRUE)",54]]},{"word":"db","context":[["db <- .read_description(dfile)",401],["poped.db <- returnArgs[[2]]",344],["db",252],["dbDisconnect(db)",201],["function(db)",181],["function(object, db, with.tables, ...){",154],["depends <- .get_requires_from_package_db(db, \"Depends\")",151],["db <- if(!missing(package))",148],["db <- db[!ind]",147],["db <- db[!ind]",147]]},{"word":"def","context":[["par(def.par)",151],["def",148],["if(is.null(def)) {",147],["def.par <- par(no.readonly = TRUE)",142],["dQuote(def@className),",132],["newpkg <- def@package",96],["def <- .getGeneric(f, value)",81],["def <- getClassDef(Class, value, NULL)",81],["sQuote(def@package),",72],["if(is.null(def))",60]]},{"word":"default","context":[["default.units=\"npc\",",287],["y <- unit(y, default.units)",181],["x <- unit(x, default.units)",181],["tkwm.iconbitmap(tt, default = file.path(R.home(\"bin\"), \"Rgui.exe\"))",153],["default.units=\"native\",",102],["if (is.na(tmp)) default",98],["## nitrate and sulfate; the default is 0",93],["default",88],["default.units=default.units,",81],["default.units=default.units,",81]]},{"word":"defined","context":[["# #' ## The function is currently defined as",82],["stop(gettextf(\"'%s' not defined for \\\"POSIXt\\\" objects\", .Generic),",76],["stop(gettextf(\"'%s' not defined for \\\"difftime\\\" objects\", .Generic),",57],["# check if the input object(s) is(are) defined in all the studies",51],["# If do_test is not defined globally define it here locally by un-commenting it",46],["fmt <- \"handler for '%s' is already defined for another package\"",45],["ClassDef <- getClass(cl) # fails if cl not a defined class (!)",39],["\" not defined because of singularities)\\n\", sep = \"\")",38],["## since we defined the resamples",37],["print(\"input theme not defined, using orginal one for manuscript.\")",34]]},{"word":"definition","context":[["definition = function(object) {",190],["definition = function(object, value) {",178],["definition = function(x){",136],["# This is the user-interface definition of a Shiny web application.",121],["definition = function(object, ...) {",82],["definition = function(object){",64],["definition = function(x, Theta){",63],["## -- parameter definition function",61],["definition=function(object) {",41],["definition = function(x) {",40]]},{"word":"dendrogram","context":[["colInd <- order.dendrogram(ddc)",160],["rowInd <- order.dendrogram(ddr)",123],["ddr <- as.dendrogram(hcr)",108],["stop(\"row dendrogram ordering gave index of wrong length\")",107],["stop(\"column dendrogram ordering gave index of wrong length\")",107],["ddc <- as.dendrogram(hcc)",106],["else dendrogram <- \"none\"",55],["dendrogram <- \"row\"",42],["dendrogram <- match.arg(dendrogram)",42],["dendrogram <- \"column\"",42]]},{"word":"density","context":[["subgrid.density.relative.to.bandwidth=TRUE # is subgrid.density given relatively to the bandwidth?",91],["subgrid.density.relative.to.bandwidth=TRUE # is subgrid.density given relatively to the bandwidth?",91],["subgrid.density=10 # density of the (frequency) subgrid on which the two spectral density operators are compared",91],["subgrid.density=10 # density of the (frequency) subgrid on which the two spectral density operators are compared",91],["subgrid.density=10 # density of the (frequency) subgrid on which the two spectral density operators are compared",91],["equidist = TRUE), .Names = c(\"breaks\", \"counts\", \"density\",",44],["density.info <- match.arg(density.info)",42],["density.info <- match.arg(density.info)",42],["if (density.info == \"density\") {",40],["else if (density.info == \"histogram\") {",40]]},{"word":"deparse","context":[["DNAME <- deparse(substitute(x))",130],["series <- deparse(substitute(x))",103],["deparse(conditionCall(res))[1L],",102],["paste0(\"  \", deparse(x[[1L]]), \"(\", deparse(x[[2L]]), \", ...)\")",90],["paste0(\"  \", deparse(x[[1L]]), \"(\", deparse(x[[2L]]), \", ...)\")",90],["if (!is.character(linktemp)) linktemp <- deparse(linktemp)",82],["deparse(substitute(x)) ))",68],["keep <- sapply(e, function(x) deparse(x)[1L] != \"...\")",66],["pkg <- deparse(e[[2L]])",66],["Call <- deparse(e[[1L]])[1L]",66]]},{"word":"dependencies","context":[["return(dependencies)",70],["cbind(dependencies[ind],",44],["pkgs <- getDependencies(pkgs, dependencies, available, lib)",44],["## dependencies.",44],["dependencies = FALSE, libs_only = FALSE,",44],["function(.Object, flatModel, model, labelsData, dependencies) {",40],["function(.Object, dependencies) {",40],["if(is.logical(dependencies) && is.na(dependencies))",38],["if(is.logical(dependencies) && is.na(dependencies))",38],["## Are all namespace dependencies listed as package dependencies?",34]]},{"word":"depends","context":[["depends <- .get_requires_from_package_db(db, \"Depends\")",151],["depends <-",116],["# list the user inputs the tab depends on (easier to read the code)",94],["as.numeric(sub(\"^r\", \"\", depends$version))))",68],["else !do.call(depends$op,",68],["for(depends in deps) {",68],["!do.call(depends$op, list(current, depends$version))",68],["!do.call(depends$op, list(current, depends$version))",68],["status <- if(inherits(depends$version, \"numeric_version\"))",68],["depends <- trimws(unlist(strsplit(val, \",\")))",44]]},{"word":"desc","context":[["tmp <- desc[field]",98],["if (inherits(desc, \"try-error\") || !length(desc)) {",86],["if (inherits(desc, \"try-error\") || !length(desc)) {",86],["lic <- desc[\"License\"]",58],["sQuote(desc[\"Package\"]),",57],["encoding <- desc[\"Encoding\"]",56],["if (!is.na(desc[\"Bundle\"])) {",56],["OS_type <- desc[\"OS_type\"]",56],["desc <- try(.read_description(f))",52],["desc     = desc,",50]]},{"word":"describe","context":[["#' \\describe{",1303],["#'  \\describe{",476],["#'   \\describe{",91],["x <- .Rd_get_section(x, \"describe\")",79],["#'    \\describe{",74],["##' \\describe{",72],["## Should this allow for several \\describe blocks?",66],["## Get the \\item tags inside \\describe.",66],["\"\\\\describe\"= {",43],["if (verbose) print(describe(num))",41]]},{"word":"description","context":[["#' @description",2245],["#'@description",67],["description <- c(",60],["##' @description",60],["# \\description{",56],["# @description",48],["#' No description yet",45],[", description = \"NEED DESCRIPTION\"",44],["l.investigation$generate_correlation_function_in_python(fun_name=name,filename=name,description=description)",40],["l.investigation$generate_correlation_function_in_python(fun_name=name,filename=name,description=description)",40]]},{"word":"details","context":[["#  GNU General Public License for more details.",5412],["# GNU General Public License for more details.",2481],["#' @details",1781],["## GNU General Public License for more details.",501],["# GNU Lesser General Public License for more details.",311],["# GNU Library General Public License for more details.",292],["#GNU General Public License for more details.",212],["# AGPL (http://www.gnu.org/licenses/agpl-3.0.txt) for more details.",199],["#    GNU General Public License for more details.",193],["#'@details",178]]},{"word":"dev","context":[["dev.off()",23382],["#dev.off()",771],["dev.off();",771],["# dev.off()",510],["garbage <- dev.off()",487],["dev.new()",452],["if (!interactive()) dev.off()",399],["dev.hold(); on.exit(dev.flush())",254],["dev.hold(); on.exit(dev.flush())",254],["dev.hold()",151]]},{"word":"df","context":[["return(df)",1189],["df",788],["df.output.chk = df.output.chk, df.comp = df.comp,",592],["df.output.chk = df.output.chk, df.comp = df.comp,",592],["df.output.chk = df.output.chk, df.comp = df.comp,",592],["df.output.chk = df.output.chk, df.comp = df.comp,",592],["df.output.chk <- cbind(df.output.chk,",176],["df.output.chk <- cbind(df.output.chk,",176],["model.pop.total = sum(df.output$pop.total),",158],["chk.dil * ( sum(df.output$pop.total) - sum(chk.pop$pop)) /",142]]},{"word":"dfile","context":[["dfile <- file.path(dir, \"DESCRIPTION\")",627],["db <- .read_description(dfile)",401],[".read_description(dfile)",286],["meta <- if(file_test(\"-f\", dfile))",286],["dfile <- file_path_as_absolute(dfile)",128],["dfile <- file_path_as_absolute(dfile)",128],["function(dfile)",96],["meta <- .read_description(dfile)",71],[".read_description(dfile)[\"Encoding\"] else NA",68],["if(!file_test(\"-f\", dfile))",47]]},{"word":"diff","context":[["ma.diff.index=3 # which index of the MA filter differs between the two FTS",110],["res <- format(res, diff = 1e5)",63],["if (any(diff(x) <= 0) || any(diff(y) <= 0))",61],["if (any(diff(x) <= 0) || any(diff(y) <= 0))",61],["yya1 <- yy1 + 1/4 * diff(c(yy1, yy2))",56],["diff <- .diff(options, state$options)",46],["diff <- .diff(options, state$options)",46],["diff <- NULL",46],["if(any(diff)) {",32],["## might be diff-ing results against tests/Examples later",32]]},{"word":"digits","context":[["digits = 0))",2370],["options(digits=22)",750],["options( digits = 16 )",339],["newy <- format(eval(parse(text=newy)), digits= 3, scientific = TRUE)",138],["options( digits = 16 );",106],["y.date = \"DateTime_numeric\", index = \"SPY\", est.win = 390, digits = 6,",99],["y.date = \"DateTime_numeric\", index = \"SP\", est.win = 390, digits = 6,",93],["format=\"f\",digits=2),",80],["list(MYOTHERVALUE = format(my.p, digits = 2)))[2]",78],["signif(mean(y),digits=4),",75]]},{"word":"dil","context":[["dil = round(",1864],["chk.dil = chk.dil)",592],["chk.dil = chk.dil)",592],["dil = round(chk.dil *",506],["dil = round(chk.dil *",506],["chk.dil <- 1E+06 # need to explain this",190],["chk.dil * ( sum(df.output$pop.total) - sum(chk.pop$pop)) /",142],["chk.dil * (df.output[ , \"pop.total.in.stream\"] -",112],["chk.dil * (df.output[ , \"bac.total.in.stream\"] -",112],["chk.dil * (df.output[ , \"Accum.Forest\"] -",112]]},{"word":"dim","context":[["d <- dim(x)",230],["dim(rval) <- dim(SA)",85],["dim(rval) <- dim(SA)",85],["n <- dim(x)[1]",81],["dx <- dim(x)",72],["dim(games)",69],["dim(m)",63],["if (dim(data)[1] ==0) { return(data)}",60],["ns        <- dim(y)[1]",57],["sapply(X, dim)",57]]},{"word":"dimnames","context":[["dn <- dimnames(x)",180],["dimnames=list(",96],["dimnames=selVars",77],["stop(\"invalid 'dimnames' given for data frame\")",61],["dimnames(.grad) <- list(NULL, .actualArgs)",55],["dimnames(YMatrix) <- list(NULL, paste(\"X\", 1:numberIndicators, sep=\"\"))",49],["dimnames(mytable) = list( c(class_p,class_n), c(class_p,class_n) )",47],["dimnames(coef.table) <- list(names(coef.p),",41],["kronecker(fred, bill, make.dimnames = TRUE)",38],["dimnames(x)",37]]},{"word":"dir","context":[["dir <- file_path_as_absolute(dir)",911],["dir <- file_path_as_absolute(dir)",911],["code_dir <- file.path(dir, \"R\")",636],["dfile <- file.path(dir, \"DESCRIPTION\")",627],["dir <- find.package(package, lib.loc)",623],["function(dir)",500],["## Using sources from directory @code{dir} ...",442],["if(!dir.exists(dir))",431],["if(!dir.exists(dir))",431],["function(package, dir, lib.loc = NULL)",419]]},{"word":"directory","context":[["## Using sources from directory @code{dir} ...",442],["stop(gettextf(\"directory '%s' does not exist\", dir),",379],["stop(gettextf(\"directory '%s' does not contain R code\",",357],["## 'directory' is a character vector of length 1 indicating",280],["# directory under \\share\\licenses. If not, see http://www.gnu.org/licenses/.",234],["stop(gettextf(\"directory '%s' does not exist\", dir), domain = NA)",232],["stop(\"current working directory cannot be ascertained\")",190],["stop(gettextf(\"directory '%s' does not contain Rd objects\", dir),",166],["corr <- function(directory, threshold = 0) {",142],["pollutantmean <- function(directory, pollutant, id = 1:332) {",130]]},{"word":"dirname","context":[["setwd(normalizePath(dirname(R.utils::commandArgs(asValues=TRUE)$\"f\")))",3565],["nsInfo <- parseNamespaceFile(basename(dir), dirname(dir))",192],["if(packageHasNamespace(package, dirname(dir))) {",128],["Rd_db(package, lib.loc = dirname(dir))",127],["code_env <- if(packageHasNamespace(package, dirname(dir)))",96],["unlink(file.path(outDir, dirname[type], drop))",72],["ff <- file.path(outDir, dirname[type],",72],["have <- list.files(file.path(outDir, dirname[type]))",72],["dirpath <- dirname(path)",70],["db <- Rd_db(package, lib.loc = dirname(dir))",68]]},{"word":"distributed","context":[["#  This program is distributed in the hope that it will be useful,",5265],["# This program is distributed in the hope that it will be useful,",1782],["# distributed under the License is distributed on an \"AS IS\" BASIS,",920],["# distributed under the License is distributed on an \"AS IS\" BASIS,",920],["#   distributed under the License is distributed on an \"AS IS\" BASIS,",717],["#   distributed under the License is distributed on an \"AS IS\" BASIS,",717],["# distributed with this work for additional information",608],["# software distributed under the License is distributed on an",605],["# software distributed under the License is distributed on an",605],["# distributed under the License is distributed on an 'AS IS' BASIS,",397]]},{"word":"distribution","context":[["# Show a plot of the generated distribution",173],["#' @keywords ts multivariate distribution models",101],["#' model <- h2o.gbm(x = 3:9, y = 2, training_frame = hex, distribution = \"bernoulli\")",88],["distribution = \"multinomial\",",76],["# The license and distribution terms for this file may be found in the",75],["# Please see distribution for license.",69],["\"distribution of original sources:\\n\",",60],["if(input$cpmType == \"Exponential distribution\"){",56],["if(input$quick_cpmType == \"Exponential distribution\"){",56],["#     distribution.",54]]},{"word":"dn","context":[["dn <- dimnames(x)",180],["dim(z) <- dn",50],["if(!is.array(x) || length(dn <- dim(x)) < 2L)",34],["if(dims < 1L || dims > length(dn) - 1L)",34],["names(coef) <- dn",33],["dimnames(coef) <- list(dn, colnames(y))",33],["if(length(dn) > 1L) {",32],["nmeffects <- c(dn[pivot[r1]], rep.int(\"\", n - z$rank))",32],["c(dn, \"t value\",\"Pr(>|t|)\"))",31],["dn <- colnames(x); if(is.null(dn)) dn <- paste0(\"x\", 1L:p)",28]]},{"word":"do","context":[["Log.info(\"Now do the same filter & subset, but select complement of columns.\")",285],["do.call(rbind,",161],["# furnished to do so, subject to the following conditions:",114],["## we only source the assignments, and hence do not get any",102],["do.call(",97],["# #' ##--\tor do  help(data=index)  for the standard data sets.",82],["do.call(`c`, argv);",74],["## we do the vectorized metadata computations first, and try to",68],["else !do.call(depends$op,",68],["!do.call(depends$op, list(current, depends$version))",68]]},{"word":"doc","context":[["root <- XML::xmlRoot(doc)",312],["doc <- XML::xmlTreeParse(sourceName, handlers=list('comment'=function(x,...){NULL}), asTree = TRUE)",304],["doc.object <- xmlTreeParse(file.path(input.dir, files.v[i]), useInternalNodes=TRUE)",67],["con <- file(doc$file, \"rb\")",63],["root <- xmlRoot(doc)",56],["if(is.null(con) && is.null(con <- doc$con)) {",42],["file <- file.path(R.home(\"doc\"), sub(\"^/doc\", \"\", path))",42],["if(!inherits(doc, \"pdf_doc\")) stop(\"wrong class\")",42],["file <- file.path(R.home(\"doc\"), sub(\"^/doc\", \"\", path))",42],["#' @seealso \\href{../doc/tmap-nutshell.html}{\\code{vignette(\"tmap-nutshell\")}}",36]]},{"word":"docType","context":[["#' @docType data",1301],["#' @docType methods",1252],["#' @docType package",689],["#' @docType class",141],["##' @docType methods",105],["## 1) \\docType{} identical to \"class\";",33],["##' @docType data",32],["##' @docType package",26],["##' @docType class",24],["#'@docType data",24]]},{"word":"docs","context":[["base.path1 = \"C:/docs/ff/gitHub/fast-furious/data_process\"",136],["file <- vigns$docs[i]",114],["for (i in seq_along(vigns$docs)) {",83],["if (!is.null(vigns) && length(vigns$docs)) {",81],["for(i in seq_along(vigns$docs)) {",40],["base.path1 = \"C:/docs/ff/gitHub/fast-furious/competitions/facebook-recruiting-iv-human-or-bot\"",35],["base.path1 = \"C:/docs/ff/gitHub/fast-furious/dataset/facebook-recruiting-iv-human-or-bot\"",35],["docs_files <- list_files_with_type(docs_dir, \"docs\")",34],["docs = var_names_in_docs)",34],["list(list(name = fName, code = ffc, docs = ffd))",34]]},{"word":"does","context":[["stop(gettextf(\"directory '%s' does not exist\", dir),",379],["stop(gettextf(\"directory '%s' does not contain R code\",",357],["stop(gettextf(\"directory '%s' does not exist\", dir), domain = NA)",232],["stop(gettextf(\"directory '%s' does not contain Rd objects\", dir),",166],["# So swirl does not repeat execution of plot commands",135],["## FIXME: this does not need to be run in another process",128],["cstr <- paste(\"- file does not exist:\",file,\"\\n\")",85],["stop(\"Parameter in Parms does not exist.\")",74],["stop(gettextf(\"file '%s' does not exist\", file),",67],["## (Note that as.character(sapply(exprs, \"[[\", 1L)) does not do",66]]},{"word":"domain","context":[["domain = NA)",10683],["call. = FALSE, domain = NA)",1289],["domain = NA, call. = FALSE)",433],["stop(gettextf(\"directory '%s' does not exist\", dir), domain = NA)",232],["domain = NA, call. = FALSE))",226],["appendLF = FALSE, domain = NA)",199],["stop(printSpssError(last.SpssError),call. = getOption(\"SPSSStatisticsTraceback\"), domain = NA)",160],["domain = NA, call. = FALSE, immediate. = TRUE)",160],["stop(msg, domain = NA)",127],["stop(printSpssError(last.SpssError),call. = FALSE, domain = NA)",103]]},{"word":"dontrun","context":[["#' \\dontrun{",3090],["#'\\dontrun{",863],["#' @examples \\dontrun{",390],["\\dontrun{",179],["#\\dontrun{",160],["##' \\dontrun{",68],["#'   \\dontrun{",44],["#'@examples \\dontrun{",37],["\"\\\\dontrun\"= writeDR(block, tag),",33],["#'  \\dontrun{",31]]},{"word":"dots","context":[["dots <- list(...)",469],["m <- match.call(expand.dots = FALSE)",343],["#' @param \\dots further arguments to be passed on (currently unimplemented)",192],["mf <- match.call(expand.dots = FALSE)",123],["#' @param \\dots further arguments to be passed to/from this method.",97],["txt <- gsub(\"\\\\\\\\l?dots\", \"...\", txt)",82],["#' @param \\dots extra arguments to be passed if `object` is of type",78],["#' @param \\dots any other passthru parameters",71],["# #' @param \\dots",54],["#' @param \\dots Further graphical parameters may also be supplied as arguments. See 'Details'.",51]]},{"word":"double","context":[["storage.mode(x) <- \"double\"",156],["as.double(x),",109],["n=n, rval=double(n), NAOK=TRUE, package=\"gsw\")$rval",102],["storage.mode(y) <- \"double\"",85],["as.double(span),",67],["if (!is.double(x)) x <- as.double(x)",63],["if (!is.double(x)) x <- as.double(x)",63],[", checkDataType = function(x)is.double(x)&(x>=0)",56],["returnType(double(1))",50],["as.double(y),",48]]},{"word":"dplyr","context":[["library(dplyr)",4151],["require(dplyr)",535],["dplyr::mutate(",342],["#' @import dplyr",321],["library(\"dplyr\")",278],["dplyr::select(cluster.id)",145],["dplyr::ungroup() %>%",122],["dplyr::ungroup()",107],["dplyr::summarize(",84],["dplyr::rename_(",80]]},{"word":"draw","context":[["grid.draw(tmp.gt)",1992],["# draw rescaled ews line, axis, and label (from 'plotrix')",193],["if (draw)",168],["# Define server logic required to draw a histogram",93],["name=NULL, gp=gpar(), draw=TRUE, vp=NULL) {",88],["draw.all()",84],["grid.draw(g)",79],["# draw the heatmap  color='-RdBu:50'",70],["# draw the histogram with the specified number of bins",48],["# draw some random weights ~ Poisson, add 'x1' weight col and y to df, hdf",31]]},{"word":"drop","context":[["min[kk, ] <- c(i, min((subset(x, x[,1] == i , drop=FALSE))[,3]), min((subset(x, x[,1] == i , drop=FALSE))[,4]))",139],["min[kk, ] <- c(i, min((subset(x, x[,1] == i , drop=FALSE))[,3]), min((subset(x, x[,1] == i , drop=FALSE))[,4]))",139],["drop = FALSE]",104],["mf$drop.unused.levels <- TRUE",77],["unlink(file.path(outDir, dirname[type], drop))",72],["y <- drop(y)",57],["as.integer(order.drop.sqr),",55],["as.integer(sum.drop.sqr),",55],["drop = FALSE])",52],["## need to drop \"units\" attribute here",51]]},{"word":"drug","context":[["if( drug == \"Irintocean\" | drug ==\"Irintotecan\" | drug ==\"irinotecan\" | drug ==\"Irunotecan\") { drug = \"Irinotecan\" }",21],["if( drug == \"ABT-888 Parp Inhibitor\") { drug = \"ABT-888\"}",21],["if( drug == \"dc Vax (Dendritic Cell Vaccine)\" | drug == \"Dendritic Cell Vaccine (dcvax)\"){ drug = \"dcVax\" }",21],["if( drug == \"Rapamcyin\") { drug =\"Rapamycin\"}",21],["if( drug == \"Irintocean\" | drug ==\"Irintotecan\" | drug ==\"irinotecan\" | drug ==\"Irunotecan\") { drug = \"Irinotecan\" }",21],["if( drug == \"Celbrex\"){ drug = \"Celebrex\"}",21],["if( drug == \"Rapamcyin\") { drug =\"Rapamycin\"}",21],["# use these fields in the drug table, possibly finding many rows per patient",21],["if( drug == \"Arsenic Tnoxide\" | drug == \"Arsenic Trioxide (ATO)\"){ drug = \"Arsenic Trioxide\"}",21],["if( drug == \"Celbrex\"){ drug = \"Celebrex\"}",21]]},{"word":"ds","context":[["ds <- ds %>%",86],["ds <- ds %>%",86],["ds <- gsub('T', ' ', ds)",86],["ds <- gsub('T', ' ', ds)",86],["ds <- xmlValue(n[[1]])",66],["ds %>%",58],["head(ds)",56],["if(WINDOWS) sprintf(\" [%ds]\", round(td[3L]))",53],["else sprintf(\" [%ds/%ds]\", round(sum(td[-3L])), round(td[3L]))",53],["else sprintf(\" [%ds/%ds]\", round(sum(td[-3L])), round(td[3L]))",53]]},{"word":"e","context":[["error = function(e) {",620],["}, error = function(e) {",493],["error = function(e)",461],["e <- get(\"e\", parent.frame())",440],["e <- get(\"e\", parent.frame())",440],["function(e)",406],["function(e) {",302],["error = function(e) NULL",270],["other_problem <<- c(other_problem, e)",234],["for (e in seq(from=1, to=nExp)) {",212]]},{"word":"e1","context":[["function(e1, e2) {",205],["function(e1, e2)",99],["e1      <- try(parse(text=dat))",77],["e1",61],["cn <- names(e1)",46],["nr <- .row_names_info(e1, 2L)",44],["if(.row_names_info(e1) > 0L) rn <- attr(e1, \"row.names\")",44],["if(.row_names_info(e1) > 0L) rn <- attr(e1, \"row.names\")",44],["return(e1)",42],["callGeneric(e1@.Data, e2@.Data)",42]]},{"word":"e2","context":[["function(e1, e2) {",205],["function(e1, e2)",99],["if (inherits(e2, \"difftime\")) e2 <- coerceTimeUnit(e2)",66],["if (inherits(e2, \"difftime\")) e2 <- coerceTimeUnit(e2)",66],["if (inherits(e2, \"difftime\")) e2 <- coerceTimeUnit(e2)",66],["e2",54],["callGeneric(e1@.Data, e2@.Data)",42],["funs <- .addBasicGeneric(funs, f, function(e1, e2) standardGeneric(\"\"),",41],["e2 <- coerceTimeUnit(e2)",40],["e2 <- coerceTimeUnit(e2)",40]]},{"word":"each","context":[["#' The source name and the CCD ID are also included in each row to assist in identifying the source of the data.",304],["# Make each plot, in the correct location",211],["arg.split <- strsplit(each.arg,'=',fixed=TRUE)[[1]] # split on =",80],["fd.ix = rep(1:tmp,each = (fd.size+1))",57],["fd.ix = rep(1:k,each=fd.size)",56],["## For each state, find the hospital of the given rank",56],["# For each feature in the model",56],["fd.ix = c(fd.ix,rep((tmp+1):k,each=fd.size))",56],["# To get annotation for each Illumina ID",55],["# To get the gene symbol for each Illumina ID",55]]},{"word":"either","context":[["#  the Free Software Foundation; either version 2 of the License, or",5121],["# the Free Software Foundation, either version 3 of the License, or",1475],["# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",1415],["#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",717],["# KIND, either express or implied.  See the License for the",605],["# the Free Software Foundation; either version 2 of the License, or",574],["# License as published by the Free Software Foundation; either",321],["# the Free Software Foundation, either version 2 of the License, or",264],["# as published by the Free Software Foundation, either version 3",234],["#    the Free Software Foundation, either version 3 of the License, or",211]]},{"word":"element_blank","context":[["panel.grid.minor = element_blank(),",524],["panel.grid.major = element_blank(),",410],["panel.background = element_blank(),",345],["legend.title=element_blank(),",321],["panel.border = element_blank(),",316],["axis.text.x = element_blank(),",306],["axis.title.y = element_blank(),",219],["axis.title.x = element_blank(),",214],["axis.ticks = element_blank(),",212],["axis.title.x=element_blank(),",189]]},{"word":"element_text","context":[["theme(axis.text = element_text(size = 9),",378],["theme(plot.title=element_text(size = 18, vjust = 2))",204],["theme(axis.text.x=element_text(angle = 50, vjust=1.2, hjust = 1.2),",196],["axis.text.y = element_text(size = rel(1.5), angle = 0)) +",189],["axis.text.x = element_text(size = rel(1.5), angle = 0)) +",171],["axis.text=element_text(color='black'),",119],["p <- p + theme(axis.text = element_text(size = 12),",99],["legend.text = element_text(size = 12),",82],["strip.text = element_text(size = 12)",73],["theme(axis.text.x = element_text(angle = 90, hjust = 1)) +",72]]},{"word":"elk","context":[["chk.elk.bac[tmp.rows, \"accum.bac\"] <-",96],["tmp.rows <- grep(\"TRUE\", with(chk.elk.bac,",96],["chk.season.2.RAOCUT.elk",48],["chk.season.1.RAOCUT.elk",48],["data = chk.elk.bac[chk.elk.bac$location == \"pasture\", ],",32],["data = chk.elk.bac[chk.elk.bac$location == \"pasture\", ],",32],["data = chk.elk.bac[chk.elk.bac$location == \"forest\", ],",32],["data = chk.elk.bac[chk.elk.bac$location == \"forest\", ],",32],["chk.season.2.RAOCUT.elk.w.str.acc",32],["chk.season.1.Pasture.elk.w.str.acc",32]]},{"word":"else","context":[["} else {",97084],["else",31368],["else {",22263],["}else{",16995],["else{",5667],["} else",3797],["} else{",3237],["} else {}",2342],["} else resultLog(Log, \"OK\")",1491],["}else {",500]]},{"word":"email","context":[["#' @author Nicholas J. Matzke \\email{matzke@@berkeley.edu}",240],["#' @author Matt Owen \\email{mowen@@iq.harvard.edu}",144],["#' @author Phil Chalmers \\email{rphilip.chalmers@@gmail.com}",139],["#' @author Derek H. Ogle, \\email{derek@@derekogle.com}",133],["#' @author John Brzustowski \\email{jbrzusto@@REMOVE_THIS_PART_fastmail.fm}",131],["email <- readline(\"What is your email address? \")",129],["}', email, token)",129],["email <- readline(\"What is your email address? \")",129],["#'@author Sili Fan \\email{fansili2013@gmail.com}",88],["#'@author Marc W. Schmid \\email{marcschmid@@gmx.ch}.",85]]},{"word":"empty","context":[["# Non-empty table",54],["## set to empty of something non-existent.",50],["empty <- emptyenv()",45],["# Create the empty vector",43],["stop(\"`path` must be a non-empty character string\")",39],["stop(\"'file' must be a non-empty character string\")",38],["variable.names(fit) #should be empty",38],["##   have an environment E which is empty and has globalenv() as",33],["## Check whether we can expand to something non-empty.",33],["## NB, link might be empty, and was in mvbutils",33]]},{"word":"enc","context":[["if(!is.na(enc) &&",158],["enc <- db[\"Encoding\"]",123],["con <- file(file, encoding=enc)",80],["switch(enc,",66],["enc <- vigns$encodings[i]",62],["if(!is.na(enc)) tmp <- iconv(tmp, \"\", enc)",48],["if(!is.na(enc)) tmp <- iconv(tmp, \"\", enc)",48],["con <- file(file, encoding = enc)",45],["enc <- if(file.exists(dfile))",44],["lines <- iconv(readLines(file, warn = FALSE), from = enc, to = \"\",",39]]},{"word":"encoding","context":[["encoding = encoding,",138],["encoding = encoding,",138],["encoding <- \"unknown\"",114],["if(is.na(encoding <- meta[\"Encoding\"]))",103],["con <- file(file, encoding=enc)",80],["#' @encoding UTF-8",79],["function(file, encoding = NA)",66],["exprs <- .parse_code_file(file, encoding)",60],["encoding <- desc[\"Encoding\"]",56],["encoding = getOption(\"encoding\"))",54]]},{"word":"end","context":[["# Sources 7 & 8 end",328],["} # IF end",277],["end$mday <- 1L",134],["start = 1, end = iters - burn, update = update)",127],["end",119],["cb$putlabel(end.label)",116],["end.label <- cb$makelabel()",116],["end$isdst <- -1L",114],["end.time <- Sys.time()",113],["end <- as.POSIXlt(max(x, na.rm = TRUE))",112]]},{"word":"entries","context":[["a.smooth.coef=0 # coefficient for scaling the entries of the MA filter dimensionwise (not varying in these simulations)",110],["entries <-",87],["entries <- NULL",41],["Log.info(\"Duplicate-entries-in-grid-space check\")",40],["length(x) - max.print, 'entries ]\\n')",37],["entries <- readRDS(INDEX)",36],["## remove these function entries, but should really do better,",34],["## by comparing the explicit \\usage entries for S4 methods to",34],["## Optional entries in DESCRIPTION:",34],["## We may still have \\S4method{}{} entries in functions, which",34]]},{"word":"entry","context":[["## <entry>",247],["## </entry>",247],["tkgrid(tklabel(tt,text=\"Final time (T) : \"), T.entry,sticky=\"w\")",91],["tkgrid(tklabel(tt,text=\"Size of process (N) : \"), N.entry, sticky=\"w\")",91],["tkgrid(tklabel(tt,text=\"Initial time (t0) : \"), t0.entry,sticky=\"w\")",76],["output.entry  <- tkentry(tt, textvariable=output)",63],["c(\"Compiled code should not call entry points which\",",60],["entry",58],["tkgrid(tklabel(tt,text=\"Initial value (x0) : \"), x0.entry, sticky=\"w\")",50],["if (entry$package != package) {",45]]},{"word":"env","context":[["#!/usr/bin/env Rscript",1591],["code_env <- new.env(hash = TRUE)",261],["env",224],["cplexPointer(env),",187],["env <- parent.env(env)",163],["env <- parent.env(env)",163],["env <- parent.env(env)",163],["envir = env)",161],["env <- as.environment(env)",132],["env <- as.environment(env)",132]]},{"word":"envir","context":[["envir = compat)",689],["where = envir)",263],["envir = .GenericArgsEnv)",243],["envir = env)",161],["}, where = envir)",151],["envir)",138],["assign(\"testSql\", c(get(\"testSql\", envir = globalenv()), statement), envir = globalenv())",136],["assign(\"testSql\", c(get(\"testSql\", envir = globalenv()), statement), envir = globalenv())",136],["assign(f, fx, envir = env)",111],["envir = thisEnv)",106]]},{"word":"environment","context":[["where <- as.environment(where)",190],["environment(sys.function(1))$e",138],["# Swirl's state, named e, is stored in the environment of the callback.",138],["env <- as.environment(env)",132],["if (typeof(genfun) == \"closure\") environment(genfun)",125],["# Notes:    Assumes unix environment.",118],["ev <- environment(fdef)",105],["environment(fx) <- .BaseNamespaceEnv",93],["## Currently only accessible via an internal environment",82],["fenv <- environment(fdef)",70]]},{"word":"epsilon","context":[["epsilon.summary <- apply(epsilon, 1, quantile,",90],["epsilon.summary <- apply(epsilon, 1, quantile,",90],["epsilon <- x[[\"y\"]] - x[[\"yhat\"]]",60],["N <- nrow(epsilon.obs)",60],["epsilon <- 1e-5",60],["epsilon   = 0.000011))",56],["for (s in 1:ncol(epsilon.obs)) {",45],["epsilon = 0.000011))",44],["epsilon.500 <- matrix(epsilon.summary[2,], nrow(Data[[\"Y\"]]),",40],["epsilon.500 <- matrix(epsilon.summary[2,], nrow(Data[[\"Y\"]]),",40]]},{"word":"equal","context":[["isTRUE(all.equal(correctVal,e$val))",102],["comm.print(all.equal(out1, out2))",74],["isTRUE(all.equal(expr1, expr2))",51],["stopifnot(all.equal(aperm(x, c(2, 1)), t(x)))",50],["msg <-  if(check.attributes) attr.all.equal(target, current, ...)",46],["var.equal = TRUE, paired = FALSE)",44],["stop(\"the elements of 'comp' must be smaller or equal than \", object$ncomp, \".\")",39],["all.equal(d0, d1)",36],["## Are all vignette dependencies at least suggested or equal to",34],["m1 <- m[-grep(\"^all\\\\.equal\", m)]",34]]},{"word":"err","context":[["error = function(err) {",247],["}, error = function(err) {",117],["}, error=function(err) {",95],["err <- try({",89],["err <- 0",84],["error = function(err){",64],["as.integer(err),",55],["} , error = function(err) {",54],["print(paste(\"ERROR:  \",err))",54],["if(is(err, \"try-error\")){",51]]},{"word":"error","context":[["error = function(e) {",620],["}, error = function(e) {",493],["error = function(e)",461],["error = identity)",379],["error = function(e) NULL",270],["if (inherits(res, \"try-error\"))",269],["error = function(err) {",247],["if(inherits(Mo1, \"try-error\")) {",217],["error = function(e){",169],["error = conditionMessage)",153]]},{"word":"errors","context":[["errors <- c(errors,",71],["errors <- c(errors,",71],["errors <- character()",66],["## BibTeX errors.",52],["## (La)TeX errors.",52],["if(length(errors))",47],["# warnings = errors",45],["# testing for specific errors",41],["errors <- c(errors, msg)",35],["errors <- c(errors, msg)",35]]},{"word":"eval","context":[["expected <- eval(parse(text=\"FALSE\"));",383],["## ----eval=FALSE----------------------------------------------------------",211],["mf <- eval(m, parent.frame())",204],["expected <- eval(parse(text=\"TRUE\"));",191],["## ---- eval=FALSE---------------------------------------------------------",171],["if(is.matrix(eval(m$data, parent.frame())))",163],["newy <- format(eval(parse(text=newy)), digits= 3, scientific = TRUE)",138],["expected <- eval(parse(text=\"NULL\"));",135],["## ----eval=TRUE, tidy=FALSE-----------------------------------------------",124],["mf <- eval(mf, parent.frame())",81]]},{"word":"even","context":[["#  but WITHOUT ANY WARRANTY; without even the implied warranty of",5447],["# but WITHOUT ANY WARRANTY; without even the implied warranty of",3166],["##' @param alwaysRetry Whether to always retry even when no response is",498],["## but WITHOUT ANY WARRANTY; without even the implied warranty of",474],["#    but WITHOUT ANY WARRANTY; without even the implied warranty of",233],["#but WITHOUT ANY WARRANTY; without even the implied warranty of",214],["# WITHOUT ANY WARRANTY; without even the implied warranty of",180],["#   but WITHOUT ANY WARRANTY; without even the implied warranty of",129],["#     but WITHOUT ANY WARRANTY; without even the implied warranty of",105],["# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR",94]]},{"word":"ews","context":[["# update plot legend with ews and breakpoint lines",898],["# update plot legend with only ews line",898],["# re-scale ews statistic",193],["# draw rescaled ews line, axis, and label (from 'plotrix')",193],["# use ews time-index determination and associated value",48],["# run ews analysis on desired component",28],["# check for all valid ews arguments",27],["# display default plot attributes if there are no ews lines selected",24],["# check if breakpoint lines and ews lines can be drawn",18],["# draw ews line based on radio button selection",12]]},{"word":"ewsLine","context":[["1:length(ewsLine[[1]]), ewsLine[[1]], type=\"l\",",898],["1:length(ewsLine[[1]]), ewsLine[[1]], type=\"l\",",898],["ewsLine <- rbind(NA, ewsLine)",193],["ewsLine <- rbind(NA, ewsLine)",193],["ewsLine <- quickGeneric()[8]",14],["ewsLine <- advancedGeneric()[3]",13],["ewsLine <- advancedGeneric()[9]",13],["ewsLine <- quickGeneric()[7]",12],["ewsLine <- advancedGeneric()[7]",12],["ewsLine <- advancedGeneric()[4]",12]]},{"word":"exact","context":[["sgp.exact.grade.progression=TRUE,",1079],["# sgp.exact.grade.progression=TRUE,",204],["nm <- attr(envir, \"name\", exact = TRUE)",53],["if(is.null(exact))",43],["exact = TRUE)",39],["exact = FALSE)",37],["exact = FALSE, continuity = TRUE)",36],["sub(\".*:([^_]*).*\", \"\\\\1\", attr(env, \"name\", exact = TRUE))",33],["warning(\"cannot compute exact p-value with ties\")",33],["sgp.exact.grade.progression=sgp.iter[[\"sgp.exact.grade.progression\"]],",32]]},{"word":"examples","context":[["#' @examples",18408],["#'@examples",674],["##' @examples",593],["#' @examples \\dontrun{",390],["#' files <- dir('./inst/examples', recursive=TRUE, full.names=TRUE, pattern='\\\\.xml$')",337],["# @examples",244],["# #' @examples",119],["#' @examples {",95],["checkingLog(Log, \"examples\")",64],["types = c(\"examples\", \"tests\", \"vignettes\"),",42]]},{"word":"except","context":[["# you may not use this file except in compliance with the License.",1263],["#   you may not use this file except in compliance with the License.",729],["# \"License\"); you may not use this file except in compliance",607],["# (the \"License\"); you may not use this file except in compliance with",154],["# You may not use this file except in compliance with the Kim Lab License",45],["## you may not use this file except in compliance with the License.",41],["## FIXME: could use dumped files, except for use of encoding = \"ASCII\"",33],["\"except perhaps in comments.\\n\",",32],["#  you may not use this file except in compliance with the License.",26],["### Assertion: methods argument unused except for primitives",22]]},{"word":"exist","context":[["stop(gettextf(\"directory '%s' does not exist\", dir),",379],["stop(gettextf(\"directory '%s' does not exist\", dir), domain = NA)",232],["cstr <- paste(\"- file does not exist:\",file,\"\\n\")",85],["stop(\"Parameter in Parms does not exist.\")",74],["stop(gettextf(\"file '%s' does not exist\", file),",67],["#' @param force logical, indicates how to deal with files that already exist.",38],["if(is.na(file.info(movieDir)$isdir)) stop(paste(\"movie directory does not exist\"))",38],["# download the reactome file if it doesnt exist",35],["## whether pointers exist, so let us do this here.",33],["## abide by POSIX.  These locales need not exist, but",33]]},{"word":"exists","context":[["if(!dir.exists(dir))",431],["if(!dir.exists(code_dir))",275],["if (file.exists(base.path1))  {",234],["# then, if the requested plot already exists, use it",228],["if(file.exists(file.path(dir, \"NAMESPACE\"))) {",203],["checkTrue(file.exists(file))",162],["if(dir.exists(code_dir)) {",150],["checkTrue(file.exists(dir))",150],["if(file.exists(path)) {",114],["if (file.exists(savefile)) {",107]]},{"word":"exit","context":[["on.exit(close(con))",690],["on.exit( .Call(\"R_igraph_finalizer\", PACKAGE=\"igraph\") )",382],["on.exit(close(file))",278],["on.exit()",276],["dev.hold(); on.exit(dev.flush())",254],["on.exit(progress$close())",205],["on.exit({",186],["on.exit(par(opar))",134],["\"  -h, --help\t\tprint short help message and exit\",",133],["message(\"Press ESC if you want to exit this lesson and you\")",129]]},{"word":"exp","context":[["checkEquals(obs, exp, msg = message)",204],["checkIdentical(obs, exp)",152],["if(log == FALSE) dens <- exp(dens)",133],["exp.root = NA,",40],["breaks=round(exp(seq(log(0.5), log(10), 0.25)),1), LegendSize=0.75, PlotRef=FALSE,",33],["w <- exp(logwtheta[1])",31],["theta <- exp(logwtheta[2])",31],["V=bpop[2]*exp(b[2]),",31],["LP.grid <- exp(LP.grid - logadd(LP.grid))",30],["expect_equal(act, exp)",29]]},{"word":"expand","context":[["m <- match.call(expand.dots = FALSE)",343],["mf <- match.call(expand.dots = FALSE)",123],["else if (file.exists(f <- path.expand(\"~/.R/Makevars\")))",88],["## expand",48],["scale_y_continuous(expand=c(0,0)) +",47],["scale_x_continuous(expand=c(0,0)) +",39],["bestTune = expand.grid(",37],["expand = c(0, 0)) +",35],["} else if (file.exists(f <- path.expand(paste(\"~/.R/Makevars\",",34],["## Check whether we can expand to something non-empty.",33]]},{"word":"expect_equal","context":[["expect_equal(",765],["expect_equal(actual, expected)",116],["expect_equal(as(",114],["expect_equal(sortKeyValueList(actual),",110],["expect_equal(sortKeyValueList(actual), sortKeyValueList(expected))",87],["expect_equal(mode(tmp),\"numeric\")",87],["testthat::expect_equal(",75],["expect_equal(ncol(tmp),2)",67],["expect_equal(system(\"ls -lh | grep DR-loader- | wc -l\", intern=TRUE), \"0\")",60],["expect_equal(sql,",57]]},{"word":"expected","context":[["}, o=expected);",3713],["expected = y",420],["expected <- eval(parse(text=\"FALSE\"));",383],[",  identicalTo( expected, tol = 1e-6 ) )",353],["},  o = expected);",330],["expected <- eval(parse(text=\"TRUE\"));",191],["expected <- .tadf(seqnames=seqnames,",181],["checkIdentical(expected, xx)",162],["expected <- eval(parse(text=\"NULL\"));",135],["# some number of the expected events will fail, often (always?) because",122]]},{"word":"export","context":[["#' @export",44293],["#'@export",2239],["##' @export",1990],["# @export",404],["# #' @export",222],["#'  @export",83],["# If this is the first export function called in the library",43],["##     export the generic, and exporting a generic in the namespace",33],["##     will also export its methods.",33],["## ##' @export",28]]},{"word":"expr","context":[["return(expr)",150],["expr",149],["any(sapply(c(...), function(expr)omnitest(expr)))",142],["any(sapply(c(...), function(expr)omnitest(expr)))",142],["# Returns TRUE if e$expr matches any of the expressions given",142],["getState()$expr",136],["error = function(e)stop(paste0(\"Illegal expression \", dprs(expr), \": \",",102],["if (!quoted) { expr <- substitute(expr) } # force quoted",96],["if (!quoted) { expr <- substitute(expr) } # force quoted",96],["ans <- is_robust_match(good_expr, e$expr, eval_for_class, eval_env)",85]]},{"word":"express","context":[["# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",1415],["#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",717],["# KIND, either express or implied.  See the License for the",605],["# CONDITIONS OF ANY KIND, either express or implied.  See the License",45],["## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",41],["#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",26],["## the method for \"oldClass\" is really a constant, just hard to express that way",13],["#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",12],["#   WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",12]]},{"word":"expression","context":[["# Get the last expression which the user entered at the R console.",136],["error = function(e)stop(paste0(\"Illegal expression \", dprs(expr), \": \",",102],["if(is.call(e) || is.expression(e)) {",100],["# a reasonable range of expression log2 ratios",96],["rp = vector('expression',2)",83],["rp[1] = substitute(expression(italic(R)^2 == MYVALUE),",78],["rp[2] = substitute(expression(italic(p) == MYOTHERVALUE),",78],["initialize <- expression({",68],["## which is an expression evaluating to TRUE?)",66],["plotCmd = expression({",56]]},{"word":"exprs","context":[["exprs <- exprs[!ind]",167],["exprs <- exprs[!ind]",167],["ind <- as.logical(sapply(exprs,",166],["for(i in seq_along(exprs)) find_bad_exprs(exprs[[i]])",106],["for(i in seq_along(exprs)) find_bad_exprs(exprs[[i]])",106],["exprs <- db_usages[[docObj]]",102],["exprs <-",78],["for(e in exprs) {",72],["names(exprs) <- file",68],["exprs <- exprs[ind]",68]]},{"word":"ext","context":[["for(i in seq_along(ext)) {",156],["what <- names(ext)",106],["ext <- ClassDef@contains",81],["exti <- ext[[i]]",81],["if(length(ext)) {",78],["paste0(bf, ext[type]))",72],["return(ext)",71],["ext",67],["showExtends(ext)",54],["if(.isIndirectExtension(ext[[i]])) {",54]]},{"word":"extra","context":[["#' @param \\dots extra arguments to be passed if `object` is of type",78],["extra <- \"\"",58],["paste(extra, collapse = \" \"),",58],["family=\"nbinom\", zeroInflation=FALSE, extra.args=\"-ndi 60000\",",50],["\"--add-extra-dicts=en_GB\"),",48],["# delete the extra rows before saving",46],["# if there are extra rows that have been added by \"dragging\" the control, remove them",46],["# override for api to account for extra parameter in V19 and beyond",41],["\"--add-extra-dicts=en_GB\",",36],["## containing DESCRIPTIION.in, hence the extra check for",32]]},{"word":"f","context":[["setwd(normalizePath(dirname(R.utils::commandArgs(asValues=TRUE)$\"f\")))",3565],["f",463],["sQuote(f)),",354],["meta <- if(file_test(\"-f\", dfile))",286],["fdef <- getGeneric(f, where = where)",196],["function(f) {",193],["close(f)",191],["return(f)",171],["makefiles <- c(makefiles, f)",152],["f <- fdef@generic",146]]},{"word":"factor","context":[["'factor',",188],["## SQOLIM multiplcation factor:",158],["results <- c(results,list(data.frame(factor,type,level,estimate)))",102],["#' hex[,2] <- as.factor(hex[,2])",96],["fG = factor(fGroups, levels= c(levels(fGroups)[1], lev[-i], lev[i]) )",79],["pros.hex[,2] <- as.factor(pros.hex[,2])",73],["pros.hex[,6] <- as.factor(pros.hex[,6])",71],["pros.hex[,5] <- as.factor(pros.hex[,5])",71],["train[,response_col] <- as.factor(train[,response_col])",71],["pros.hex[,9] <- as.factor(pros.hex[,9])",71]]},{"word":"factors","context":[["# Fixed factors",51],["# Random factors",51],["stop(\"level sets of factors are different\")",38],["dof <- 0.5 * ((p - factors)^2 - p - factors)",24],["## str(.) for large factors should be fast:",24],["dof <- 0.5 * ((p - factors)^2 - p - factors)",24],["## careful, as.data.frame turns things into factors.",23],["## coerce factors to vectors, in case lhs is character or",23],["factors <- x$factors",23],["factors <- x$factors",23]]},{"word":"failed","context":[["message(\"Grade submission failed.\")",129],["if (res) pkgerrmsg(\"configuration failed\", pkg_name)",72],["errorLog(Log, \"Installation failed.\")",64],["## failed in 1.5.1",60],["warning(gettextf(\"%s failed in %s() for '%s', details:\\n  call: %s\\n  error: %s\",",52],["stop(gettextf(\"%s failed in %s() for '%s', details:\\n  call: %s\\n  error: %s\",",50],["## all failed in 3.0.2",49],["## failed in 1.8.1",49],["## failed in 2.3.1",45],["errorLog(Log, \"copying to build directory failed\")",44]]},{"word":"family","context":[["#' @family math_funcs",110],["class = \"family\")",91],["#' @family string_funcs",77],["data = mcmc_dataframe, family=\"ordinal\",",75],["#' @family datetime_funcs",70],["fit = glm(responses~as.numeric(as.character(train_dat[i,]))+cancers,family=binomial)",69],["family <- match.arg(family)",68],["family = family,",68],["family = family,",68],["family <- match.arg(family)",68]]},{"word":"fdef","context":[["if(is.null(fdef))",253],["fdef <- getGeneric(f, where = where)",196],["if(!is(fdef, \"genericFunction\")) {",149],["if(is(fdef, \"genericFunction\"))",147],["f <- fdef@generic",146],["fdef <- f",119],["package <- fdef@package",110],["if(is.null(fdef)) {",108],["ev <- environment(fdef)",105],["if(!is(fdef, \"genericFunction\"))",100]]},{"word":"ff","context":[["base.path1 = \"C:/docs/ff/gitHub/fast-furious/data_process\"",136],["body(fx) <- substitute(UseMethod(ff), list(ff=f))",85],["body(fx) <- substitute(UseMethod(ff), list(ff=f))",85],["ff.setBasePath(path = '/Users/gino/kaggle/fast-furious/gitHub/fast-furious/')",80],["ff <- file.path(outDir, dirname[type],",72],["if (!file_test(\"-f\", ff) || file_test(\"-nt\", f, ff)) {",72],["if (!file_test(\"-f\", ff) || file_test(\"-nt\", f, ff)) {",72],["ens = ff.createEnsemble (Xtrain = train_set_cl,",66],["ff <- def@fieldPrototypes",47],["c(as.list(def@refMethods), as.list(ff)[accs])",47]]},{"word":"field","context":[["tmp <- desc[field]",98],["sQuote(field),",90],["## All field tags must be ASCII.",67],["stop(gettextf(\"%s is not a field in class %s\",",54],["r.field as field,",50],["r.field as field,",50],["parse_description_field <- function(desc, field, default = TRUE)",48],["field <- as.factor(field)",45],["field <- as.factor(field)",45],["warning(\"'DESCRIPTION' has an 'Encoding' field and re-encoding is not possible\", call.=FALSE)",40]]},{"word":"fields","context":[["fields = list(",335],["library(fields)",325],["fields <- list(",224],["fields <- list()",62],["if(length(fields)) {",50],["if (is.null(fields))",44],["fields <- requiredFields",40],["ret0 <- .readPkgDesc(lib, fields)",40],["stopifnot(is.character(fields))",40],["fields <- unique(c(requiredFields, fields))",40]]},{"word":"file","context":[["# you may not use this file except in compliance with the License.",1263],["content = function(file) {",1166],["file=LogFile, append=TRUE)",1113],["#   you may not use this file except in compliance with the License.",729],["code_dir <- file.path(dir, \"R\")",636],["dfile <- file.path(dir, \"DESCRIPTION\")",627],["# or more contributor license agreements.  See the NOTICE file",607],["# regarding copyright ownership.  The ASF licenses this file",607],["# \"License\"); you may not use this file except in compliance",607],["#' prosPath <- system.file(\"extdata\", \"prostate.csv\", package=\"h2o\")",363]]},{"word":"file_test","context":[["meta <- if(file_test(\"-f\", dfile))",286],["if(!file_test(\"-d\", dir))",170],["if(file_test(\"-f\", sys_data_file)) load(sys_data_file, code_env)",137],["if(!file_test(\"-d\", code_dir))",98],["if (!file_test(\"-f\", ff) || file_test(\"-nt\", f, ff)) {",72],["if (!file_test(\"-f\", ff) || file_test(\"-nt\", f, ff)) {",72],["if(file_test(\"-f\", log)) {",52],["if(file_test(\"-f\", logfile)) {",52],["files <- files[file_test(\"-f\", files)]",50],["if (file_test(\"-x\", \"configure\")) {",48]]},{"word":"filename","context":[["filename = function() {",631],["unlink(filename)",162],["filename <- tempfile(fileext = \".mat\")",145],["png(filename)",134],["if(!checkIntFormat(filename)) stop(\"invalid 'filename'\")",117],["if(!checkIntFormat(filename)) stop(\"invalid 'filename'\")",117],["invisible(filename)",75],["if(is.null(filename))",71],["file = filename)",71],["cat(unlist(Rdtxt), file = filename, sep = \"\\n\")",69]]},{"word":"files","context":[["#' files <- dir('./inst/examples', recursive=TRUE, full.names=TRUE, pattern='\\\\.xml$')",337],["## the location of the CSV files",280],["aspell(files,",175],["if (length(files)) {",127],["#   see R's copyright and license files",117],["for(f in files) {",115],["# of this software and associated documentation files (the \"Software\"), to deal",114],["for (f in files) {",114],["files",97],["for (i in 1:length(files)) {",94]]},{"word":"fill","context":[["data <- data.table::rbindlist(data, fill=TRUE)",608],["legend('topright', legend = c('Underexpressed', 'Overexpressed'), fill = c('lightblue', 'pink'))",120],["legend(\"topright\", inset=.05, c(\"position_from_pip\",\"position_from_start\"), fill=c(\"cyan4\",\"darkgoldenrod1\"))",115],["panel.border =element_rect(colour = \"black\",fill=NA),",112],["panel.background = element_rect(fill = \"white\"),",101],["geom_violin(aes(y=yAxis), fill = \"gray\", colour = \"gray\")   + scale_x_discrete(limits=sampleRank2)  +",55],["panel.background = element_rect(fill = \"transparent\",colour = NA),",55],["geom_violin(aes(y=yAxis), fill = \"gray\", colour = \"gray\", adjust = 3) +   scale_x_discrete(limits=sampleRank2)  +",55],["geom_violin(aes(y=yAxis), fill = \"gray\", colour = \"gray\") + scale_x_discrete(limits=sampleRank2)  +",55],["geom_violin(aes(y=yAxis), fill = \"gray\", colour = \"gray\", adjust = 3) + scale_x_discrete(limits=sampleRank2)  +",55]]},{"word":"filter","context":[["Log.info(\"Now do the same filter & subset, but select complement of columns.\")",285],["ma.scale=c(-1.4,2.3,-2) # scaling of the MA filter",110],["ma.diff.index=3 # which index of the MA filter differs between the two FTS",110],["a.smooth.coef=0 # coefficient for scaling the entries of the MA filter dimensionwise (not varying in these simulations)",110],["# To filter out samples based on donor information",88],["filter(",70],["dplyr::filter(id %in% sample(unique(id),10)) %>%",57],["filter = list(\"pot\", ignore = ignore),",48],["dplyr::filter(",41],["if(is.null(filter))",37]]},{"word":"find","context":[["dir <- find.package(package, lib.loc)",623],["# You can find out more about building applications with Shiny here:",223],["error = function(c) {file.path(find.package(\"swirl\"),\"Courses\")}",58],["## For each state, find the hospital of the given rank",56],["# Otherwise, attempt to find the appropriate method.",51],["# If there was no matching method, attempt to find the default method. If that fails,",51],["# Try to find pathsofar at start of gPath",50],["# find the html help file and display in the default browser",48],["while (flag !=1) {   # find out where non-zero elements start",48],["##find data##",46]]},{"word":"finite","context":[["else if(any(!is.finite(c(Mo1[[\"LP\"]], Mo1[[\"Dev\"]],",246],["if(!is.finite(log.alpha)) log.alpha <- 0",131],["\"resulted in non-finite value(s).\\n\",",114],["x <- x[is.finite(x)]",52],["ylim <- if (is.null(ylim)) range(xy$y[is.finite(xy$y)]) else ylim",43],["xlim <- if (is.null(xlim)) range(xy$x[is.finite(xy$x)]) else xlim",43],["if(!is.finite(value) || value < min || value > max) return()",37],["cat(\"\\nWARNING: Proposal resulted in non-finite\",",37],["if(any(!is.finite(c(Mo1[[\"LP\"]], Mo1[[\"Dev\"]],",36],["stop(\"all entries of 'x' must be nonnegative and finite\")",30]]},{"word":"first","context":[["first <- FALSE",1729],["if (first) {",1713],["first <- TRUE",262],["#These first few lines run only when the file is run in RStudio, !!NOT when an Rmd/Rnw file calls it!!",95],["# first the reactive function doing all calculations when the related inputs were modified by the user",79],["## we do the vectorized metadata computations first, and try to",68],["## the first argument could be named, or could be a variable name.",66],["stop(paste0(\"Illegal expression, \", dprs(expr),\": The first argument, \", dprs(expr[[2]]),",51],["## This first line will likely take a few seconds. Be patient!",51],["# If the S3 method's first argument, expr[[2]], is anything but atomic",51]]},{"word":"fit","context":[["summary(fit)",505],["fit",391],["return(fit)",188],["print(\"    start mcmc fit\")",179],["print(fit)",130],["anova(fit)",123],["plot(fit)",119],["fit.rarebinaryCPP(beta.init = 0, xi.init = 0,",114],["predict(fit)",78],["predict(fit, data.frame(x=x), se=TRUE)",76]]},{"word":"fixed","context":[["patient.id <- gsub(\"-\", \".\", patient.id, fixed=TRUE)",260],["args <- strsplit(args,'nextArg', fixed = TRUE)[[1L]][-1L]",154],["fixed = TRUE, invert = TRUE, value = TRUE)",100],["build_dir <- gsub(\"\\\\\", \"/\", tempfile(\"Rd2pdf\"), fixed = TRUE)",96],["arg.split <- strsplit(each.arg,'=',fixed=TRUE)[[1]] # split on =",80],["invert = TRUE, value = TRUE, fixed = TRUE)",68],["if (grepl(\"\\r\", contents, fixed = TRUE, useBytes = TRUE))",64],["function(x) grepl(x, lic, fixed = TRUE))",58],["fixed = FALSE, useBytes = FALSE)",58],["ignore.case, perl, fixed, useBytes))",56]]},{"word":"fluidRow","context":[["fluidRow(",3732],["fluidRow(column(12,",47],["fluidRow (",46],["fluidRow(column(",41],["shiny::fluidRow(",36],["fluidRow(column(width = 12,",34],["wellPanel(fluidRow(",25],["fluidRow(column(width=12,",19],["# fluidRow(",19],[") # fluidRow",18]]},{"word":"flush","context":[["flush.console()",1209],["flush(stderr()); flush(stdout())",320],["flush(stderr()); flush(stdout())",320],["dev.hold(); on.exit(dev.flush())",254],["utils::flush.console()",160],["if (R.Version()$os == \"Win32\" || R.Version()$os == \"mingw32\") flush.console()",153],["dev.flush()",138],["#flush.console()",38],["\"> ### \\\\* [^\\n]+\\n> \\n> flush[^\\n]+\\n> \\n\", useBytes = TRUE)[[1L]]",32],["## subsequent call to flush(): needs to be kept in",32]]},{"word":"fname","context":[["fname))",109],["xfname <- x[[fname]]",74],["else if (Sys.info()['sysname'] == 'Darwin') { system(paste (\"open \",fname, sep=\"\")) } # mac",71],["if (Sys.info()['sysname'] == 'Windows') { shell.exec(paste(getwd(),\"/\",fname,sep=\"\")) }  # windows",71],["cat (paste(\"OUTPUT: \", fname, sep=\"\"))",68],["if (file.exists(fname) && open_res) {",65],["else { system(paste (\"xdg-open \",fname, sep=\"\")) } # linux",62],["if(Recall(x[[i]], fname))",46],["#' logger.start(fname=NA)",46],["sQuote(fname),",43]]},{"word":"following","context":[["# furnished to do so, subject to the following conditions:",114],["#     notice, this list of conditions and the following disclaimer.",61],["# modification, are permitted provided that the following conditions are",61],["\"The following files are already in R: \",",60],["\"The following files contain a license that requires\\n\",",60],["\"Found the following files with non-portable file names:\\n\",",60],["\"Found the following file with a non-portable file name:\\n\",",60],["\"The following files look like leftovers/mistakes:\\n\",",60],["\"In addition to the above warning(s), found the following notes:\",",60],["#     notice, this list of conditions and the following disclaimer in",53]]},{"word":"font","context":[["font=2)",113],["mtext(p, line=line, adj=1, col=pcol, font=font)",102],["mtext(p, line=line, adj=1, col=pcol, font=font)",102],["font",51],["font = (1:4)[c(\"plain\", \"bold\", \"italic\", \"bold italic\") ==",46],["par(bg=bg, font.main = 2, font.lab = 2)",43],["par(bg=bg, font.main = 2, font.lab = 2)",43],["# Check that the font has the correct structure and information",40],["font-weight: bold;",40],["par(font.lab=2)",38]]},{"word":"foo","context":[["foo",130],["as.vector.foo <- function(...) 99",112],["foo <- function(x) {",60],["print(foo)",58],["show(foo)",52],["## this will report '* DONE (foo)' if it works, which",48],["foo()",39],["foo(1:10)",39],["foo(matrix(1:10, 2, 5))",38],["foo(pi)",38]]},{"word":"for","context":[["#  GNU General Public License for more details.",5412],["# GNU General Public License for more details.",2481],["# See the License for the specific language governing permissions and",1314],["#   See the License for the specific language governing permissions and",729],["for (i in 1:n) {",620],["# distributed with this work for additional information",608],["# KIND, either express or implied.  See the License for the",605],["for(i in 1:n){",522],["## GNU General Public License for more details.",501],["# Parameters for the test.",398]]},{"word":"forest","context":[["## on forest",204],["## bac load in forest",204],["chk.forest.bac <- data.frame(",158],["## pop on forest",158],["chk.forest.pop <- data.frame(",158],["## accum load in forest",112],["manual.calc.bac.total = chk.bac[chk.bac$location == \"forest\", \"total.bac\"],",112],["chk.bac[chk.bac$location == \"forest\", \"accum.bac\"],",112],["manual.calc.pop.total = chk.pop[chk.pop$location == \"forest\", \"pop\"],",112],["chk.bac[chk.bac$location == \"forest\", \"total.bac\"],",112]]},{"word":"form","context":[["form",100],["## Return a data frame of the form:",92],["#     Redistributions in binary form must reproduce the above copyright",53],["attr(value, \"formula\") <- form",43],["form <- formula(paste('expression~',paste(c('gene',xcols),collapse='+'),sep=''))",36],["</form>",36],["## show all foreign function calls in abbreviated form with the line",34],["formula = function() form,",34],["## fixup \\link[=dest] form",33],["## command line option '--install' is of the form",32]]},{"word":"format","context":[[",strftime(Sys.time(), format = \"%Y%m%d%H%M\"),",190],["newy <- format(eval(parse(text=newy)), digits= 3, scientific = TRUE)",138],["# all rownames should follow \"TCGA.02.0014\" format.  no multiply-sampled suffixes yet",122],["format.fun <- formatNum",92],["writeLines(format(x))",84],["resultLog(Log, \"EXISTS but not correct format\")",82],["list(MYVALUE = format(r2,dig=3)))[2]",80],["format=\"f\",digits=2),",80],["#' @format",79],["list(MYOTHERVALUE = format(my.p, digits = 2)))[2]",78]]},{"word":"formula","context":[["stop(\"'formula' missing or incorrect\")",140],["function(formula, data, subset, na.action, ...)",101],["formula <- as.formula(formula)",81],["formula <- as.formula(formula)",81],["formula <- as.formula(formula)",81],["formula <- as.formula(data)",66],["formula <- as.formula(data)",66],["return(formula)",62],["data <- environment(formula)",55],["fcall <- formula$call",54]]},{"word":"found","context":[["result[[good.records.found]] <- new.event",376],["found <- TRUE",356],["good.records.found <- good.records.found + 1",303],["good.records.found <- good.records.found + 1",303],["found <- FALSE",201],["good.records.found <- 0",191],["result[1:good.records.found]",186],["# we found",122],["# The license and distribution terms for this file may be found in the",75],["good.records.found <- good.records.found +1",73]]},{"word":"frame","context":[["data.frame(",754],["e <- get(\"e\", parent.frame())",440],["data <- data.frame()",358],["m$data <- as.data.frame(data)",227],["matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))",206],["mf <- eval(m, parent.frame())",204],["if(is.matrix(eval(m$data, parent.frame())))",163],["data <- as.data.frame(data)",159],["chk.stream.bac <- data.frame(",158],["chk.stream.pop <- data.frame(",158]]},{"word":"free","context":[["#  This program is free software; you can redistribute it and/or modify",5207],["# This program is free software: you can redistribute it and/or modify",682],["# This program is free software; you can redistribute it and/or modify",594],["# This library is free software; you can redistribute it and/or",268],["free=TRUE, values=.2,",248],["# Xpose 4 is free software; you can redistribute it and/or",234],["free=T,",231],["free=TRUE,",223],["# This program is free software; you can redistribute it and/or",200],["free=FALSE, values=1),",187]]},{"word":"from","context":[["emlToS4(from))",685],["S4Toeml(from))",685],["##' received from the API server",498],["## Using sources from directory @code{dir} ...",442],["from",322],["for (e in seq(from=1, to=nExp)) {",212],["# Make a list from the ... arguments and plotlist",207],["# draw rescaled ews line, axis, and label (from 'plotrix')",193],["# nrow: Number of rows needed, calculated from # of cols",192],["for (k in seq(from=1, to=nAssets)) {",177]]},{"word":"full","context":[["#' files <- dir('./inst/examples', recursive=TRUE, full.names=TRUE, pattern='\\\\.xml$')",337],["full.names = TRUE, recursive = TRUE)",238],["# for full details see the file COPYING",173],["full.names = FALSE,",115],["full.names = TRUE)",76],["full.names = FALSE)",65],["pattern = \"[.](cls|sty|drv)$\", full.names = TRUE)",60],["system(command.full)",58],["##' (\"app-name\") or its full ID (\"app-xxxx\")",57],["# Only check for match with child if have full match with pathsofar",50]]},{"word":"fun","context":[["stat_summary( aes(y=yAxis),   fun.y=mean, colour=\"white\", geom=\"point\", shape=19, size=1.5, show.legend = FALSE) +",176],["FUN <- match.fun(FUN)",175],["fun",116],["format.fun <- formatNum",92],["fun <- e[[1]]",77],["if (typeof(fun) == \"symbol\") {",62],["fun <- fun_call({",60],["checkEquals(fun(),",54],["# If match.fun(expr[[1]]) raises an exception here, the code which follows",51],["tryCatch(fct <- match.fun(expr[[1]]),",51]]},{"word":"function","context":[["function(x, ...)",2129],["function(x)",2000],["function(x) {",1328],["function()",1290],["content = function(file) {",1166],["shinyServer(function(input, output) {",959],["function() {",696],["filename = function() {",631],["error = function(e) {",620],["shinyServer(function(input, output, session) {",546]]},{"word":"functions","context":[["source(\"functions.R\")",133],["## Replacement functions.",102],["functions <- c(functions, replace_funs)",102],["functions <- c(functions, replace_funs)",102],["## Ordinary functions.",101],["functions <-",79],["functions <- .transform_S3_method_markup(functions)",68],["functions <- .transform_S3_method_markup(functions)",68],["functions <- functions[!ind]",67],["functions <- functions[!ind]",67]]},{"word":"g","context":[["g",583],["print(g)",382],["return(g)",354],["plot(g)",234],["for(g in 1L:ngroups){",132],["## FIXME: what if conversion fails on e.g. UTF-8 comments",99],["#' @param SA Absolute Salinity [ g/kg ]",95],["grid.draw(g)",79],["#'              \\linkS4class{H2OModel} (e.g. train=TRUE)",78],["g <- .geometry(width, height, units, res)",72]]},{"word":"gPath","context":[["if (is.character(gPath))",100],["pathsofar, gPath, strict,",90],["grep <- rep(grep, length.out=depth(gPath))",90],["if (nameMatch(gPath$name, grob$name, grep))",90],["if (!inherits(gPath, \"gPath\"))",80],["if (!inherits(gPath, \"gPath\"))",80],["gPath, strict,",80],["if (depth(gPath) == 1) {",70],["gPath=\"\", vpPath=\"\") {",63],["gPath, strict, grep, global)",60]]},{"word":"gTree","context":[["tmp.gt <- gTree(children=gList(tmp.table, tmp.title))",1432],["gTree",100],["gTree$children[[childName]] <- newChild",90],["if (!inherits(gTree, \"gTree\"))",70],["if (!inherits(gTree, \"gTree\"))",70],["child <- gTree$children[[childName]]",60],["childName <- gTree$childrenOrder[index]",60],["# (or the child of a child of a gTree, or ...)",50],["# A gPath may specify the child of a gTree",50],["while (index <= length(gTree$childrenOrder) &&",50]]},{"word":"gc","context":[["gc()",2001],["invisible(gc())",171],["gc(reset=TRUE);",81],["cleanit <- gc()",44],["gc(verbose = FALSE)",43],["# gc()",41],["#gc()",40],["gc() # Let's clean ouR garbage if possible",37],["gc(reset=TRUE)",35],["gc();",30]]},{"word":"gene","context":[["# all colnames should be recognzied gene symbols.  no isoform suffixes yet",142],["colnames(dfCluster) = c('gene', 'cluster')",77],["rownames(dfCluster) = dfCluster$gene",70],["# To store gene expression values for all the array",55],["# To get the gene symbol for each Illumina ID",55],["gene = gene,",49],["gene = gene,",49],["#remove datasets with too many missing top gene features",44],["form <- formula(paste('expression~',paste(c('gene',xcols),collapse='+'),sep=''))",36],["# To create a stringency gene plots before normalization",32]]},{"word":"generic","context":[["f <- fdef@generic",146],["generic",77],["## Find registered methods for generic g.",68],["function(generic.function, class)",47],["warning(gettextf(\"no generic function %s found\",",45],["fdefault@generic <- value@generic",44],["mname <- methodsPackageMetaName(\"M\",fdef@generic, fdef@package)",44],["fdefault@generic <- value@generic",44],["\"formal arguments in method and generic do not appear in the same order\",",44],["fdef@package <- attr(fdef@generic, \"package\") <- thisPackage",42]]},{"word":"generics","context":[["## generics.",136],["generics <- c(generics, g)",46],["generics <- c(generics, g)",46],["for(i in seq_along(generics)) {",36],["## needed for internal generics and group generics.)",34],["## for internal generics and group generics.)",34],["## needed for internal generics and group generics.)",34],["## Allow group generics to be undocumented other than in base.",34],["## for internal generics and group generics.)",34],["## This includes the primitive group generics as from R 2.6.0",33]]},{"word":"geom_line","context":[["geom_line() +",1034],["geom_line()+",148],["theme_bw() + geom_line(colour=\"black\") + geom_hline(yintercept=0,lty=2) +",140],["geom_line()",121],["ggtitle(paste0(case5_ABT$Case_Name,\"\\n\",case5_ABT$ticker))+ geom_line() +",116],["geom_line(size=0.5, colour=\"red\") + geom_hline(yintercept = 0.2, colour=\"blue\") +",76],["gp <- gp + geom_line()",75],["pdb + geom_line(aes(group=projid)) + facet_grid(msex~.)",60],["p <- p + geom_line()",58],["geom_line(size=1) +",52]]},{"word":"geom_point","context":[["geom_point() +",1291],["geom_point(size = 3, color=\"red\") +",289],["geom_smooth(method=\"lm\") + geom_point() +",268],["geom_point()",172],["geom_point()+",80],["geom_point(size=3) +",73],["p <- p + geom_point()",63],["geom_point(",57],["geom_point(size = 3) +",55],["geom_point(shape=1) +",50]]},{"word":"get","context":[["e <- get(\"e\", parent.frame())",440],["## get input",192],["assign(\"testSql\", c(get(\"testSql\", envir = globalenv()), statement), envir = globalenv())",136],["# To get an integer value of number of arrays",108],["## we only source the assignments, and hence do not get any",102],["f <- get(f, envir = code_env) # get is expensive",92],["f <- get(f, envir = code_env) # get is expensive",92],["trim_spectra <- get(x=\"trim\", pos=\"package:MALDIquant\")",91],["base::assign(\".dptime\", (proc.time() - get(\".ptime\", pos = \"CheckExEnv\")), pos = \"CheckExEnv\")",73],["get <- function() x",71]]},{"word":"getOption","context":[["getOption(\"SweaveHooks\")[[\"fig\"]]()",173],["stop(printSpssError(last.SpssError),call. = getOption(\"SPSSStatisticsTraceback\"), domain = NA)",160],["if (is.null(Rc)) Rc <- getOption(\"Rhiredis.connect\")",149],["repos <- getOption(\"repos\")",117],["verbose = getOption(\"verbose\"),",109],["function(pkgs, lib, repos = getOption(\"repos\"),",80],["verbose = getOption(\"verbose\"))",73],["signif.stars = getOption(\"show.signif.stars\"), ...)",62],["encoding = getOption(\"encoding\"))",54],["verbose <- getOption(\"verbose\")",53]]},{"word":"getenv","context":[["hdfs_name_node <- Sys.getenv(c(\"NAME_NODE\"))",209],[".runThisTest <- Sys.getenv(\"RunAllRcppTests\") == \"yes\"",106],["if(Sys.getenv(\"R_LIB\") != \"\") { .libPaths(c(Sys.getenv(\"R_LIB\"), .libPaths())) }",77],["if(Sys.getenv(\"R_LIB\") != \"\") { .libPaths(c(Sys.getenv(\"R_LIB\"), .libPaths())) }",77],["if (!config_val_to_logical(Sys.getenv(\"_R_CHECK_ALWAYS_LOG_VIGNETTE_OUTPUT_\", use_valgrind)))",64],["oPATH <- Sys.getenv(\"PATH\")",54],["td0 <- as.numeric(Sys.getenv(\"_R_CHECK_TIMINGS_\"))",53],["if (!is.na(f <- Sys.getenv(\"R_MAKEVARS_USER\", NA))) {",52],["config_val_to_logical(Sys.getenv(\"_R_CHECK_INSTALL_DEPENDS_\", \"FALSE\"))",48],["scriptsDir=Sys.getenv(\"TM_HOME\")",45]]},{"word":"gettext","context":[["msg <- gettext(\"replacing local value with import %s when loading %s\")",50],["cntxt$stop(gettext(\"cannot compile byte code literals in code\"),",45],["cntxt$stop(gettext(\"cannot compile promise literals in code\"),",45],["gettext(\"Edit the file and move it to the appropriate directory.\"),",45],["cntxt$stop(gettext(\"cannot compile this expression\"), cntxt)",44],["writeLines(gettext(\"Malformed Depends or Suggests or Imports or Enhances field.\"))",33],["writeLines(gettext(\"  Mismatches in argument default values (first 3):\"))",33],["gettext(\"All field tags must be ASCII.\"),",33],["tmp <- c(gettext(\"Entries with infeasible version number:\"),",33],["writeLines(gettext(\"  Mismatches in argument names:\"))",33]]},{"word":"gettextf","context":[["stop(gettextf(\"directory '%s' does not exist\", dir),",379],["stop(gettextf(\"directory '%s' does not contain R code\",",357],["stop(gettextf(\"directory '%s' does not exist\", dir), domain = NA)",232],["stop(gettextf(\"directory '%s' does not contain Rd objects\", dir),",166],["stop(gettextf(",113],["c(gettextf(\"File %s:\", sQuote(f)),",93],["stop(gettextf(\"unable to create temporary directory %s\",",90],["warning(gettextf(",79],["stop(gettextf(\"'%s' not defined for \\\"POSIXt\\\" objects\", .Generic),",76],["message(gettextf(\"  comparing %s to %s ...\",",72]]},{"word":"getwd","context":[["getwd()",607],["wd <- getwd()",181],["print(getwd())",134],["startdir <- getwd()",127],["cwd <- getwd()",105],["pkgdir <- getwd()",86],["owd <- getwd()",84],["cat(paste0(getwd(),\"\\n\"))",77],["sAppDir <<- getwd()",74],["if (Sys.info()['sysname'] == 'Windows') { shell.exec(paste(getwd(),\"/\",fname,sep=\"\")) }  # windows",71]]},{"word":"ggplot","context":[["ggplot() +",377],["ggplot(",239],["# ggplot objects can be passed in ..., or to plotlist (as a list of ggplot objects)",110],["# ggplot objects can be passed in ..., or to plotlist (as a list of ggplot objects)",110],["ggplot(subset(batch_merged,",72],["p <- ggplot()",70],["#' @return ggplot object",69],["p <- ggplot() +",57],["FigureTemp5 <- ggplot(DataFrame_Local, aes(x=sampleType) ) +",55],["FigureTemp3 <- ggplot(DataFrame_Local, aes(x=sampleType) ) +",55]]},{"word":"ggplot2","context":[["library(ggplot2)",7006],["require(ggplot2)",1390],["library(\"ggplot2\")",553],["#' @import ggplot2",340],["library('ggplot2')",161],["require(\"ggplot2\")",142],["#'@import ggplot2",138],["install.packages(\"ggplot2\")",124],["#' library(ggplot2)",96],["#library(ggplot2)",81]]},{"word":"give","context":[["## All remaining checks give notes and not warnings.",60],["# You are welcome to use parts of this code, but please give credit when using it extensively.",51],["# would be likely to give a misleading result. Catch the error merely to",51],["# If fct is an (S4) standardGeneric, match.call is likely to give a misleading result,",51],["#   # likely to give a misleading result. Catch the error merely to give a better diagnostic.",50],["#   # likely to give a misleading result. Catch the error merely to give a better diagnostic.",50],["## give the function a new environment, to cache methods later",46],["## Earlier versions used to give an error if there were no Rd",34],["## will give an error.",33],["## Hmisc, gooJSON, quantmod give spurious output",32]]},{"word":"given","context":[["# Returns TRUE if e$expr matches any of the expressions given",142],["subgrid.density.relative.to.bandwidth=TRUE # is subgrid.density given relatively to the bandwidth?",91],["## Find the function objects in the given package.",68],["stop(\"invalid 'dimnames' given for data frame\")",61],["## Return hospital name in that state with the given rank",59],["#'        none is given, an id will automatically be generated.",58],["##' @param alias If an app name is given for \\code{appNameOrID}, this can be",57],["## For each state, find the hospital of the given rank",56],["# If a correct expression is given attempt a robust match with user's expression.",45],["#' @param log, log.p logical; if TRUE, probabilities p are given as log(p).",44]]},{"word":"glm","context":[["## what else shall we allow?  At least objects of class link-glm.",72],["if(inherits(link, \"link-glm\")) {",71],["fit = glm(responses~as.numeric(as.character(train_dat[i,]))+cancers,family=binomial)",69],["glm(y ~ x, family = poisson(identity), start = c(1,0))",38],["### This tests observation weights in glm ######",36],["load.module('glm')",34],["method = \"glm\", metric = \"ROC\", trControl = controlObject)",34],["summary(glm.fit)",34],["load.module(\"glm\")",32],["SL.library <- c(\"SL.glm\",\"SL.gam\",\"SL.glmnet\",\"SL.glmnet.0\")",32]]},{"word":"gnu","context":[["# along with this program.  If not, see <http://www.gnu.org/licenses/>.",649],["# https://www.gnu.org/licenses/gpl-2.0.txt",309],["# directory under \\share\\licenses. If not, see http://www.gnu.org/licenses/.",234],["# AGPL (http://www.gnu.org/licenses/agpl-3.0.txt) for more details.",199],["#    along with this program.  If not, see <http://www.gnu.org/licenses/>.",145],["#along with this program.  If not, see <http://www.gnu.org/licenses/>.",137],["# along with icd. If not, see <http:#www.gnu.org/licenses/>.",135],["# along with Rcpp.  If not, see <http://www.gnu.org/licenses/>.",133],["# along with rkwarddev.  If not, see <http://www.gnu.org/licenses/>.",121],["## along with this program.  If not, see <http://www.gnu.org/licenses/>.",116]]},{"word":"good","context":[["result[[good.records.found]] <- new.event",376],["good.records.found <- good.records.found + 1",303],["good.records.found <- good.records.found + 1",303],["good.records.found <- 0",191],["result[1:good.records.found]",186],["# one or both dates is \"[Not Available]\".  count tells us how many good",122],["good.records.found <- good.records.found +1",73],["result <- vector(\"list\", nrow(tbl.good))",73],["good.records.found <- good.records.found +1",73],["suspect <- if(any(!good)) {",66]]},{"word":"governing","context":[["# See the License for the specific language governing permissions and",1314],["#   See the License for the specific language governing permissions and",729],["# specific language governing permissions and limitations",605],["# See the License for the specific language governing permissions and limitations under the License.",101],["# for the specific language governing permissions and limitations",45],["## See the License for the specific language governing permissions and",40],["#  See the License for the specific language governing permissions and",26],["#   License for the specific language governing permissions and limitations",12]]},{"word":"gp","context":[["vjust=0, gp=gpar(fontsize=20))",1432],["print(gp)",351],["name=NULL, gp=gpar(), vp=NULL) {",183],["name=name, gp=gp, vp=vp)",103],["name=name, gp=gp, vp=vp)",103],["name=NULL, gp=gpar(), draw=TRUE, vp=NULL) {",88],["gp <- gp + expand_limits(y = 0)",80],["gp <- gp + expand_limits(y = 0)",80],["gp <- gp + geom_line()",75],["gp <- gp + geom_line()",75]]},{"word":"grade","context":[["sgp.exact.grade.progression=TRUE,",1079],["sgp.grade.sequences=list(c('EOCT', 'EOCT')),",374],["# sgp.exact.grade.progression=TRUE,",204],["sgp.grade.sequences=list(c('EOCT', 'EOCT'))),",144],["message(\"want to try to submit your grade at a later time.\")",129],["sgp.baseline.grade.sequences=c('EOCT', 'EOCT'),",76],["sgp.baseline.grade.sequences.lags=1),",58],["sgp.grade.sequences=list(c('EOCT', 'EOCT', 'EOCT')),",58],["sgp.grade.sequences=list(c(8, 'EOCT')),",40],["sgp.grade.sequences=list(c('EOCT','EOCT')),",39]]},{"word":"graph","context":[["if (!is.igraph(graph)) {",256],["stop(\"Not a graph object\")",215],["the.graph = load.graph.csv(edge.path, node.path);",108],["the.graph = load.graph.csv(edge.path, node.path);",108],["a.trial.min.cut(the.graph, the.true.cluster, theta, method, overlap,",73],["return(graph)",65],["gmode <- 'graph'",63],["rk.graph.off ()",62],["rk.graph.on ()",58],["graph",57]]},{"word":"graphics","context":[["graphics.off()",919],["# Start the postscript graphics device driver.",53],["require(graphics)",53],["graphics.off();",47],["graphics.off() # This closes all of R's graphics windows.",43],["graphics.off() # This closes all of R's graphics windows.",43],["library(graphics)",36],["\".Call.graphics\", \".External.graphics\")",34],["\".Call.graphics\", \".External.graphics\")",34],["## \"graphics\" with its own environment which does not",33]]},{"word":"green4","context":[["rcol=\"green4\", xlab=input$xaxis, ylab=input$yaxis,",898],["col=c(\"black\", \"blue\", \"green4\"), bty=\"n\")",833],["lty=c(1, 1), col=c(\"black\", \"green4\"), bty=\"n\")",701],["mtext(input$quick_ewsRadioButtons, side=4, col=\"green4\")",460],["mtext(input$ewsRadioButtons, side=4, col=\"green4\")",438],["col=c(\"black\", \"green4\"), bty=\"n\")",132],["colours2=c( \"banding\"=\"blue\",  \"sham\"=\"green4\"  ),",114],["lty=c(1, 1, 1), col=c(\"red\", \"blue\", \"green4\"), bty=\"n\")",65],["lty=c(1, 1), col=c(\"red\", \"green4\"), bty=\"n\")",65],["\"green4\",",14]]},{"word":"grep","context":[["tmp.rows <- grep(\"TRUE\", with(chk.bac,",180],["grep, global) {",140],["tmp.rows <- grep(\"TRUE\", with(chk.bac, location == \"forest\"))",112],["OK <- c(OK, grep(p, objects_in_code, value = TRUE))",102],["if (!is.logical(grep))",100],["tmp.rows <- grep(\"TRUE\", with(chk.bac, location == \"pasture\"))",96],["tmp.rows <- grep(\"TRUE\", with(chk.elk.bac,",96],["grep <- rep(grep, length.out=depth(gPath))",90],["grep <- rep(grep, length.out=depth(gPath))",90],["if (nameMatch(gPath$name, grob$name, grep))",90]]},{"word":"grepl","context":[["if (any(grepl(\"^Error\", out))) {",77],["if (grepl(\"\\r\", contents, fixed = TRUE, useBytes = TRUE))",64],["bad <- grepl(\"[.](log|aux|bbl|blg|dvi|toc|out|Rd|Rout|dbj|drv|ins)$\",",60],["function(x) grepl(x, lic, fixed = TRUE))",58],["if (any(grepl(\"^Error\", out)) || length(attr(out, \"status\"))) {",52],["have_colon <- grepl(\":\", anchor, fixed = TRUE)",49],["if (grepl(\"[.]rds$\", f)) f <- readRDS(f)",48],["if (WINDOWS && grepl(\"\\\\.zip$\", pkg)) {",48],["united$TempBreed <- grepl(\"Greyhound\",united$MainBreed)",42],["if (grepl(\":\", variables.in.model[var])) {",42]]},{"word":"grid","context":[["grid.newpage()",2580],["grid.draw(tmp.gt)",1992],["library(grid)",839],["panel.grid.minor = element_blank(),",524],["grid()",503],["require(grid)",439],["panel.grid.major = element_blank(),",410],["pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))",202],["tm, grid = perf.grid,verbose=verbose, doPlot=doPlot)",184],["tm, grid = perf.grid,verbose=verbose, doPlot=doPlot)",184]]},{"word":"group","context":[["sgp.norm.group.preference=2),",199],["sgp.norm.group.preference=1),",170],["sgp.norm.group.preference=3),",167],["sgp.norm.group.preference=4),",129],["group by",87],["sgp.norm.group.preference=0)",85],["# sgp.norm.group.preference=1),",75],["sgp.norm.group.preference=5),",70],["sgp.norm.group.preference=1)",62],["pdb + geom_line(aes(group=projid)) + facet_grid(msex~.)",60]]},{"word":"groups","context":[["if(!is.null(groups))",58],["id <- groups==g",54],["if (is.null(groups)) {",51],["if (!is.null(groups)) {",44],["for(g in levels(groups)){",39],["groups = NULL,",35],["groupmat <- groups(object)",34],["# mean expression of groups in every cluster",31],["vertex.frame.color=NA, mark.groups=NULL, edge.color='lightgrey')",31],["groups <- factor(groups)",29]]},{"word":"gsub","context":[["patient.id <- gsub(\"-\", \".\", patient.id, fixed=TRUE)",260],["gsub(\"\\\\.txt\",\"-\",chr.input)",190],["build_dir <- gsub(\"\\\\\", \"/\", tempfile(\"Rd2pdf\"), fixed = TRUE)",96],["ds <- gsub('T', ' ', ds)",86],["new.runno <- gsub(\"run\", \"\", model)",85],["txt <- gsub(\"\\\\\\\\l?dots\", \"...\", txt)",82],["trim <- function (x) gsub(\"^\\\\s+|\\\\s+$\", \"\", x)",71],["txt <- gsub(\"(^|[^\\\\])\\\\\\\\($|[^abfnrtuUvx0-9'\\\"\\\\])\",",66],["texinputs <- gsub(\"\\\\\", \"/\", texinputs, fixed = TRUE)",52],["BarcodeSample <- gsub(\"\\\\-\", \"\\\\.\", BarcodeSample)",50]]},{"word":"gt","context":[["grid.draw(tmp.gt)",1992],["tmp.gt <- gTree(children=gList(tmp.table, tmp.title))",1432],["rm(tmp.gt)",592],["x <- fsub(\">\", \"&gt;\", x)",33],["tmp.gt <- table.grob(chr.col = \"pairs.InConfinementvsTime\", df.output = df.output,",32],["grid.draw(gt)",29],["x <- gsub(\">\", \"&gt;\", x, fixed = TRUE)",24],["return(gt)",23],["tmp.gt <- table.grob(chr.col = \"num.onsite.NearStrmStrct\", df.output = df.output,",16],["tmp.gt <- table.grob(chr.col = \"Bacteria.InForest\", df.output = df.output,",16]]},{"word":"h","context":[["y=unit(0.5,\"npc\") + 0.5*tmp.h,",1432],["tmp.h <- grobHeight(tmp.table)",1432],["abline(h=0)",352],["if (a %in% c(\"-h\", \"--help\")) {",158],["alpha.init = 0.5, rho.init = knots.h,",136],["\"  -h, --help\t\tprint short help message and exit\",",133],["h",127],["max.dist = 3 * knots.h,",114],["abline(h = 0)",108],["test <- function(h) {",97]]},{"word":"h2o","context":[["source('../h2o-runit.R')",1120],["source('../../h2o-runit.R')",867],["#' library(h2o)",733],["library(h2o)",588],["#' h2o.init()",563],["source(\"../../scripts/h2o-r-test-setup.R\")",427],["source(\"../../../scripts/h2o-r-test-setup.R\")",377],["#' localH2O <- h2o.init()",370],["#' prosPath <- system.file(\"extdata\", \"prostate.csv\", package=\"h2o\")",363],["#' @rdname h2o.metric",300]]},{"word":"has","context":[["#  open source, and has the attribution requirements (GPL Section 7) at",124],["\"replacement has %d row, data has %d\",",108],["\"replacement has %d row, data has %d\",",108],["\"replacement has %d rows, data has %d\"),",108],["\"replacement has %d rows, data has %d\"),",108],["gettextf(\"  %s has wrong argument list %s\",",63],["has.j <- !missing(j)",52],["# User has logged in. Record details about the HTTP session.",50],["#                 \" the corresponding coefficient has been fixed at its MLE of negative infinity.\\n\",sep=\" \"))",48],["stop(gettextf(\"package %s has not been installed properly\\n\",",45]]},{"word":"have","context":[["# You should have received a copy of the GNU General Public License",2410],["## You should have received a copy of the GNU General Public License",362],["# You should have received a copy of the GNU Library General",291],["#  You should have received a copy of the GNU General Public License",288],["# You should have received a copy of the GNU Lesser General Public License",263],["#    You should have received a copy of the GNU General Public License",221],["# Unless you have received this program directly from RStudio pursuant",175],["#You should have received a copy of the GNU General Public License",171],["# You should have received a copy of the GNU General Public License along with",148],["## You should have received a copy of the GNU General Public License along",129]]},{"word":"head","context":[["tags$head(",253],["head(data)",231],["head(d)",130],["head(dat)",121],["head(df)",115],["attr(aod, \"heading\") <- head",78],["singleton(tags$head(tags$script(src = \"js/shinyBindings.js\", type='text/javascript'))),",73],["singleton(tags$head(tags$script(src = \"js/md5.js\", type='text/javascript'))),",73],["head(result)",73],["head(tpmData)",65]]},{"word":"header","context":[["source(\"header.R\")",372],["header=TRUE,",188],["header=TRUE, sep=\",\", na.strings=\"NA\", dec=\".\", strip.white=TRUE)",157],["header = TRUE,",141],["header = TRUE)",114],["header = header,",78],["header = header,",78],["header = FALSE,",65],["header=FALSE,",65],["sep=\"\\t\", header=FALSE, as.is=TRUE);",64]]},{"word":"height","context":[["\".pdf\"), height = 8.5, width = 11, onefile = TRUE)",190],["height = height,",128],["height = height,",128],["plot[[\"height\"]] <- 400",107],["height=5,",104],["width = width, height = height,",74],["width = width, height = height,",74],["bounds <- grid.Call(L_rectBounds, x$x, x$y, x$width, x$height,",72],["g <- .geometry(width, height, units, res)",72],["width = 480, height = 480, units = \"px\", pointsize = 12,",72]]},{"word":"help","context":[["if (a %in% c(\"-h\", \"--help\")) {",158],["\"  -h, --help\t\tprint short help message and exit\",",133],["\"  -h, --help\t\tprint short help message and exit\",",133],["# #' ##--\tor do  help(data=index)  for the standard data sets.",82],["#'    and the \\href{help:rkwardplugins}{Introduction to Writing Plugins for RKWard}",57],["# find the html help file and display in the default browser",48],["cat(help,sep=\"\\n\")",44],["args <- c(\"--help\")",36],["if ( !is.null(opt$help) ) {",35],["if(\"--help\" %in% args) {",34]]},{"word":"here","context":[["# You can find out more about building applications with Shiny here:",223],["## we just have a stop list here.",66],["## produce output here in case we found something.",66],["i18n=list(context=\"context info here\")",59],["# If match.fun(expr[[1]]) raises an exception here, the code which follows",51],["# its class can't be determined here without evaluation.",51],["# The terms are available here: http://www.gnu.org/licenses/gpl.html",51],["## need to drop \"units\" attribute here",51],["#   # Form preliminary match. If match.call raises an error here, the remaining code is",50],["# lesson is started. Any variables created here will show up in",49]]},{"word":"hex","context":[["parse_time <- system.time(data.hex <- h2o.importFile(url))",129],["print(hex)",124],["#' prostate.hex <- h2o.uploadFile(path = prosPath)",123],["#' prostate.hex <- h2o.uploadFile(localH2O, path = prosPath)",120],["#' hex[,2] <- as.factor(hex[,2])",96],["#' hex[,2] <- as.factor(hex[,2])",96],["#' perf <- h2o.performance(model, hex)",95],["#' hex <- h2o.uploadFile(prosPath)",95],["myX = setdiff(names(data.hex), myY)",88],["#' model <- h2o.gbm(x = 3:9, y = 2, training_frame = hex, distribution = \"bernoulli\")",88]]},{"word":"home","context":[["tkwm.iconbitmap(tt, default = file.path(R.home(\"bin\"), \"Rgui.exe\"))",153],["cmd <- paste(shQuote(file.path(R.home(\"bin\"), \"R\")),",128],["wd2 <- setwd(file.path(R.home(\"bin\"), \"exec\"))",104],["rhome <- chartr(\"\\\\\", \"/\", R.home())",86],["shQuote(file.path(R.home(\"share\"), \"make\",",56],["Sys.setenv(PATH = paste(R.home(\"bin\"), oPATH,",54],["home <- home                # force evaluation",52],["home <- home                # force evaluation",52],["assignWrapped <- function(x, method, home, envir) {",52],["delayedAssign(x, get(method, envir = home), assign.env = envir)",50]]},{"word":"hope","context":[["#  This program is distributed in the hope that it will be useful,",5265],["# This program is distributed in the hope that it will be useful,",1782],["# This library is distributed in the hope that it will be useful,",267],["## This program is distributed in the hope that it will be useful,",210],["#This program is distributed in the hope that it will be useful,",203],["#    This program is distributed in the hope that it will be useful,",177],["# icd is distributed in the hope that it will be useful,",135],["# Rcpp is distributed in the hope that it will be useful, but",133],["# rkwarddev is distributed in the hope that it will be useful,",122],["#   This program is distributed in the hope that it will be useful,",122]]},{"word":"html","context":[["if (\"html\" %in% types) {",72],["type <- \"html\"",72],["\"content-type\" = 'text/html',",62],["# License : GPL3 http://www.gnu.org/licenses/gpl.html",59],["d1$save(paste(fileName,\".html\",sep=\"\"), cdn = TRUE)",56],["# The terms are available here: http://www.gnu.org/licenses/gpl.html",51],["# find the html help file and display in the default browser",48],["if(type == \"html\") {",48],["thefile = Find(file.exists, file.path(.libPaths(), fn, \"markdown.html\"))",47],["paste0(id, \".html\")",43]]},{"word":"http","context":[["#  http://www.r-project.org/Licenses/",4000],["#  Part of the R package, http://www.R-project.org",3868],["#     http://www.apache.org/licenses/LICENSE-2.0",686],["#        http://www.apache.org/licenses/LICENSE-2.0",678],["# along with this program.  If not, see <http://www.gnu.org/licenses/>.",649],["#   http://www.apache.org/licenses/LICENSE-2.0",619],["# http://www.apache.org/licenses/LICENSE-2.0",586],["#' \\url{http://www.mlhim.org}",337],["nsDEF <- c(mlhim2='http://www.mlhim.org/ns/mlhim2/', xsi='http://www.w3.org/2001/XMLSchema-instance')",304],["nsDEF <- c(mlhim2='http://www.mlhim.org/ns/mlhim2/', xsi='http://www.w3.org/2001/XMLSchema-instance')",304]]},{"word":"https","context":[["#  https://www.R-project.org/Licenses/",1168],["#  Part of the R package, https://www.R-project.org",1164],["# https://www.gnu.org/licenses/gpl-2.0.txt",309],["url <- 'https://www.coursera.org/api/onDemandProgrammingScriptSubmissions.v1'",129],["#' \\url{https://code.google.com/p/lagrange/}",75],["source(\"https://bioconductor.org/biocLite.R\")",49],["url <- \"https://api.twitter.com/1.1/application/rate_limit_status.json\"",38],["#' Homepage: https://github.com/vertica/ddR",31],["## https://stat.ethz.ch/pipermail/r-devel/2010-April/057225.html",31],["## https://www.gnu.org/licenses/gpl-3.0.txt",30]]},{"word":"i","context":[["i <- 1",1189],["i <- i + 1",1039],["i <- i + 1",1039],["print(i)",795],["for (i in 1:n) {",620],["for(i in 1:n){",522],["i <- 0",454],["i = i + 1",352],["i = i + 1",352],["i <- i+1",333]]},{"word":"id","context":[["test(id=0, code={",3834],["new.event <- list(PatientID=patient.id,",314],["patient.number <- as.integer(id.map[patient.id])",260],["patient.id <- gsub(\"-\", \".\", patient.id, fixed=TRUE)",260],["patient.id <- gsub(\"-\", \".\", patient.id, fixed=TRUE)",260],["patient.number <- as.integer(id.map[patient.id])",260],["for(id in ids){",191],["} # for id",187],["## 'id' is an integer vector indicating the monitor ID numbers",172],["group_by(cluster.id) %>%",169]]},{"word":"identical","context":[["stopifnot(identical(pmax(x, y, na.rm=TRUE), pmax(y, x, na.rm=TRUE)))",90],["stopifnot(identical(pmin(x, y, na.rm=TRUE), pmin(y, x, na.rm=TRUE)))",90],["stopifnot(identical(pmax(x, y), pmax(y, x)))",90],["stopifnot(identical(pmin(x, y), pmin(y, x)))",90],["stopifnot(identical(x, y))",76],["if(identical(package, \".GlobalEnv\"))",71],["stopifnot(identical(input, unserialize(serialize(input, NULL))))",56],["if(!identical(default, value)) # user supplied default",54],["!(identical(body(f1), body(f2)) && identical(args(f1), args(f2)))",52],["!(identical(body(f1), body(f2)) && identical(args(f1), args(f2)))",52]]},{"word":"identity","context":[["error = identity)",379],["geom_bar(stat=\"identity\") +",205],["geom_bar(stat = \"identity\") +",114],["error = identity))",93],["error = identity),",90],["geom_bar(stat='identity') +",54],["geom_bar(stat=\"identity\",position=dodge) +",50],["res <- tryCatch(fun(libname, pkgname), error = identity)",47],["geom_bar(position=position_dodge(), stat=\"identity\") +",43],["glm(y ~ x, family = poisson(identity), start = c(1,0))",38]]},{"word":"ids","context":[["for(id in ids){",191],["result <- vector(\"list\", length(ids))",104],["cat(\"assuming text variables are categorical & replacing them with numeric ids\\n\")",45],["return(ids)",33],["ds$id <- 1:nrow(ds) # some ids values might be identical, replace",32],["## Determine ids of blocks that need to be joined.",32],["# get the matching positions for uniprot ids in the reactome table",31],["ids <- c()",28],["#'    \\item wid. vocabulary ids of the instances of words in the corpus (a",26],["## Version control directory names: CVS, .svn (Subversion), .arch-ids",26]]},{"word":"idx","context":[["if(!any(idx)) return(bad_Rd_objects)",136],["if(is.na(idx))",109],["db <- db[idx]",100],["idx <- idx + 1",74],["idx <- idx + 1",74],["idx = pmatch(name, names(accessorFuns))",71],["f = accessorFuns[[idx]]",71],["idx <- 0",69],["symNames <- symNames[-idx]",50],["if(!is.na(idx)) {",50]]},{"word":"if","context":[["if (first) {",1713],["if (verbose) {",1034],["if(verbose)",870],["if (length(out)) {",866],["if(!missing(package)) {",748],["if (!any) warningLog(Log)",644],["if(any(ind)) {",630],["if (USER$Logged == TRUE)",629],["if(length(package) != 1L)",625],["if(!any) warningLog(Log)",588]]},{"word":"ifelse","context":[["ifelse(",154],["united$MainBreed <- ifelse(united$TempBreed == TRUE, \"Hound\", united$MainBreed)",84],["step <- ifelse(length(by2) == 2L, as.integer(by2[1L]), 1L)",78],["root=ifelse(.Platform$OS.type==\"windows\",\"c:/repos\",\"~/Repos\");",57],["exprGood <- ifelse(is(err, \"try-error\"), expr_identical_to(correctExpr), ans)",45],["start$mday <- start$mday + ifelse(start$wday > 0L, 1L, -6L)",40],["height <- g$height/ifelse(is.na(res), 72, res);",40],["mmat <- ifelse(is.na(x), 1, NA)",40],["width <- g$width/ifelse(is.na(res), 72, res);",40],["else if (tag == \"\\\\ifelse\")",39]]},{"word":"ignore","context":[["\"ignore\",",120],["files, ignore.case = TRUE)",92],["value = TRUE, ignore.case = TRUE)",84],["ignore.case = TRUE)",74],["function(dir, ignore = character(),",64],["ignore.case, perl, fixed, useBytes))",56],["ignore <- get_exclude_patterns()",54],["filter = list(\"pot\", ignore = ignore),",48],["for(e in ignore)",48],["filter = list(\"pot\", ignore = ignore),",48]]},{"word":"igraph","context":[["library(igraph)",1215],["PACKAGE=\"igraph\")",388],["on.exit( .Call(\"R_igraph_finalizer\", PACKAGE=\"igraph\") )",382],["if (!is.igraph(graph)) {",256],["require(igraph)",168],["library(\"igraph\")",109],["if (!is.igraph(graph)) { stop(\"Not a graph object\") }",52],["mode <- igraph.match.arg(mode)",48],["# igraph exports %>% from magrittr",41],["#' @import igraph",34]]},{"word":"ii","context":[["ii <- ii+1",567],["ii <- ii+1",567],["x[ii, ] <- c(i, j, treedist(tr2[[i]],ref2[[j]]))",139],["x[ii, ]<- c(i,j,treedist(tr2,ref2))",139],["ii <- 1 # loop counter",139],["x[ii, ] <- c(i, j, treedist(tr2,ref2[[j]]))",139],["x[ii, ] <- c(i, j, treedist(tr2[[i]],ref2))",139],["stopifnot(is.na(ii))",88],["ii <- ii + 1",65],["ii <- ii + 1",65]]},{"word":"image","context":[["plot[[\"data\"]] <- .endSaveImage(image)",250],["image <- .beginSaveImage(530, 400)",227],["content <- .endSaveImage(image)",84],["image <- .beginSaveImage(options$plotWidth, options$plotHeight)",68],["contentType='image/jpg')",57],["contentType='image/png')",57],["contentType='image/pdf')",57],["messageLog(Log, \"re-saving image files\")",44],["contentType = 'image/png'",43],["image(rbind(1:nr), col = RowSideColors[rowInd], axes = FALSE)",43]]},{"word":"implied","context":[["#  but WITHOUT ANY WARRANTY; without even the implied warranty of",5447],["# but WITHOUT ANY WARRANTY; without even the implied warranty of",3166],["# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",1415],["#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",717],["# KIND, either express or implied.  See the License for the",605],["## but WITHOUT ANY WARRANTY; without even the implied warranty of",474],["#    but WITHOUT ANY WARRANTY; without even the implied warranty of",233],["#but WITHOUT ANY WARRANTY; without even the implied warranty of",214],["# WITHOUT ANY WARRANTY; without even the implied warranty of",180],["#   but WITHOUT ANY WARRANTY; without even the implied warranty of",129]]},{"word":"import","context":[["#' @import ggplot2",340],["#' @import dplyr",321],["#' @import data.table",229],["#' @import methods",207],["#'@import ggplot2",138],["#' @import htmlwidgets",108],["#' @import raster",87],["#' @import httr",87],["#' @import sp",86],["#' @import plyr",82]]},{"word":"importFrom","context":[["#' @importFrom magrittr %>%",111],["#' @importFrom stats setNames",101],["#' @importFrom methods setMethod",86],["#' @importFrom reshape2 melt",66],["#' @importFrom stats na.omit",62],["#' @importFrom unitted u",60],["#' @importFrom magrittr \"%>%\"",56],["#' @importFrom Rcpp sourceCpp",56],["#' @importFrom methods is",50],["#' @importFrom RCurl getURL",49]]},{"word":"in","context":[["#  This program is distributed in the hope that it will be useful,",5265],["# This program is distributed in the hope that it will be useful,",1782],["# Unless required by applicable law or agreed to in writing, software",1318],["# you may not use this file except in compliance with the License.",1263],["#   Unless required by applicable law or agreed to in writing, software",729],["#   you may not use this file except in compliance with the License.",729],["for (i in 1:n) {",620],["# \"License\"); you may not use this file except in compliance",607],["# Unless required by applicable law or agreed to in writing,",605],["for(i in 1:n){",522]]},{"word":"include","context":[["# include breakpoint lines",922],["#' @include simList-class.R",110],["#' @param parms (Optional) Parameters to include in the request",84],["#' @include utils.R",80],["#' @include darch.R",50],["#' @include plotting-classes.R",49],["include.lowest = TRUE,",49],["#' @include rbm.R",44],["#' @include model-zelig.R",44],["full.names = TRUE, include.dirs = TRUE)",39]]},{"word":"ind","context":[["if(any(ind)) {",630],["if(any(ind))",416],["matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))",206],["exprs <- exprs[!ind]",167],["ind <- as.logical(sapply(exprs,",166],["db <- db[!ind]",147],["msg <- ngettext(sum(ind),",120],["if(length(ind)) {",110],["bad_lines <- lapply(db_usages[ind], attr, \"bad_lines\")",102],["db_names <- db_names[!ind]",101]]},{"word":"indent","context":[["indent = 2, exdent = 2), collapse = \"\\n\"),",173],["indent = 2L, exdent = 2L),",121],["msg <- strwrap(paste(msg, collapse = \" \"), indent = 2L, exdent = 2L)",80],["# -*- mode: C++; indent-tabs-mode: nil; c-basic-offset: 4; tab-width: 4; -*-",78],["indent = 4L, exdent = 4L)))",66],["strwrap(y[[1L]], indent = 2L, exdent = 4L),",66],["indent = 2L, exdent = 8L),",66],["strwrap(y[[2L]], indent = 2L, exdent = 4L)),",63],["indent = 2L, exdent = 2L))",62],["indent = 2L, exdent = 2L)",61]]},{"word":"index","context":[["index <- index + 1",300],["index <- index + 1",300],["index <- 1",262],["sig_ix = sort(p_values,decreasing=F,index.return=T)$ix",115],["ma.diff.index=3 # which index of the MA filter differs between the two FTS",110],["ma.diff.index=3 # which index of the MA filter differs between the two FTS",110],["dl.index <- grid.Call(L_getDLindex)",109],["stop(\"row dendrogram ordering gave index of wrong length\")",107],["stop(\"column dendrogram ordering gave index of wrong length\")",107],["y.date = \"DateTime_numeric\", index = \"SPY\", est.win = 390, digits = 6,",99]]},{"word":"index1","context":[["G7_H3K27me3_WT_rep1    <- rbind( myFirstLine ,    B7_H3K27me3_WT_rep1[index1, ]    )",19],["G1_H2BGFP_week2_Rep2 <- rbind( myFirstLine ,    B1_H2BGFP_week2_Rep2[index1, ]    )",19],["F1_week4_EEDheto_sort      <-  \trbind( myFirstLine ,    C1_Average_week4_EEDheto[index1,  ]    )",19],["G7_H3K27me3_EEDko_rep2 <- rbind( myFirstLine ,    B7_H3K27me3_EEDko_rep2[index1, ]    )",19],["E5_HomoHDAC1_sort   <-  \trbind( myFirstLine ,    D5_Average_HomoHDAC1[index1,  ]    )",19],["E1_H3_WT_adult_sort      <-  \trbind( myFirstLine ,    D1_Average_H3[index1,    ]    )",19],["F3_merge_MNase_EEDko_sort       <-  \trbind( myFirstLine ,    C3_Average_MNase_EEDko_merge[index1,    ]    )",19],["E1_week0_EEDko_sort        <-  \trbind( myFirstLine ,    D1_Average_week0_EEDko[index1,    ]    )",19],["toSort1[ index1[1:100] ]",19],["F1_week4_EEDko_sort        <-  \trbind( myFirstLine ,    C1_Average_week4_EEDko[index1,    ]    )",19]]},{"word":"info","context":[["Log.info(\"Now do the same filter & subset, but select complement of columns.\")",285],["Log.info(\"Perform filtering with the '$' sign also\")",254],["have_ttk <- as.character(tcl(\"info\", \"tclversion\")) >= \"8.5\"",184],["\"  -v, --version\t\tprint version info and exit\",",104],["Log.info(\"Check cardinality of grid, that is, the correct number of models have been created...\")",91],["info",91],["if (Sys.info()[1] == \"Linux\" || Sys.info()[1] == \"Darwin\") {",89],["} else if (Sys.info()[1] == \"Windows\") {",89],["if (Sys.info()[1] == \"Linux\" || Sys.info()[1] == \"Darwin\") {",89],["Log.info(\"Check that the hyper_params that were passed to grid, were used to construct the models...\")",87]]},{"word":"information","context":[["# distributed with this work for additional information",608],["# this work for additional information regarding copyright ownership.",154],["# To filter out samples based on donor information",88],["# check required information",86],["## land use information",65],["# To store Illumina IDs information",55],["checkingLog(Log, \"DESCRIPTION meta-information\")",54],["\" syntax tree without additional information.\\n\"))",51],["# To get the donors information",44],["# Check that the font has the correct structure and information",40]]},{"word":"inherits","context":[["if (inherits(res, \"try-error\"))",269],["if(inherits(Mo1, \"try-error\")) {",217],["if (inherits(res, \"error\")) {",118],["if(inherits(db, \"error\")) {",101],["if(!inherits(file, \"connection\"))",94],["if (inherits(model, \"ExternalReference\")) model = slot(model,\"ref\")",90],["inherits = FALSE)) {",88],["if (inherits(desc, \"try-error\") || !length(desc)) {",86],["stopifnot(inherits(z, \"try-error\"))",83],["if (!inherits(gPath, \"gPath\"))",80]]},{"word":"init","context":[["#' sc <- sparkR.init()",595],["#' h2o.init()",563],["#' localH2O <- h2o.init()",370],["#' sqlContext <- sparkRSQL.init(sc)",214],["# sc <- sparkR.init()",154],["alpha.init = 0.5, rho.init = knots.h,",136],["alpha.init = 0.5, rho.init = knots.h,",136],["h2o.init()",130],["fit.rarebinaryCPP(beta.init = 0, xi.init = 0,",114],["fit.rarebinaryCPP(beta.init = 0, xi.init = 0,",114]]},{"word":"input","context":[["shinyServer(function(input, output) {",959],["rcol=\"green4\", xlab=input$xaxis, ylab=input$yaxis,",898],["rcol=\"green4\", xlab=input$xaxis, ylab=input$yaxis,",898],["shinyServer(function(input, output, session) {",546],["##' using \\code{RJSONIO::toJSON} to be used as the input to the API call.  If",498],["&& input$quick_breakpointsCheckbox == TRUE) {",472],["if(!is.null(input$quick_breakpointsCheckbox)",463],["mtext(input$quick_ewsRadioButtons, side=4, col=\"green4\")",460],["&& input$breakpointsCheckbox == TRUE) {",450],["if(!is.null(input$breakpointsCheckbox)",441]]},{"word":"inst","context":[["#' files <- dir('./inst/examples', recursive=TRUE, full.names=TRUE, pattern='\\\\.xml$')",337],["meta <- if(basename(dir <- dirname(cfile)) == \"inst\")",33],["demo = character(), `inst/doc` = character())",33],["if(length(wrong)) wrong_things$`inst/doc` <- wrong",33],["## Have already checked that inst/doc exists and qpdf can be found",32],["if (dir.exists(\"inst/doc\")) {",32],["if (dir.exists(\"inst/doc\") && do_install) check_doc_contents()",32],["files <- dir(file.path(pkgdir, \"inst\", \"doc\"))",32],["## Of course, everything in inst is justifiable, so only give a",32],["checkingLog(Log, \"installed files from 'inst/doc'\")",32]]},{"word":"install","context":[["install.packages(\"ggplot2\")",124],["install.packages(\"devtools\")",93],["install.packages(pkg_dir,type=\"source\",repos=NULL)",72],["install.packages(\"dplyr\")",66],["stages = c(\"build\", \"install\", \"render\"))",50],["message(\"\\n\", \"install for \", arch, \"\\n\", domain = NA)",48],["install.packages(\"reshape2\")",47],["install.packages(\"plyr\")",46],["#install.packages(\"ggplot2\")",46],["install.packages(\"data.table\")",44]]},{"word":"installed","context":[["## Using package installed in @code{dir} ...",323],["#           curl, javac, java must be installed.",120],["meta <- tools:::.get_package_metadata(dir, installed = FALSE)",102],["new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,\"Package\"])]",67],["function(dir, installed = FALSE)",66],["## to be used in installed.packages() and similar",60],["stop(gettextf(\"package %s has not been installed properly\\n\",",45],["instPkgs = installed.packages(lib.loc = lib.loc),",42],["## Rd objects should already have been installed.",38],["oo <- installed.packages()",36]]},{"word":"int","context":[["n <- rep.int(1, nobs)",77],["if(conf.int)",66],["if(conf.int) {",65],["x <- seq.int(0, 1, length.out = nrow(z))",55],["for (j in sample.int(LIV)) {",48],["for(i in seq.int(from=2L, length.out = length(x)-1L)) {",44],["as.integer(seq.int(from = nrow + 1L, length.out = ni))",44],["url_db(urls, rep.int(path, length(urls)))",40],["initialize <- expression({n <- rep.int(1, nobs)",40],["w = \"wt.int\",",37]]},{"word":"integer","context":[["patient.number <- as.integer(id.map[patient.id])",260],["## 'id' is an integer vector indicating the monitor ID numbers",172],["as.integer(n),",111],["# To get an integer value of number of arrays",108],["'integer',",104],["n <- as.integer(n)",80],["step <- ifelse(length(by2) == 2L, as.integer(by2[1L]), 1L)",78],["n<-as.integer(args[1])",68],["as.integer(N),",60],["as.integer(length(x)),",59]]},{"word":"internal","context":[["#' @keywords internal",2458],["##' This is an internal function exported for those people who know",160],["#' @keywords internal manip",102],["## Currently only accessible via an internal environment",82],["#'@keywords internal",74],["## Exclude internal objects from further computations.",66],["function(x) length(grep(\"^ *internal *$\", x)) > 0L )",66],["## force the use of internal untar unless over-ridden",56],["#internal",43],["##' @keywords internal",35]]},{"word":"into","context":[["##' @param inputParams Either an R object that will be converted into JSON",498],["## Load package into code_env.",238],["K=5 # Number of subspaces into which the test is projected",110],["## The S4 'system' does **copy** base code into packages ....",60],["#   into memory.  Avoid side effects and don't pollute the global environment.",47],["Log.info(\"Placing key \\\"sliced.hex\\\" into User Store\")",41],["## put the class name with package attribute into new()",40],["# Else, must specify new fonts to enter into database (all",40],["# Load the relevant model into R's working memory:",36],["# extract all <word> elements and children into XmlNodeList object",36]]},{"word":"invalid","context":[["stop(\"invalid outcome\")",228],["stop(\"invalid state\")",166],["if(!checkIntFormat(filename)) stop(\"invalid 'filename'\")",117],["stop(\"invalid 'row.names' length\")",65],["stop(\"invalid vector for 'comp'.\")",64],["stop(\"invalid 'dimnames' given for data frame\")",61],["stop(\"invalid 'grep' value\")",60],["#   $Result    Deletion, invalid, amplification, Negative, 100",60],["stop(\"invalid 'arrow' argument\")",59],["if(is.na(valid)) stop(\"invalid specification of 'breaks'\")",52]]},{"word":"invisible","context":[["invisible(x)",2782],["invisible()",2353],["return(invisible())",1209],["invisible(NULL)",972],["return(invisible(NULL))",683],["if( is.null(model.parts$xm) ) invisible(.warn.no.cross.validation())",243],["if( is.null(model.parts$vm) ) invisible(.warn.no.validation())",243],["return(invisible(x))",224],["invisible(TRUE)",209],["return(invisible(.self))",187]]},{"word":"iris","context":[["data(iris)",195],["#' fr <- as.h2o(iris)",83],["#' data(iris)",77],["hex <- as.h2o(iris)",73],["#' iris.hex <- as.h2o(iris)",70],["#' iris.hex <- as.h2o(iris)",70],["print(summary(iris.hex))",68],["#' summary(iris.hex)",66],["summary(iris.hex)",54],["#' iris.hex <- h2o.uploadFile(localH2O, path = irisPath)",52]]},{"word":"is","context":[["#  This program is distributed in the hope that it will be useful,",5265],["#  This program is free software; you can redistribute it and/or modify",5207],["#  A copy of the GNU General Public License is available at",5168],["# This program is distributed in the hope that it will be useful,",1782],["# distributed under the License is distributed on an \"AS IS\" BASIS,",920],["#   distributed under the License is distributed on an \"AS IS\" BASIS,",717],["# This program is free software: you can redistribute it and/or modify",682],["# software distributed under the License is distributed on an",605],["# This program is free software; you can redistribute it and/or modify",594],["if (is.null(bounds))",520]]},{"word":"it","context":[["#  it under the terms of the GNU General Public License as published by",5392],["#  This program is distributed in the hope that it will be useful,",5265],["#  This program is free software; you can redistribute it and/or modify",5207],["# it under the terms of the GNU General Public License as published by",2082],["# This program is distributed in the hope that it will be useful,",1782],["# This program is free software: you can redistribute it and/or modify",682],["# This program is free software; you can redistribute it and/or modify",594],["##' method; it is a simple wrapper around the \\code{\\link{dxHTTPRequest}}",498],["## it under the terms of the GNU General Public License as published by",298],["# modify it under the terms of the GNU Library General Public",297]]},{"word":"item","context":[["function(item) {",82],["## Get the \\item tags inside \\describe.",66],["#'    \\item Abundance",64],["#'    \\item Growth",62],["#'    \\item Recruitment",56],["#'    \\item Stock-Recruit",54],["#'    \\item von Bertalanffy",54],["#'  \\item{region_id}{ID for region within a statistical area}",50],["#'  \\item{colname}{Full column name from original ABS data}",47],["#'  \\item{count}{Census count for this region}",47]]},{"word":"itemize","context":[["#' \\itemize{",1618],["#'  \\itemize{",624],["#'   \\itemize{",219],["#'\\itemize{",116],["##' \\itemize{",73],["#'    \\itemize{",66],["#'         \\itemize{",36],["#'      \\itemize{",35],["\"\\\\itemize\"= {",31],["\"\\\\itemize\"=,",22]]},{"word":"iter","context":[["if(iter %% Thinning == 0) {",386],["if(iter %% Status == 0)",333],["cat(\"  Iteration:\", iter, \"Proposal:\\n\",",302],["for (iter in 1:Iterations) {",289],["Dev[t.iter] <- Mo0[[\"Dev\"]]",270],["t.iter <- floor(iter / Thinning) + 1",252],["t.iter <- floor(iter / Thinning) + 1",252],["thinned[t.iter,] <- Mo0[[\"parm\"]]",223],["Mon[t.iter,] <- Mo0[[\"Monitor\"]]}",215],["cat(\"Iteration: \", iter,",175]]},{"word":"j","context":[["j <- j + 1",412],["j <- j + 1",412],["j <- 1",368],["j <- j+1",206],["j <- j+1",206],["# Get the i,j matrix positions of the regions that contain this subplot",197],["x[ii, ] <- c(i, j, treedist(tr2[[i]],ref2[[j]]))",139],["x[ii, ] <- c(i, j, treedist(tr2[[i]],ref2[[j]]))",139],["#colnames(x) <- c(\"j\",\"ref\",\"rf\",\"pd\")",139],["x[ii, ] <- c(i, j, treedist(tr2[[i]],ref2))",139]]},{"word":"just","context":[["resolveHJust(x$just, x$hjust),",166],["resolveVJust(x$just, x$vjust),",143],["just=\"centre\", hjust=NULL, vjust=NULL,",74],["## we just have a stop list here.",66],["# If expr is not a call, just return it.",51],["valid.just(x$just)",48],["valid.just(x$just)",48],["popupTemplate =  \"#! function(geography, data) { //this function should just return a string",38],["## * just one \\alias{};",34],["## just the ones with mismatches).",34]]},{"word":"k","context":[["k <- 1",295],["k <- k + 1",231],["k <- k + 1",231],["for (k in seq(from=1, to=nAssets)) {",177],["for (k in seq(from=0, to=nExp-1)) {",148],["k <- k+1",116],["k <- k+1",116],["for (i in 1:k) {",115],["k.size <- env$k.size",112],["k.size <- env$k.size",112]]},{"word":"keep","context":[["mc <- match.call(get(Call, baseenv()), e[keep])",66],["keep <- sapply(e, function(x) deparse(x)[1L] != \"...\")",66],["# Avoid consecutive duplicates (once it is found there is no point in keep going)",56],["# Add it to the features to keep",56],["keep <- NULL",53],["# keep only lon and lat columns",51],["#' @param keep_cross_validation_predictions Whether to keep the predictions of the cross-validation models",51],["keep <- c(keep, plot$data)",51],["keep <- c(keep, plot$data)",51],["##### Determine the columns to keep and the column to add",43]]},{"word":"key","context":[["legend.key = element_blank(),",103],["##      lty col  key      label",80],["if(!is.character(key)) stop(\"key must be of class character\")",62],["if(!is.character(key)) stop(\"key must be of class character\")",62],["stop(\"argument \\\"training_frame\\\" must be a valid H2OFrame or key\")",51],[".key.validate(destination_frame)",51],["stop(\"argument \\\"training_frame\\\" must be a valid Frame or key\")",49],["if(nchar(key) > 0 && regexpr(\"^[a-zA-Z_][a-zA-Z0-9_.]*$\", key)[1] == -1)",47],["stop(\"key must match the regular expression '^[a-zA-Z_][a-zA-Z0-9_.]*$'\")",47],["if(nchar(key) > 0 && regexpr(\"^[a-zA-Z_][a-zA-Z0-9_.]*$\", key)[1] == -1)",47]]},{"word":"keywords","context":[["#' @keywords internal",2458],["#' @keywords datasets",789],["#' @keywords data",157],["#' @keywords manip",146],["#' @keywords utilities",134],["#' @keywords package",117],["#' @keywords internal manip",102],["#' @keywords ts multivariate distribution models",101],["# #' @keywords ~kwd1 ~kwd2",83],["#'@keywords internal",74]]},{"word":"knitr","context":[["library(\"knitr\")",1756],["library(knitr)",512],["require(knitr)",95],["knitr::opts_chunk$set(",95],["# knitr::stitch_rmd(script=\"./___/___.R\", output=\"./___/___/___.md\")",57],["knitr::knit(a[1], a[2], quiet = TRUE, encoding = 'UTF-8', envir = .GlobalEnv)",48],["knitr::opts_knit$set(width = 70)",46],["knitr::render_jekyll()",44],["} else knitr::render_markdown()",41],["requireNamespace(\"knitr\")",39]]},{"word":"knots","context":[["s.pred = s.p, knots = knots,",139],["s.pred = s.p, knots = knots,",139],["alpha.init = 0.5, rho.init = knots.h,",136],["max.dist = 3 * knots.h,",114],["knots <- splineKnots(object)",84],["knots = knots, beta.tune = 1, xi.tune = 0.1,",80],["knots = knots, beta.tune = 1, xi.tune = 0.1,",80],["fit.probit <- probit(Y = y.i.o, X = X.o, s = s.o, knots = knots,",62],["fit.probit <- probit(Y = y.i.o, X = X.o, s = s.o, knots = knots,",62],["# with so many knots, adaptive is time prohibitive",57]]},{"word":"l","context":[["1:length(ewsLine[[1]]), ewsLine[[1]], type=\"l\",",898],["l",215],["type = \"l\",",183],["return(l)",162],["ts = l[[2]]",120],["tr = l[[1]]",120],["type=\"l\",",119],["n <- length(l[[1]])",113],["return(lookup(l.lookup,xin))",113],["l.lookup = lookuptable(",113]]},{"word":"lab","context":[["lab = f_dfGetGeneAnnotation(n)",128],["V(ig)$label = as.character(lab$SYMBOL)",128],["plotPolys(pulayer,col=colours,axes=FALSE,border=NA,cex.lab=0.1,cex.axis=0.1)",121],["cex.lab=cex.lab,",48],["cex.lab=cex.lab,",48],["attr(val, \"label\") <- lab",43],["cex.lab=1.5,",43],["par(bg=bg, font.main = 2, font.lab = 2)",43],["par(font.lab=2)",38],["col.lab = 'black',",37]]},{"word":"label","context":[["#' The vectors are: label, vtb, vte, #' dvstring_value, dvstring_language, #' ccd, sourceName,",224],["# draw rescaled ews line, axis, and label (from 'plotrix')",193],["V(ig)$label = as.character(lab$SYMBOL)",128],["end.label <- cb$makelabel()",116],["cb$putlabel(end.label)",116],["ntaxa <- length(phylo$tip.label)",95],["tmpdir\t\t\t<- paste(tmpdir,label,sep='')",87],["p$data$label) & isTip)),",81],["##      lty col  key      label",80],["file.copy(paste(indir,'/',infile.ind,'_IND.csv',sep=''), paste(tmpdir,'/',infile.ind,label,'_IND.csv',sep=''))",74]]},{"word":"labels","context":[["scale_y_continuous(breaks =c(-.5, 0, .5, .75, 1), labels = c(\"-50%\", \"0%\", \"50%\", \"75%\", \"100%\")) +",196],["scale_x_discrete(breaks=c(1, 7, 79, 157), labels = c(\"9:30am\", \"10:00am\", \"Day 1 Close\", \"Day 2 Close\")) +",196],["text(xxt, mean(c(yya1, yya2)), labels = \"Evidence for H0\", cex= cexText)",158],["axis(side=3, labels=F, lwd.ticks=2, cex.axis=1.2, las=1)",129],["axis(side=4, labels=F, at=log(seq(0.1:1, by = 0.1)), lwd.ticks=2, cex.axis=1.2, las=1)",113],["labels=factorVarLabels),",95],["axis(side=1, labels=T, lwd.ticks=2, cex.axis=1.2, las=1)",84],["labels=uniqueLabels),",74],["labels=meanLabels),",68],["labels=c(\".1\", \".2\", \".3\", \".4\", \".5\", \".6\", \".7\", \".8\", \".9\", \"1.0\"),",66]]},{"word":"lambda","context":[["lambda = lambda,",150],["lambda = lambda,",150],["lambda = 1.0,",79],["stop(paste(\"lambda must be positive\", \"\\n\", \"\"))",42],["lambda <- 0",39],["lambda = 0,",35],["lambda,",34],["lambda <- object$lambda",32],["ix = match(cv_fit$lambda.1se,cv_fit$lambda)",32],["ix = match(cv_fit$lambda.1se,cv_fit$lambda)",32]]},{"word":"land","context":[["chk.land.Forest",112],["model.bac.total = df.output[ , \"bac.pasture.on.land\"],",96],["chk.dil * (df.output[ , \"bac.pasture.on.land\"] -",96],["chk.pop.on.land <- chk.pop.wo.stream.access +",96],["chk.pop.on.land.Forest <- chk.pop.on.land * (chk.land.Forest / chk.land.Total)",96],["chk.land.Pasture",96],["chk.pop.on.land.Forest <- chk.pop.on.land * (chk.land.Forest / chk.land.Total)",96],["chk.pop <- rbind(data.frame(location = \"forest\", pop = chk.pop.on.land.Forest),",96],["chk.pop.on.land.Forest <- chk.pop.on.land * (chk.land.Forest / chk.land.Total)",96],["chk.pop.on.land.Forest <- chk.pop.on.land * (chk.land.Forest / chk.land.Total)",96]]},{"word":"language","context":[["# See the License for the specific language governing permissions and",1314],["#   See the License for the specific language governing permissions and",729],["# specific language governing permissions and limitations",605],["# Renjin : JVM-based interpreter for the R language for the statistical analysis",309],["# See the License for the specific language governing permissions and limitations under the License.",101],["if (is.language(string)) {",50],["language <- meta[\"Language\"]",46],["# for the specific language governing permissions and limitations",45],["## See the License for the specific language governing permissions and",40],["if (typeof(e) == \"language\") {",34]]},{"word":"lapply","context":[["data <- lapply(pcm, mlhim250rm::DvString)",224],["as.character(unlist(lapply(names(x), .fmt)))",193],["deleters <- which(unlist(lapply(result, is.null)))",187],["lapply(",134],["aliases <- lapply(db, .Rd_get_metadata, \"alias\")",112],["bad_lines <- lapply(db_usages[ind], attr, \"bad_lines\")",102],["lapply(cmd, system)",81],["x <- lapply(objects_in_env,",75],["exprs <- lapply(ls(envir = code_env, all.names = TRUE),",67],["unlist(lapply(names(bad),",66]]},{"word":"las","context":[["axis(side=3, labels=F, lwd.ticks=2, cex.axis=1.2, las=1)",129],["par(las=1)",120],["las = 1,",117],["axis(side=4, labels=F, at=log(seq(0.1:1, by = 0.1)), lwd.ticks=2, cex.axis=1.2, las=1)",113],["axis(side=1, labels=T, lwd.ticks=2, cex.axis=1.2, las=1)",84],["axis(2, las=1)",68],["par(las=2)",66],["at=log(seq(0.1:1, by = 0.1)), lwd.ticks=2, cex.axis=1.2, las=1)",66],["las=1)",49],["axis(side=1, labels=F, lwd.ticks=2, cex.axis=1.2, las=1)",49]]},{"word":"last","context":[["stop(printSpssError(last.SpssError),call. = getOption(\"SPSSStatisticsTraceback\"), domain = NA)",160],["if( is.SpssError(last.SpssError))",157],["# Get the last expression which the user entered at the R console.",136],["# To compare if the arrays are the last 10 arrays or not",108],["stop(printSpssError(last.SpssError),call. = FALSE, domain = NA)",103],["q_use = FALSE #use p value at last",82],["last.SpssError <<- 17",41],["first = NULL, last = NULL)",38],["sQuote(\"family\"), sQuote(\"last\")),",38],["dont.mind <- c(\"last.dump\", \"last.warning\", \".Last.value\",",37]]},{"word":"later","context":[["#  (at your option) any later version.",5319],["# (at your option) any later version.",2316],["# of the License, or (at your option) any later version.",455],["## (at your option) any later version.",345],["# version 2 of the License, or (at your option) any later version.",297],["#    (at your option) any later version.",226],["\"or later for copying conditions.  There is NO warranty.\",",183],["#(at your option) any later version.",164],["message(\"want to try to submit your grade at a later time.\")",129],["#   (at your option) any later version.",125]]},{"word":"law","context":[["# Unless required by applicable law or agreed to in writing, software",1318],["#   Unless required by applicable law or agreed to in writing, software",729],["# Unless required by applicable law or agreed to in writing,",605],["# Unless required by applicable law or agreed to in writing, this",45],["## Unless required by applicable law or agreed to in writing, software",41],["#  Unless required by applicable law or agreed to in writing, software",26],["#' @param conditional_law_X moments of the conditional law of X given Y, result",15],["#    Unless required by applicable law or agreed to in writing, software",13]]},{"word":"layout","context":[["if (is.null(layout)) {",209],["matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))",206],["layout.pos.col = matchidx$col))",203],["pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))",202],["pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))",202],["pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))",202],["pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))",202],["layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),",201],["# If layout is NULL, then use 'cols' to determine layout",195],["# If layout is NULL, then use 'cols' to determine layout",195]]},{"word":"left","context":[["if (oneSided == \"left\") {",296],["# then plot 1 will go in the upper left, 2 will go in the upper right, and",110],["} else if (oneSided == \"left\") {",101],["layout.widths = list(left.padding = 0, right.padding = 0),",76],["oneSided <- \"left\"",55],["Log.info(\"Checking left and right: \")",46],["left = normalize(left)",40],["left = normalize(left)",40],["checkingLog(Log, \"for left-overs from vignette generation\")",32],["just=c(\"left\", \"bottom\"),",32]]},{"word":"legend","context":[["legend(\"topleft\",",967],["# update plot legend with only ews line",898],["# update plot legend with ews and breakpoint lines",898],["legend.title=element_blank(),",321],["legend.position=\"right\",",207],["legend.direction=\"vertical\") +",196],["stat_summary( aes(y=yAxis),   fun.y=mean, colour=\"white\", geom=\"point\", shape=19, size=1.5, show.legend = FALSE) +",176],["theme(legend.position=\"none\") +",170],["legend(\"topright\",",145],["theme(legend.position=\"none\")",130]]},{"word":"len","context":[["if(len) {",99],["len <- length(ind)",82],["if(len > 3L) {",66],["len <- length(x)",64],["v.len <- round(.75 * v.len)",48],["v.len <- round(.75 * v.len)",48],["for (i in 1:len) {",47],["len.reg <- len.reg + 1",42],["len.reg <- len.reg + 1",42],["regression.result[[ len.reg ]]$\"Model\" <- as.integer(m)",42]]},{"word":"length","context":[["n <- length(x)",1017],["1:length(ewsLine[[1]]), ewsLine[[1]], type=\"l\",",898],["if (length(out)) {",866],["stop(\"argument 'package' must be of length 1\")",667],["if(length(package) != 1L)",625],["if (length(n) > 0)",363],["if(length(xx) > 1L) {",340],["if (length(data) > 0) {",315],["n <- length(y)",315],["} else if(length(bad)) {",283]]},{"word":"level","context":[["results <- c(results,list(data.frame(factor,type,level,estimate)))",102],["pll <- c(pll,list(data.frame(parameter,type,level)))",101],["level <- as.matrix(attributes(df)$levels)",101],["parameter <- rep(n,nrow(level))",101],["stop(\"'conf.level' must be a single number between 0 and 1\")",84],["alpha <- 1 - conf.level",81],["attr(cint, \"conf.level\") <- conf.level",72],["attr(cint, \"conf.level\") <- conf.level",72],["## Look at all calls (not only at top level).",63],["level = level, level.comb = level.comb,",52]]},{"word":"levels","context":[["levels = strftime(",644],["level <- as.matrix(attributes(df)$levels)",101],["lev = levels(fGroups)[-1]",79],["fG = factor(fGroups, levels= c(levels(fGroups)[1], lev[-i], lev[i]) )",79],["fG = factor(fGroups, levels= c(levels(fGroups)[1], lev[-i], lev[i]) )",79],["mf$drop.unused.levels <- TRUE",77],["lx <- levels(x)",62],["for (i in 2:length(levels(fSamples))){",59],["train[[f]] <- as.integer(factor(train[[f]], levels=levels))",55],["train[[f]] <- as.integer(factor(train[[f]], levels=levels))",55]]},{"word":"lib","context":[["dir <- find.package(package, lib.loc)",623],[".load_package_quietly(package, lib.loc)",434],["function(package, dir, lib.loc = NULL)",419],["lib.loc <- .libPaths()",173],["if(is.null(lib.loc))",143],["function(package, lib.loc = NULL)",128],["Rd_db(package, lib.loc = dirname(dir))",127],["function(pkgs, lib, repos = getOption(\"repos\"),",80],["c(lib.loc, .libPaths()),",72],["db <- Rd_db(package, lib.loc = dirname(dir))",68]]},{"word":"library","context":[["library(ggplot2)",7006],["library(dplyr)",4151],["library(shiny)",3258],["library(plyr)",2718],["library(data.table)",1845],["library(reshape2)",1774],["library(\"knitr\")",1756],["library(\"rgl\")",1720],["library(tidyr)",1276],["library(stringr)",1259]]},{"word":"license","context":[["# or more contributor license agreements.  See the NOTICE file",607],["# to the terms of a commercial license agreement with RStudio, then",175],["# contributor license agreements.  See the NOTICE file distributed with",154],["#  This software is distributed under the GPL-3 license.  It is free,",124],["#   see R's copyright and license files",117],["# The license and distribution terms for this file may be found in the",75],["# Please see distribution for license.",69],["## This work is distributed under the MIT license, included in the parent directory",65],["\"The following files contain a license that requires\\n\",",60],["#   see Rmetric's copyright and license files",47]]},{"word":"licenses","context":[["#     http://www.apache.org/licenses/LICENSE-2.0",686],["#        http://www.apache.org/licenses/LICENSE-2.0",678],["# along with this program.  If not, see <http://www.gnu.org/licenses/>.",649],["#   http://www.apache.org/licenses/LICENSE-2.0",619],["# regarding copyright ownership.  The ASF licenses this file",607],["# http://www.apache.org/licenses/LICENSE-2.0",586],["# https://www.gnu.org/licenses/gpl-2.0.txt",309],["# directory under \\share\\licenses. If not, see http://www.gnu.org/licenses/.",234],["# directory under \\share\\licenses. If not, see http://www.gnu.org/licenses/.",234],["# AGPL (http://www.gnu.org/licenses/agpl-3.0.txt) for more details.",199]]},{"word":"limitations","context":[["# limitations under the License.",1311],["#   limitations under the License.",729],["# specific language governing permissions and limitations",605],["# See the License for the specific language governing permissions and limitations under the License.",101],["# for the specific language governing permissions and limitations",45],["## limitations under the License.",41],["#  limitations under the License.",26],["## avoid the limitations (and overhead) of output text connections",15],["#   License for the specific language governing permissions and limitations",12]]},{"word":"line","context":[["# update plot legend with only ews line",898],["mtext(paste(\"Parameters:\", param_file), side=1, line=3, cex=0.75)  # Add parameter file",253],["# draw rescaled ews line, axis, and label (from 'plotrix')",193],["mtext(p, line=line, adj=1, col=pcol, font=font)",102],["mtext(p, line=line, adj=1, col=pcol, font=font)",102],["axis.line = element_blank(),",76],["axis.line = element_line(colour = \"black\"),",60],["axis.line = list(lwd = 0.01),",58],["theme(axis.line=element_blank(),",58],["trellis.par.set('axis.line', list(col='transparent'))",56]]},{"word":"lines","context":[["# include breakpoint lines",922],["# update plot legend with ews and breakpoint lines",898],["lines",151],["lines <- readLines(file, warn = FALSE)",145],["if(length(lines))",126],["lines, invert = TRUE, value = TRUE, useBytes = TRUE)",116],["lines <- readLines(file)",112],["paste(lines, collapse = \"\\n\"),",104],["lines, invert = TRUE, value = TRUE)",101],["lines <- readLines(outfile, warn = FALSE)",96]]},{"word":"link","context":[["##' @seealso \\code{\\link{dxHTTPRequest}}",498],["##' method; it is a simple wrapper around the \\code{\\link{dxHTTPRequest}}",498],["linktemp <- substitute(link)",90],["link = linktemp,",89],["stats <- make.link(linktemp)",89],["stats <- link",82],["linktemp <- link",73],["else if (is.character(link)) {",72],["## what else shall we allow?  At least objects of class link-glm.",72],["stats <- make.link(link)",71]]},{"word":"list","context":[["list(",2751],["rm(list=ls())",2467],["rm(list = ls(pattern = \"tmp\\\\.*\"))",1348],["rm(list = ls())",1170],["methods = list(",654],["args <- list(...)",635],["return(list())",559],["data = list(",494],["dots <- list(...)",469],["out <- list()",465]]},{"word":"ll","context":[["#' \\tabular{ll}{",274],["return(ll)",71],["if(length(ll)) {",64],["out <- out[ll:length(out)]",64],["ll <- grep(\"---- unloading\", out)",64],["ll <- ll[length(ll)]",64],["ll <- ll[length(ll)]",64],["ll <- ll[length(ll)]",64],["ll",44],["if (length(ll <- grep(\"^CXX_STD *=\", lines, perl = TRUE,",36]]},{"word":"lm","context":[["geom_smooth(method=\"lm\") + geom_point() +",268],["geom_smooth(method=lm)",171],["anova(lm)",97],["turkey <- HSD.test(lm, c(\"Genotype\")) #Tukey",93],["#geom_smooth(method=lm)+",80],["geom_smooth(method=\"lm\") +",61],["for (m in 1:length(lm.model)) {",60],["#geom_smooth(method=lm)",48],["if(!inherits(object, \"lm\"))",45],["fit <- lm(y ~ x)",45]]},{"word":"load","context":[["load(file)",232],["## bac load in forest",204],["# load data",197],["## bac load on pasture",188],["# load packages",150],["if(file_test(\"-f\", sys_data_file)) load(sys_data_file, code_env)",137],["# ---- load-packages -----------------------------------------------------------",130],["# ---- load-sources ------------------------------------------------------------",130],["# ---- load-data ---------------------------------------------------------------",121],["## bac load",112]]},{"word":"loc","context":[["dir <- find.package(package, lib.loc)",623],[".load_package_quietly(package, lib.loc)",434],["function(package, dir, lib.loc = NULL)",419],["lib.loc <- .libPaths()",173],["if(is.null(lib.loc))",143],["function(package, lib.loc = NULL)",128],["Rd_db(package, lib.loc = dirname(dir))",127],["c(lib.loc, .libPaths()),",72],["db <- Rd_db(package, lib.loc = dirname(dir))",68],["db <- tryCatch(Rd_db(basename(outDir), lib.loc = dirname(outDir)),",62]]},{"word":"local","context":[["local({",852],["source(file.path(shiny_root, \"server-base.R\"), local = T)",55],["msg <- gettext(\"replacing local value with import %s when loading %s\")",50],["source(paste0(sShinySourcePath,\"/server_pre_marxan.R\"),  local = TRUE)",45],["source(paste0(sAppDir,\"/render_ui.R\"),  local = TRUE)",44],["zz <- textConnection(\"out\", \"w\", local = TRUE)",44],["## Data Source: local file",43],["# Requiere un servidor local, en la terminal de Mac usar: python -m SimpleHTTPServer 8888",37],["#' # Try to connect to a local H2O instance that is already running.",37],["source(config_file_path, local = TRUE)",36]]},{"word":"location","context":[["## the location of the CSV files",280],["# Make each plot, in the correct location",211],["chk.bac[chk.bac$location == \"stream\", \"accum.bac\"] = NA",142],["tmp.rows <- grep(\"TRUE\", with(chk.bac, location == \"forest\"))",112],["chk.pop[chk.pop$location == \"forest\", \"pop\"]) /",112],["chk.bac[chk.bac$location == \"forest\", \"accum.bac\"],",112],["manual.calc.pop.total = chk.pop[chk.pop$location == \"forest\", \"pop\"],",112],["chk.bac[chk.bac$location == \"stream\", \"total.bac\"]) /",112],["chk.pop[chk.pop$location == \"stream\", \"pop\"],",112],["manual.calc.bac.total = chk.bac[chk.bac$location == \"forest\", \"total.bac\"],",112]]},{"word":"log","context":[["file='log.txt',",138],["log.u <- log(runif(1))",133],["if(log == FALSE) dens <- exp(dens)",133],["log.u <- log(runif(1))",133],["if(!is.finite(log.alpha)) log.alpha <- 0",131],["if(!is.finite(log.alpha)) log.alpha <- 0",131],["if(log.u < log.alpha) {",118],["if(log.u < log.alpha) {",118],["axis(side=4, labels=F, at=log(seq(0.1:1, by = 0.1)), lwd.ticks=2, cex.axis=1.2, las=1)",113],["log.alpha <- Mo1[[\"LP\"]] - Mo0[[\"LP\"]]",87]]},{"word":"logical","context":[["ind <- as.logical(sapply(exprs,",166],["if (!is.logical(grep))",100],["ind <- as.logical(sapply(db_usages,",98],["if (logical.return)",65],["cpu_thread_number <- detectCores(logical=TRUE) - 1",57],["if(is.logical(x) && all(is.na(x)))",53],["expected <- eval(parse(text=\"logical(0)\"));",50],["if (!is.logical(check.attributes))",50],["valGood <- as.logical(NA)",45],["#' @param lower.tail logical; if TRUE (default), probabilities are P[X <= x], otherwise, P[X > x]",44]]},{"word":"lower","context":[["## lo   lower pointwise envelope of K(r) from simulations",78],["PVAL <- pchisq(STATISTIC, PARAMETER, lower.tail = FALSE)",75],["checkTrue(difference <= 0.01, \"h2o's model's residualDeviance/nullDeviance is more than 0.01 lower than R's model's\")",63],["gp <- gp + geom_pointrange(aes(ymin = lower, ymax = upper))",61],["lower.tail = FALSE)",59],["correl[!lower.tri(correl)] <- \"\"",58],["dev[nas] <- safe_pchisq(dev[nas], aod$Df[nas], lower.tail=FALSE)",46],["#' @param lower.tail logical; if TRUE (default), probabilities are P[X <= x], otherwise, P[X > x]",44],["lower.tail=FALSE)",38],["R[lower.tri(R)] <- 0",38]]},{"word":"ls","context":[["rm(list=ls())",2467],["rm(list = ls(pattern = \"tmp\\\\.*\"))",1348],["rm(list = ls())",1170],["rm(list=ls(all=TRUE))",377],["ls()",307],["rm(list=ls());",134],["rm(list=ls(all=TRUE))  #Clear the variables from previous runs.",120],["rm(list = ls(all = TRUE))",99],["# ls()",93],["h2o.rm(localH2O, grep(pattern = \"Last.value\", x = h2o.ls(localH2O)$Key, value = TRUE))",89]]},{"word":"lty","context":[["lty=1, lcol=\"black\")",833],["lty=c(1, 1), col=c(\"black\", \"green4\"), bty=\"n\")",701],["input$quick_ewsRadioButtons), lty=c(1, 1, 1),",428],["input$ewsRadioButtons), lty=c(1, 1, 1),",405],["theme_bw() + geom_line(colour=\"black\") + geom_hline(yintercept=0,lty=2) +",140],["lty=1,",91],["lty = 1,",88],["#geom_hline(yintercept=-0.01, lty=1, col=\"white\", size=0.6) +",84],["lty=c(1, 1), col=c(\"black\", \"blue\"), bty=\"n\")",80],["##      lty col  key      label",80]]},{"word":"lumi","context":[["mDat = exprs(oExp.lumi)",24],["library(lumi)",22],["ivDetection = detectionCall(oExp.lumi)",20],["dfSamples = pData(oExp.lumi)",17],["while(i.lumi <= dim(as.matrix(data.gene.lumi))[2]) {",16],["# To define j.lumi for looping",16],["i.lumi = i.lumi + 10",16],["# To read data for lumi",16],["if (i.lumi < (i.arrays.lumi*10)) {",16],["k.lumi = k.lumi + 10",16]]},{"word":"lwd","context":[["box(lwd=2)",155],["axis(side=3, labels=F, lwd.ticks=2, cex.axis=1.2, las=1)",129],["box(lwd = 2)",118],["axis(side=4, labels=F, at=log(seq(0.1:1, by = 0.1)), lwd.ticks=2, cex.axis=1.2, las=1)",113],["lwd = 2,",110],["US(add=TRUE, lwd=1.5)",96],["map(\"world\", \"Canada\", add=TRUE, lwd=1.5)",95],["length=0.05, lwd = 2)",88],["axis(side=1, labels=T, lwd.ticks=2, cex.axis=1.2, las=1)",84],["lwd = 2)",77]]},{"word":"m","context":[["m",744],["return(m)",375],["m <- match.call(expand.dots = FALSE)",343],["m$data <- as.data.frame(data)",227],["mf <- eval(m, parent.frame())",204],[",strftime(Sys.time(), format = \"%Y%m%d%H%M\"),",190],["print(m)",181],["if(is.matrix(eval(m$data, parent.frame())))",163],["m$... <- NULL",155],["m[[1L]] <- quote(stats::model.frame)",150]]},{"word":"main","context":[["main=main,",130],["main=main,",130],["main=title,",107],["main = \"\",",105],["if(is.null(main))",98],["main()",93],["main=NULL,",78],["main = main,",66],["main = main,",66],["if (is.null(main))",66]]},{"word":"make","context":[["ncntxt <- make.nonTailCallContext(cntxt)",183],["ncntxt <- make.argContext(cntxt)",138],["### Check the network and arguments to make sure they are appropriate.",95],["make.table(nr, nc)",90],["stats <- make.link(linktemp)",89],["kronecker(fred, bill, make=TRUE)",76],["stats <- make.link(link)",71],["shQuote(file.path(R.home(\"share\"), \"make\",",56],["lcntxt <- make.loopContext(cntxt, loop.label, end.label)",45],["Ssystem(Sys.getenv(\"MAKE\", \"make\"),",44]]},{"word":"manual","context":[["\"in the 'Writing R Extensions' manual.\\n\")",329],["manual.calc.bac.total = sum(chk.bac$total.bac),",142],["manual.calc.pop.total = sum(chk.pop$pop),",142],["manual.calc.bac.total = chk.bac[chk.bac$location == \"stream\", \"total.bac\"],",112],["manual.calc.bac.total = chk.bac[chk.bac$location == \"forest\", \"total.bac\"],",112],["manual.calc.pop.total = chk.pop[chk.pop$location == \"stream\", \"pop\"],",112],["manual.calc.pop.total = chk.pop[chk.pop$location == \"forest\", \"pop\"],",112],["manual.calc.bac.total = chk.bac[chk.bac$location == \"forest\", \"accum.bac\"],",112],["manual.calc.bac.total = chk.bac[chk.bac$location == \"pasture\", \"total.bac\"],",96],["manual.calc.pop.total = chk.pop[chk.pop$location == \"pasture\", \"pop\"],",96]]},{"word":"map","context":[["patient.number <- as.integer(id.map[patient.id])",260],["map(\"world\", \"Canada\", add=TRUE, lwd=1.5)",95],["map",84],["# Set up plot layout, map will go on top and histogram on bottom",50],["output$map <- renderLeaflet({",48],["map.types = map.types,",47],["map.types = map.types,",47],["map = NULL,",42],["conditionalPanel(condition = \"input.displaywhat == 'map'\",",42],["mapping <- .type.map[paramDef$type,]",39]]},{"word":"mar","context":[["par(mar=c(0,0,0,0))",300],["par(mar=c(1,1,1,1)+0.1)",166],["par(mfrow=c(numRows,numCols), mar=c(3,4,3,1), oma=c(3,3,5,3))",143],["par(mar=c(5,5,1,1))",100],["par(mar=c(4,4,1,1))",83],["par(mar=c(1,1,1,1))",80],["par(mar=mar)",70],["par(mar=mar)",70],["par(mar = c(0.5, 0, 0, margins[2]))",64],["par(mar=c(0,5,1,1))",63]]},{"word":"mat","context":[["mat",161],["filename <- tempfile(fileext = \".mat\")",145],["return(mat)",143],["rownames(cv.mat) = obs",56],["return(cv.mat)",56],["cv.mat = matrix(\"NULL\",nrow=length(obs),ncol=k)",56],["cv.mat[fd.ix==j,j] = \"validation\"",56],["cv.mat[fd.ix!=j,j] = \"train\"",56],["mat <- mat[keep, , drop = FALSE]",40],["mat <- mat[keep, , drop = FALSE]",40]]},{"word":"match","context":[["type <- match.arg(type)",739],["method <- match.arg(method)",401],["m <- match.call(expand.dots = FALSE)",343],["call <- match.call()",240],["cl <- match.call()",230],["FUN <- match.fun(FUN)",175],["test <- match.arg(test)",138],["alternative <- match.arg(alternative)",129],["mf <- match.call(expand.dots = FALSE)",123],["return(match.call())",114]]},{"word":"matrix","context":[["x <- as.matrix(x)",696],["layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),",201],["A <- as.matrix(readMM(paste(args[1], \"A.mtx\", sep=\"\")))",197],["# Get the i,j matrix positions of the regions that contain this subplot",197],["y <- as.matrix(y)",168],["if(is.matrix(eval(m$data, parent.frame())))",163],["if (is.matrix(x)) {",148],["min <- matrix(ncol = 3, nrow = length(tr2))",139],["x <- matrix(ncol = 4, nrow = prod(length(tr2), length(ref2)))",139],["A = as.matrix(readMM(paste(args[1], \"A.mtx\", sep=\"\")))",113]]},{"word":"max","context":[["#geom_errorbar(aes(ymin=min,ymax=max),  data=whisk_1(DataFrame_Local),   width = 0.1, size=0.1, colour = \"black\") +",165],["alpha.min = 0.1, alpha.max = 0.9,",138],["max.dist = 3 * knots.h,",114],["end <- as.POSIXlt(max(x, na.rm = TRUE))",112],["maxx <- max(x, na.rm = TRUE)",84],["max = 100,",80],["ux[which.max(tabulate(match(x, ux)))]",76],["if(cores==\"max\"){cores=detectCores()-1}",73],["print(max(ph[,1]))",70],["top <- max(c(xhist$counts, yhist$counts))",69]]},{"word":"may","context":[["# You may obtain a copy of the License at",1264],["# you may not use this file except in compliance with the License.",1263],["#   You may obtain a copy of the License at",729],["#   you may not use this file except in compliance with the License.",729],["# with the License.  You may obtain a copy of the License at",608],["# \"License\"); you may not use this file except in compliance",607],["# (the \"License\"); you may not use this file except in compliance with",154],["# the License.  You may obtain a copy of the License at",154],["# NOTE: may be called directly with pathsofar=NULL",150],["# The license and distribution terms for this file may be found in the",75]]},{"word":"mean","context":[["stat_summary( aes(y=yAxis),   fun.y=mean, colour=\"white\", geom=\"point\", shape=19, size=1.5, show.legend = FALSE) +",176],["text(xxt, mean(c(yya1, yya2)), labels = \"Evidence for H0\", cex= cexText)",158],["Discrepancy.Statistic <- round(mean(Summ[,8], na.rm=TRUE),3)}",140],["meantablepd <- rbind(meantablepd,mean(min[,3])) #zmean PD closest trees between pruned and deleted sets",137],["meantablerf <- rbind(meantablerf,mean(min[,2])) #zmean RF closest trees between pruned and deleted sets",137],["mean(x)",104],["## Return the mean of the pollutant across all monitors list",85],["## mean; either \"sulfate\" or \"nitrate\".",85],["signif(mean(y),digits=4),",75],["signif(mean(x),digits=4),",75]]},{"word":"merge","context":[["# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",114],["merge(",88],["results <- merge(results,",49],["dnds.dat = merge(cgm, dnds.dat, by = 'EST')",48],["## merge",48],["chk.pasture.bac.by.month <- merge(summaryBy(total.bac ~ month.chr,",46],["chk.months.season <- merge(chk.months.season, chk.months)",46],["chk.RAOCUT.accum.by.month <- merge(summaryBy(accum.bac ~ month.chr,",46],["chk.forest.accum.by.month <- merge(summaryBy(accum.bac ~ month.chr,",46],["args <- args0[! args0 %in% c(\"--merge-multiarch\", \"--build\")]",46]]},{"word":"message","context":[["res[[1]]$message)) > 0)",321],["warning( \"Error message is: \", geterrmessage() );",263],["message(\"\")",248],["checkEquals(obs, exp, msg = message)",204],["\"  -h, --help\t\tprint short help message and exit\",",133],["message(\"want to try to submit your grade at a later time.\")",129],["message(\"Press ESC if you want to exit this lesson and you\")",129],["message(\"Grade submission failed.\")",129],["message(\"Grade submission succeeded!\")",129],["stop(message)",120]]},{"word":"meta","context":[["meta <- if(file_test(\"-f\", dfile))",286],[".source_assignments_in_code_dir(code_dir, code_env, meta)",261],["package <- meta[\"Package\"]",146],["if(is.na(encoding <- meta[\"Encoding\"]))",103],["meta <- tools:::.get_package_metadata(dir, installed = FALSE)",102],["meta <- .read_description(dfile)",71],["meta <- list()",69],["results[[\".meta\"]] <- meta",67],["results[[\".meta\"]] <- meta",67],["v_m <- package_version(meta[\"Version\"])",63]]},{"word":"method","context":[["##' method; it is a simple wrapper around the \\code{\\link{dxHTTPRequest}}",498],["method <- match.arg(method)",401],["method <- match.arg(method)",401],["geom_smooth(method=\"lm\") + geom_point() +",268],["geom_smooth(method=lm)",171],["switch(method,",151],["method = method)",147],["method = method)",147],["method",138],["random = ~1|device_info_serial, method = \"ML\")",127]]},{"word":"methods","context":[["#' @docType methods",1252],["methods = list(",654],["NaviCell$methods(",375],["#' @import methods",207],["require(methods)",195],["library(methods)",182],["## Determine names of declared S3 methods and associated S3",136],["#' @param ... Further arguments passed to or from other methods.",114],["#' @rdname string-methods",106],["##' @docType methods",105]]},{"word":"metrics","context":[["mean_deviance = hh@model$training_metrics@metrics$mean_residual_deviance",78],["expect_equal(a@metrics$model_category, b@metrics$model_category)",51],["expect_equal(a@metrics$model_category, b@metrics$model_category)",51],["expect_equal(a@metrics$MSE, b@metrics$MSE)",50],["expect_equal(a@metrics$MSE, b@metrics$MSE)",50],["if( !is.null(object@metrics) ) {",45],["expect_equal(a@metrics$r2, b@metrics$r2)",44],["expect_equal(a@metrics$r2, b@metrics$r2)",44],["expect_equal(a@metrics$logloss, b@metrics$logloss)",39],["expect_equal(a@metrics$logloss, b@metrics$logloss)",39]]},{"word":"mf","context":[["mf <- eval(m, parent.frame())",204],["response <- attr(attr(mf, \"terms\"), \"response\")",126],["mf <- match.call(expand.dots = FALSE)",123],["names(mf) <- NULL",93],["mf <- eval(mf, parent.frame())",81],["mf <- eval(mf, parent.frame())",81],["mf$drop.unused.levels <- TRUE",77],["mt <- attr(mf, \"terms\")",75],["DNAME <- paste(names(mf), collapse = \" by \")",73],["mf <- eval.parent(mf)",70]]},{"word":"mfrow","context":[["par(mfrow=c(1,1))",1117],["par(mfrow=c(2,2))",802],["par(mfrow=c(1,2))",779],["par(mfrow=c(2,1))",456],["par(mfrow = c(1, 1))",239],["par(mfrow=c(1,3))",183],["par(mfrow=c(1,1))}",181],["par(mfrow = c(1,1))",176],["par(mfrow = c(2, 2))",171],["par(mfrow=c(3,1))",170]]},{"word":"might","context":[["\"might terminate R nor write to stdout/stderr instead\",",64],["## Spaces in paths might still cause trouble.",38],["## no \\usage entry are not necessarily a problem---they might be",34],["## symbols via ':::' and hence package developers might want to",34],["## returned in the codoc object but not shown.  Eventually, we might",33],["## NB, link might be empty, and was in mvbutils",33],["## There are situations where S3 methods might be documented as",33],["## (which might get un-archived eventually).",33],["## now configure might generate files in this directory",33],["env <- new.env(hash = TRUE) # might be many",33]]},{"word":"min","context":[["min = 0,",271],["min = 1,",204],["#geom_errorbar(aes(ymin=min,ymax=max),  data=whisk_1(DataFrame_Local),   width = 0.1, size=0.1, colour = \"black\") +",165],["min <- matrix(ncol = 3, nrow = length(tr2))",139],["min[kk, ] <- c(i, min((subset(x, x[,1] == i , drop=FALSE))[,3]), min((subset(x, x[,1] == i , drop=FALSE))[,4]))",139],["min[kk, ] <- c(i, min((subset(x, x[,1] == i , drop=FALSE))[,3]), min((subset(x, x[,1] == i , drop=FALSE))[,4]))",139],["min[kk, ] <- c(i, min((subset(x, x[,1] == i , drop=FALSE))[,3]), min((subset(x, x[,1] == i , drop=FALSE))[,4]))",139],["alpha.min = 0.1, alpha.max = 0.9,",138],["meantablerf <- rbind(meantablerf,mean(min[,2])) #zmean RF closest trees between pruned and deleted sets",137],["meantablepd <- rbind(meantablepd,mean(min[,3])) #zmean PD closest trees between pruned and deleted sets",137]]},{"word":"missing","context":[["if(!missing(package)) {",748],["if(missing(dir))",397],["if(missing(where))",209],["db <- if(!missing(package))",148],["else if(!missing(dir)) {",141],["stop(\"'formula' missing or incorrect\")",140],["if (missing(file)) {",100],["if(missing(Specs) | is.null(Specs))",97],["if (!missing(person_id)) {",96],["if(missing(where)) {",91]]},{"word":"mlist","context":[["mlist <- .get_S4_methods_list(f, code_env)",132],["mlist",121],["return(mlist)",99],["exprs <- c(exprs, lapply(mlist, body))",66],["methods <- mlist@methods",60],["mlist@methods <- methods",46],["if(length(mlist)) {",33],["ind <- !as.logical(sapply(mlist,",33],["sigs <- .make_siglist(mlist)",33],["mlist <- mlist[!ind]",33]]},{"word":"mode","context":[["### mode: outline-minor ***",198],["storage.mode(x) <- \"double\"",156],["MP.group_by.mode    <- c(\"DontGroup\")",126],["p_values = vector( length=nrow(train_dat),mode=\"numeric\" )",115],["expect_equal(mode(tmp),\"numeric\")",87],["storage.mode(y) <- \"double\"",85],["# -*- mode: C++; indent-tabs-mode: nil; c-basic-offset: 4; tab-width: 4; -*-",78],["# -*- mode: C++; indent-tabs-mode: nil; c-basic-offset: 4; tab-width: 4; -*-",78],["mode(myRowNames2)",57],["mode=\"lin\")",50]]},{"word":"model","context":[["return(model)",609],["\"model.bac.total\")",368],["model.parts <- .model.parts(object)",305],["model.parts <- .model.parts(object)",305],["model",267],["if( is.null(model.parts$xm) ) invisible(.warn.no.cross.validation())",243],["if( is.null(model.parts$vm) ) invisible(.warn.no.validation())",243],["# pharmacodynamic model building aid for NONMEM.",234],["\"model.pop.total\")",230],["model {",186]]},{"word":"models","context":[["models <- #PIRANA_IN",133],["# Get models",111],["# Check expected number of models",109],["#' @keywords ts multivariate distribution models",101],["Log.info(\"Check cardinality of grid, that is, the correct number of models have been created...\")",91],["Log.info(\"Check that the hyper_params that were passed to grid, were used to construct the models...\")",87],["model     <- names(models)[i]",85],["model_names <- names(models)",74],["## calculate the number of models",67],["for (i in 1:length(names(models))) {",64]]},{"word":"modify","context":[["#  This program is free software; you can redistribute it and/or modify",5207],["# This program is free software: you can redistribute it and/or modify",682],["# This program is free software; you can redistribute it and/or modify",594],["# modify it under the terms of the GNU Library General Public",297],["# modify it under the terms of the GNU Lesser General Public License",239],["# modify it under the terms of the GNU General Public License",191],["#    This program is free software: you can redistribute it and/or modify",180],["#This program is free software: you can redistribute it and/or modify",172],["## This program is free software; you can redistribute it and/or modify",160],["# icd is free software: you can redistribute it and/or modify",135]]},{"word":"month","context":[["by.x = \"month.chr\", by.y = \"Month\")",598],["## accum load on RAOCUT by month",92],["chk.forest.pop.by.month <-",92],["chk.RAOCUT.accum.by.month <-",92],["chk.pasture.accum.by.month <-",92],["chk.pasture.pop.by.month <-",92],["chk.RAOCUT.pop.by.month <-",92],["## accum load on forest by month",92],["chk.stream.bac.by.month <-",92],["chk.forest.bac.by.month <-",92]]},{"word":"more","context":[["#  GNU General Public License for more details.",5412],["# GNU General Public License for more details.",2481],["# or more contributor license agreements.  See the NOTICE file",607],["## GNU General Public License for more details.",501],["# GNU Lesser General Public License for more details.",311],["# GNU Library General Public License for more details.",292],["# You can find out more about building applications with Shiny here:",223],["#GNU General Public License for more details.",212],["# AGPL (http://www.gnu.org/licenses/agpl-3.0.txt) for more details.",199],["#    GNU General Public License for more details.",193]]},{"word":"msg","context":[["stop(msg)",580],["stop(msg, call. = FALSE)",398],["msg <-",318],["checkEquals(obs, exp, msg = message)",204],["msg <- ngettext(nb,",181],["wrapLog(msg)",176],["sQuote(xx)), msg)",160],[".pretty_format(sort(xx)), msg)",160],["stop(msg, call.=FALSE)",157],["return(msg)",148]]},{"word":"mtext","context":[["mtext(input$quick_ewsRadioButtons, side=4, col=\"green4\")",460],["mtext(input$ewsRadioButtons, side=4, col=\"green4\")",438],["mtext(paste(\"Parameters:\", param_file), side=1, line=3, cex=0.75)  # Add parameter file",253],["mtext(p, line=line, adj=1, col=pcol, font=font)",102],["mtext(paste(\"  Copyright 2012, USTHB. Algeria\"),side = 1, line = 4, adj = 0.5, cex = .66)",55],["mtext(xlab, side = 1, line = margins[1] - 1.25)",39],["mtext(ylab, side = 4, line = margins[2] - 1.25)",39],["mtext(text = xlab, side = 1, cex=1.5, line = 2.9)",36],["mtext(text = \"Density\", side = 2, las=0, cex = cexYlab, line= 3.25)",36],["mtext(\"Community Similarity\", side = 2, line = 3, cex = 1.2)",34]]},{"word":"mu","context":[["mu = mu,",112],["mu = mu,",112],["mu.eta = stats$mu.eta,",90],["mu.eta = stats$mu.eta,",90],["dev.resids <- function(y, mu, wt)",84],["dev <- sum(dev.resids(y, mu, weights))",60],["if (!missing(mu)) {",56],["if (!missing(prob)) stop(\"'prob' and 'mu' both specified\")",56],["validmu <- function(mu) all(mu>0)",54],["validmu <- function(mu) all(mu>0)",54]]},{"word":"multiple","context":[["#multiple correction",115],["multiple = TRUE,",95],["multiple = FALSE,",60],["source(\"./scripts/common-functions.R\") # used in multiple reports",55],["plotTitle <- xpose.multiple.plot.title(object=object,",40],["# Estimate QTL using multiple mapping with R/qtl package",36],["# Initialize the multiple-QTL-model with the results from single QTL analysis",35],["obj <- xpose.multiple.plot(plotList,plotTitle,...)",35],["## see if there are multiple installed architectures, and if they work",32],["function (x, y = NULL, plot.type = c(\"multiple\", \"single\"),",32]]},{"word":"must","context":[["stop(\"argument 'package' must be of length 1\")",667],["##' providing the JSON string directly, you must set \\code{jsonifyData} to",498],["stop(\"you must specify 'package' or 'dir'\")",364],["#           curl, javac, java must be installed.",120],["#           java must be at least 1.6.",120],["stop(\"'x' must be numeric\")",92],["stop(\"'file' must be a character string or connection\")",90],["if(any(scale <= 0)) stop(\"The scale parameter must be positive.\")",86],["stop(\"'x' and 'y' must be units\")",85],["stop(\"'conf.level' must be a single number between 0 and 1\")",84]]},{"word":"my","context":[["list(MYOTHERVALUE = format(my.p, digits = 2)))[2]",78],["my.end <- 6",65],["my.range <- env$my.range",51],["my.range <- env$my.range",51],["return(my.plot)",45],["assign(state[d],X.t0[my.range[t],d])",45],["if(my.p < 0.001) my.p <- \"< 0.001\"",40],["if(my.p < 0.001) my.p <- \"< 0.001\"",40],["step.my  = step)",37],["my.st <- 6",35]]},{"word":"myFirstLine","context":[["names(myFirstLine)",57],["myFirstLine <- A1_H2BGFP_H3_Rep1[1, c(5:504)]",30],["G1_H2BGFP_week2_Rep2 <- rbind( myFirstLine ,    B1_H2BGFP_week2_Rep2[index1, ]    )",19],["E1_H3_WT_adult_sort      <-  \trbind( myFirstLine ,    D1_Average_H3[index1,    ]    )",19],["F1_week4_EEDko_sort        <-  \trbind( myFirstLine ,    C1_Average_week4_EEDko[index1,    ]    )",19],["F1_week4_EEDheto_sort      <-  \trbind( myFirstLine ,    C1_Average_week4_EEDheto[index1,  ]    )",19],["G1_H2BGFP_week1_Rep2 <- rbind( myFirstLine ,    B1_H2BGFP_week1_Rep2[index1, ]    )",19],["E6_H3K27ac_EEDko_sort      <-  \trbind( myFirstLine ,    D6_Average_H3K27ac_EEDko[index1,    ]    )",19],["F1_H2BGFP_WT_week2_sort  <-  \trbind( myFirstLine ,    C1_Average_week2[index1, ]    )",19],["G1_H2BGFP_week8_Rep1 <- rbind( myFirstLine ,    B1_H2BGFP_week8_Rep1[index1, ]    )",19]]},{"word":"n","context":[["cat(\"\\n\")",4572],["n <- length(x)",1017],["printLog0(Log, paste(c(out, \"\"), collapse = \"\\n\"))",975],["col=c(\"black\", \"blue\", \"green4\"), bty=\"n\")",833],["\"\\n\",",809],["Rcmd <- paste(\"options(warn=1)\\n\",",750],["lty=c(1, 1), col=c(\"black\", \"green4\"), bty=\"n\")",701],["for (i in 1:n) {",620],["sep = \"\\n\")",542],["for(i in 1:n){",522]]},{"word":"na","context":[["x <- x[!is.na(x)]",209],["na.rm = TRUE)",197],["if(!is.na(enc) &&",158],["header=TRUE, sep=\",\", na.strings=\"NA\", dec=\".\", strip.white=TRUE)",157],["Discrepancy.Statistic <- round(mean(Summ[,8], na.rm=TRUE),3)}",140],["TotalData[is.na(TotalData)]=0",135],["na.rm=TRUE))",113],["end <- as.POSIXlt(max(x, na.rm = TRUE))",112],["if(is.na(idx))",109],["if(is.na(i))",105]]},{"word":"name","context":[["#' @param fileList - The path/file name(s) of the XML file(s) to process.",337],["#' The source name and the CCD ID are also included in each row to assist in identifying the source of the data.",304],["Name=name,",274],["name",198],["#' @param repo the name of the repo",187],["name=NULL, gp=gpar(), vp=NULL) {",183],["n = V(ig)$name",131],["name <- vigns$names[i]",127],["name,",125],["#' @param repo the repo name",120]]},{"word":"named","context":[["# Swirl's state, named e, is stored in the environment of the callback.",138],["## the first argument could be named, or could be a variable name.",66],["# Append named formals with default values which are not included",51],["# Process the function. Decide if it's an anonymous fcn, or a named one.",48],["if (getIgraphOpt(\"add.vertex.names\") && is.named(graph)) {",48],["warning(\"named arguments are discouraged\")",45],["message(gettextf(\"Created file named %s.\", sQuote(filename)),",43],["# all of which must be named args)",40],["#' @param i18n Either a character string or a named list with the optional elements \\code{context}",37],["# store named objects (for other scripts)",36]]},{"word":"names","context":[["row.names=FALSE)",515],["#' files <- dir('./inst/examples', recursive=TRUE, full.names=TRUE, pattern='\\\\.xml$')",337],["names(v) <- v_names",259],["full.names = TRUE, recursive = TRUE)",238],["row.names=FALSE,",211],["as.character(unlist(lapply(names(x), .fmt)))",193],["row.names = FALSE)",185],["checkEquals(names(x[[1]]), c(\"PatientID\", \"PtNum\", \"study\", \"Name\", \"Fields\"))",155],["objects_in_code <- sort(names(code_env))",147],["use.names = FALSE)",146]]},{"word":"namespace","context":[["## (experimental) alternative way of specifying the namespace.",104],["## Does the package have a namespace?",102],["function(.Object, modelname, namespace) {",89],["function(.Object, flatModel, namespace, labelsData) {",52],["## namespace.",38],["modelname, namespace)",37],["## really need to look at all objects in the namespace (hence",34],["## namespace renaming.",34],["## In case the package has a namespace, we really want to check",34],["## Not clear whether we want to require *all* namespace package",34]]},{"word":"nc","context":[["nc <- ncol(x)",121],["nc <- length(x)",103],["make.table(nr, nc)",90],["if (nc != length(colInd))",80],["nc <- 1",49],["y[which] <- if(nc==0) 0 else if(nc==1) coeff[1, 1]",48],["y[which] <- if(nc==0) 0 else if(nc==1) coeff[1, 1]",48],["nc <- di[2]",46],["if (nr <= 1 || nc <= 1)",44],["if (nr != nc)",44]]},{"word":"nchar","context":[["if(any(ind <- is.na(nchar(lines, allowNA = TRUE))))",52],["if(nchar(key) > 0 && regexpr(\"^[a-zA-Z_][a-zA-Z0-9_.]*$\", key)[1] == -1)",47],["for (i in 1:nchar(q2)) { # faco um for de 1 ate o numero de caracteres do meu vetor em conjunto",45],["newy <- substring(newy, nchar(newy)-4, nchar(newy))",42],["newy <- substring(newy, nchar(newy)-4, nchar(newy))",42],["substr(x, nchar(x)-n+1, nchar(x))",41],["substr(x, nchar(x)-n+1, nchar(x))",41],["if(nchar(value)>=2 & length(value)>0) # colum sign",41],["for (i in 1:nchar(q22)) { # faco um for de 1 ate o numero de caracteres do meu vetor em conjunto",39],["nchar(name, type=\"c\")) == name]",38]]},{"word":"ncol","context":[["pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))",202],["ncol = cols, nrow = ceiling(numPlots/cols))",199],["# ncol: Number of columns of plots",192],["p <- ncol(x)",185],["ncol=1,",177],["min <- matrix(ncol = 3, nrow = length(tr2))",139],["x <- matrix(ncol = 4, nrow = prod(length(tr2), length(ref2)))",139],["ncol=2,",132],["nc <- ncol(x)",121],["p <- ncol(X)",90]]},{"word":"need","context":[["chk.dil <- 1E+06 # need to explain this",190],["## FIXME: this does not need to be run in another process",128],["## need stats:: for non-standard evaluation",115],["# Just need to test that output is the same as if the GTuples were GRanges",67],["## Because we really only need this for calling from R CMD check, we",66],["## We need to rempve '...': OTOH the argument could be NULL",66],["validate(       need(!is.null(df), \"Please select a data set\"))",52],["#We need MASS to dump the matrix to a file.",51],["## need to drop \"units\" attribute here",51],["## We definitely need a valid DESCRIPTION file.",49]]},{"word":"needed","context":[["# nrow: Number of rows needed, calculated from # of cols",192],["## (asserted not to be needed if the subclass slot is complete)",54],["swirl_out(\"I've executed the correct expression in case the result is needed in an upcoming question.\")",54],["## do initialization if needed",50],["## calculate test statistic if needed",47],["if(!(isSTDOUT <- file == \"\")) ## stdout() -- no sink() needed",42],["## a current version of methods() [2003-07-07].  (Care is needed",34],["## needed for internal generics and group generics.)",34],["## Check Authors@R and expansion if needed.",33],["## FIXME: is this still needed now we do dependency analysis?",33]]},{"word":"new","context":[["plot.new()",1229],["par(new=T)",722],["dev.new()",452],["par(new=TRUE)",417],["result[[good.records.found]] <- new.event",376],["new.event <- list(PatientID=patient.id,",314],["code_env <- new.env(hash = TRUE)",261],["count <- count + length(new.list)",187],["range <- count:(count+length(new.list)-1)",187],["result[range] <- new.list",187]]},{"word":"newpage","context":[["grid.newpage()",2580],["grid::grid.newpage()",47],["grid.newpage(recording=FALSE)",37],["if (newpage)",30],["#grid.newpage()",29],["if (newpage) {",19],["grid.newpage();",16],["# grid.newpage()",13],["for (fun in getHook(\"grid.newpage\"))  {",12],["# Keep a list of all drawing operations (since last grid.newpage()) so",12]]},{"word":"next","context":[["next",3643],["next;",310],["next()",145],["if(dep$op != '>=') next",88],["if(!length(exprs)) next",68],["if (!file.exists(f)) next",64],["else next",46],["if(!is.data.frame(al)) next",34],["next                    # What the hell did we pick up?",34],["if (missing(package) && pkg == basename(dir)) next",33]]},{"word":"ngettext","context":[["msg <- ngettext(nb,",181],["stop(sprintf(ngettext(N,",144],["msg <- ngettext(sum(ind),",120],["ngettext(n,",99],["msg <- ngettext(length(x$bad_closures),",96],["msg <- ngettext(nr,",73],["msg <- ngettext(length(x),",62],["msg <- ngettext(length(xx),",62],["msg <- ngettext(length(x$bad_S4methods),",60],["msg <- ngettext(length(x$bad_refs),",60]]},{"word":"nm","context":[["nm),",399],[".fmt <- function(nm) {",193],["function(nm) {",113],["nm <- names(x); if(is.null(nm)) nm <- character()",66],["good <- thisfile[this] %in% nm",66],["nm <- names(x); if(is.null(nm)) nm <- character()",66],[".pretty_format(bad[[nm]]))",66],["docObj <- x[[nm]]",66],["nm <- names(x); if(is.null(nm)) nm <- character()",66],["names(nm) <- names(x) <- seq_along(x)",66]]},{"word":"nms","context":[["nms <- names(x)",97],["strwrap(paste(nms, collapse = \" \"),",66],["if(is.na(match(\"...\", nms)) &&",63],["out$bad_arg_names <- nms",63],["nms <- names(fcode[[2L]])",63],["for (x in d$x$nms){",56],["names(y) <- nms",43],["for (s in d$s$nms){",38],["nms",34],["nms <- intersect(names(ffc), names(ffd))",33]]},{"word":"no","context":[["##' @param alwaysRetry Whether to always retry even when no response is",498],["if( is.null(model.parts$xm) ) invisible(.warn.no.cross.validation())",243],["if( is.null(model.parts$vm) ) invisible(.warn.no.validation())",243],["q(\"no\")",160],["quit(\"no\")",143],["# all colnames should be recognzied gene symbols.  no isoform suffixes yet",142],["def.par <- par(no.readonly = TRUE)",142],["op <- par(no.readonly = TRUE)",137],["quit(save=\"no\", status=1)",133],["# all rownames should follow \"TCGA.02.0014\" format.  no multiply-sampled suffixes yet",122]]},{"word":"node","context":[["the.true.cluster = load.true.cluster(file.path=node.path);",112],["the.graph = load.graph.csv(edge.path, node.path);",108],["return(node)",90],["function(node, debug_level=0)",71],["#' @return An object of class \\code{XiMpLe.node}.",67],["node",47],["## node list generation",37],["if (inherits(node, \"ExternalReference\")) node = slot(node,\"ref\")",36],["if (inherits(node, \"ExternalReference\")) node = slot(node,\"ref\")",36],["if (inherits(node, \"ExternalReference\")) node = slot(node,\"ref\")",36]]},{"word":"non","context":[["## need stats:: for non-standard evaluation",115],["\"resulted in non-finite value(s).\\n\",",114],["\"Found the following file with a non-portable file name:\\n\",",60],["\"Found the following files with non-portable file names:\\n\",",60],["## set to empty of something non-existent.",50],["while (flag !=1) {   # find out where non-zero elements start",48],["stop(\"`path` must be a non-empty character string\")",39],["\"non-argument found in the signature: %s\",",38],["stop(\"'file' must be a non-empty character string\")",38],["\"non-arguments found in the signature: %s\"),",38]]},{"word":"none","context":[["theme(legend.position=\"none\") +",170],["theme(legend.position=\"none\")",130],["theme(legend.position = \"none\") +",125],["theme(legend.position = \"none\")",119],["legend.position=\"none\",",108],["legend.position = \"none\",",94],["legend.position=\"none\")",85],["#' @return none",77],["theme(legend.position=\"none\",",72],["problems <- with(rdas, (ASCII | compress == \"none\") & (size > 1e5))",66]]},{"word":"normalizePath","context":[["setwd(normalizePath(dirname(R.utils::commandArgs(asValues=TRUE)$\"f\")))",3565],["dir <- normalizePath(dir)",60],["#outputdir =  normalizePath(bccvl.env$outputdir)",39],["#inputdir =  normalizePath(bccvl.env$inputdir)",39],["#scriptdir = normalizePath(bccvl.env$scriptdir)",39],["movieDir=normalizePath(argv[1])",37],["if (self) flink(normalizePath(pkgdir), tmplib)",32],["sQuote(normalizePath(tmpd, mustWork = FALSE))),",30],["normalizePath(epath, \"/\", TRUE)",26],["normalizePath(file.path(lib, name), \"/\", TRUE))",25]]},{"word":"not","context":[["# you may not use this file except in compliance with the License.",1263],["#   you may not use this file except in compliance with the License.",729],["# along with this program.  If not, see <http://www.gnu.org/licenses/>.",649],["# \"License\"); you may not use this file except in compliance",607],["stop(gettextf(\"directory '%s' does not exist\", dir),",379],["stop(gettextf(\"directory '%s' does not contain R code\",",357],["# along with this program; if not, a copy is available at",314],["# Public License along with this library; if not, write to the",291],["# along with this program; if not, write to the Free Software",285],["# directory under \\share\\licenses. If not, see http://www.gnu.org/licenses/.",234]]},{"word":"now","context":[["## Allow anything containing ... (for now); otherwise, insist on",63],["## Start warning eventually ... maybe use message() for now?",57],["# **** this is now handled differently; see \"Improved subset ...\"",44],["## Need some heuristics now.  When does an Rd object document a",34],["## now look for possible copy as a registered S3 method",34],["## Need some heuristics now.  When does an Rd object document just",34],["## (in case 'verbose' was true).  We now add this as an attribute to",34],["## With \\method{GENERIC}{CLASS} now being transformed to show",34],["## And now strip enclosing '\\code{...}:'",34],["## FIXME: is this still needed now we do dependency analysis?",33]]},{"word":"npc","context":[["y=unit(0.5,\"npc\") + 0.5*tmp.h,",1432],["default.units=\"npc\",",287],["unit(0.5, \"npc\")",262],["width=unit(1, \"npc\"), height=unit(1, \"npc\"),",32],["width=unit(1, \"npc\"), height=unit(1, \"npc\"),",32],["y=unit(c(0, 1), \"npc\"),",30],["yy <- grconvertY(0.5, \"npc\", \"user\")",28],["xxt <- grconvertX(0.28, \"npc\", \"user\")",28],["xx <- grconvertX(0.1, \"npc\", \"user\")",28],["default.units = \"npc\",",27]]},{"word":"nr","context":[["make.table(nr, nc)",90],["if (nr != length(rowInd))",80],["msg <- ngettext(nr,",73],["iy <- nr:1",64],["nr <- nrow(x)",61],["nr <- di[1]",47],["if (nr != nc)",44],["nr <- .row_names_info(e1, 2L)",44],["if (nr <= 1 || nc <= 1)",44],["image(rbind(1:nr), col = RowSideColors[rowInd], axes = FALSE)",43]]},{"word":"nrow","context":[["n <- nrow(x)",355],["pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))",202],["ncol = cols, nrow = ceiling(numPlots/cols))",199],["# nrow: Number of rows needed, calculated from # of cols",192],["nrow=1,",166],["x <- matrix(ncol = 4, nrow = prod(length(tr2), length(ref2)))",139],["min <- matrix(ncol = 3, nrow = length(tr2))",139],["n <- nrow(X)",118],["p_values = vector( length=nrow(train_dat),mode=\"numeric\" )",115],["# If the layout is something like matrix(c(1,2,3,3), nrow=2, byrow=TRUE),",109]]},{"word":"ns","context":[["nsDEF <- c(mlhim2='http://www.mlhim.org/ns/mlhim2/', xsi='http://www.w3.org/2001/XMLSchema-instance')",304],["ns <- asNamespace(ns)",157],["ns <- asNamespace(ns)",157],["ns <- asNamespace(ns, base.OK = FALSE)",156],["ns <- asNamespace(ns, base.OK = FALSE)",156],["ns <- length(scope)",79],["environmentIsLocked(ns)",78],["namespaceIsSealed <- function(ns)",78],["nsname <- getNamespaceName(ns)",77],["ntrain <- floor(0.75 * ns)",72]]},{"word":"null","context":[["if (is.null(bounds))",520],["if(!is.null(input$quick_breakpointsCheckbox)",463],["if(!is.null(input$breakpointsCheckbox)",441],["if(is.null(fdef))",253],["if( is.null(model.parts$xm) ) invisible(.warn.no.cross.validation())",243],["if( is.null(model.parts$vm) ) invisible(.warn.no.validation())",243],["if(is.null(Data))",240],["if (!is.null(seed)) {",213],["if (is.null(layout)) {",209],["deleters <- which(unlist(lapply(result, is.null)))",187]]},{"word":"num","context":[["num.passed.tests=num.passed.tests+1",135],["num.passed.tests=num.passed.tests+1",135],["cat(\"num. phenotype samples =\",sum(!is.na(r)),\"\\n\")",93],["num.tests=num.tests+1",90],["num.tests=num.tests+1",90],["rankall <- function(outcome, num = \"best\") {",82],["rankhospital <- function(state, outcome, num = \"best\") {",80],["num.tests=num.tests + 1",55],["num.tests=num.tests + 1",55],["sample_pos = sample(pos_obs,size=sample.num,replace=T)",53]]},{"word":"number","context":[["PtNum=patient.number,",314],["patient.number <- as.integer(id.map[patient.id])",260],["# some number of the expected events will fail, often (always?) because",122],["B=1000 # The number of replicates",110],["# Check expected number of models",109],["# To get an integer value of number of arrays",108],["## number of completely observed observations (on all",95],["Log.info(\"Check cardinality of grid, that is, the correct number of models have been created...\")",91],["# Sidebar with a slider input for number of bins",90],["## number of complete cases",90]]},{"word":"numeric","context":[["x <- as.numeric(x)",199],["p_values = vector( length=nrow(train_dat),mode=\"numeric\" )",115],["## Return a numeric vector of correlations",97],["## 'threshold' is a numeric vector of length 1 indicating the",95],["stop(\"'x' must be numeric\")",92],["expect_equal(mode(tmp),\"numeric\")",87],["y <- as.numeric(y)",86],["if(!is.numeric(x))",85],["N      <- as.numeric(tclObj(N))",82],["T      <- as.numeric(tclObj(T))",82]]},{"word":"nzchar","context":[["opts <- if(nzchar(arch)) R_opts4 else R_opts2",84],["if(!nzchar(package))",74],["if(nzchar(arch)) env0,",62],["if(nzchar(tz)) attr(res, \"tzone\") <- tz",57],["which <- nzchar(snames)",54],["if (nzchar(rarch) &&",54],["if(nzchar(Renv) && file.exists(Renv)) readRenviron(Renv)",50],["if (nzchar(res <- isUME(e[[3L]]))) res",43],["else if (nzchar(res <- isUME(e[[4L]]))) res",43],["if(nzchar(unique)) {",42]]},{"word":"o","context":[["}, o=expected);",3713],["},  o = expected);",330],["y = y.i.o, dw2 = dw2.o, d = d.o,",132],["y = y.i.o, dw2 = dw2.o, d = d.o,",132],["y = y.i.o, dw2 = dw2.o, d = d.o,",132],["o <- object",94],["return(o)",93],["} else if (a == \"-o\") {",80],["else stop(\"-o option without value\", call. = FALSE)",80],["diag(d.o) <- 0",72]]},{"word":"obj","context":[["return(obj)",392],["obj",391],["obj <- .td.object(attr(tdf, \"tableName\"), attr(tdf, \"database\"))",81],["function (obj) {",73],["yp.sp.log <- spPredict(sp.obj = fit.logit, pred.coords = s.p,",58],["#' @param obj a \\code{sleuth} object",52],["query <- gsub(\"`obj`\", obj, query)",48],["query <- gsub(\"`obj`\", obj, query)",48],["as(.Object, Classi) <- obj",43],["stopifnot( is(obj, 'sleuth') )",42]]},{"word":"object","context":[["object",1381],["return(object)",1024],["##' @param inputParams Either an R object that will be converted into JSON",498],["#' @param ctx the github context object",473],["function(object) {",464],["validity = function(object) {",390],["##' @param objectID DNAnexus object ID",358],["function(object, value) {",350],["object <-",313],["function(object){",308]]},{"word":"objects","context":[["stop(gettextf(\"directory '%s' does not contain Rd objects\", dir),",166],["# ggplot objects can be passed in ..., or to plotlist (as a list of ggplot objects)",110],["# ggplot objects can be passed in ..., or to plotlist (as a list of ggplot objects)",110],["objects_in_code <- objects(envir = code_env, all.names = TRUE)",91],["#' these objects hold also the data assign to R, as \\code{dataframe}, from opal datasources.",84],["stop(gettextf(\"'%s' not defined for \\\"POSIXt\\\" objects\", .Generic),",76],["## what else shall we allow?  At least objects of class link-glm.",72],["## Find the function objects in the given package.",68],["## Determine exported objects.",68],["# if no opal login details are provided look for 'opal' objects in the environment",67]]},{"word":"obs","context":[["checkEquals(obs, exp, msg = message)",204],["checkIdentical(obs, exp)",152],["## obs    1   1  obs  K[obs](r)",78],["## obs    1   1  obs  K[obs](r)",78],["## obs    1   1  obs  K[obs](r)",78],["## obs            observed value of K(r) for data pattern",78],["N <- nrow(epsilon.obs)",60],["s.p    <- s[!obs, ]",57],["s.o    <- s[obs, ]",57],["X.o    <- matrix(x[obs], ntrain, 1)",57]]},{"word":"observe","context":[["observe({",2354],["observe ({",139],["}) # observe",85],["shiny::observe({",49],["## seem to observe is the following.",33],["}) #observe",31],["observe(",19],["#   observe({",17],["### print and observe this table and select the groups you are interested in",15],["# observe({",13]]},{"word":"obtain","context":[["# You may obtain a copy of the License at",1264],["#   You may obtain a copy of the License at",729],["# with the License.  You may obtain a copy of the License at",608],["# the License.  You may obtain a copy of the License at",154],["## You may obtain a copy of the License at",41],["#  You may obtain a copy of the License at",26],["## (no escaping or quoting to obtain valid R syntax).",26],["# obtain the name of the column based on the column number",21],["## http://www.gnu.org/copyleft/gpl.html.  You can also obtain it by",19],["# in compliance with the License.  You may obtain a copy of the License at",17]]},{"word":"of","context":[["#  but WITHOUT ANY WARRANTY; without even the implied warranty of",5447],["#  it under the terms of the GNU General Public License as published by",5392],["#  A copy of the GNU General Public License is available at",5168],["#  the Free Software Foundation; either version 2 of the License, or",5121],["#  Part of the R package, http://www.R-project.org",3868],["# but WITHOUT ANY WARRANTY; without even the implied warranty of",3166],["# You should have received a copy of the GNU General Public License",2410],["# it under the terms of the GNU General Public License as published by",2082],["# the Free Software Foundation, either version 3 of the License, or",1475],["# You may obtain a copy of the License at",1264]]},{"word":"off","context":[["dev.off()",23382],["graphics.off()",919],["dev.off();",771],["#dev.off()",771],["# dev.off()",510],["garbage <- dev.off()",487],["if (!interactive()) dev.off()",399],["invisible(dev.off())",108],["on.exit(dev.off())",104],["## dev.off()",91]]},{"word":"offset","context":[["# -*- mode: C++; indent-tabs-mode: nil; c-basic-offset: 4; tab-width: 4; -*-",78],["column <- treeview$getColumn(col.offset - 1)",67],["offset <- object$offset",60],["offset <- object$offset",60],["if(!is.null(offset))",48],["if(!is.null(offset)) {",48],["#' @param offset_column Specify the offset column.",47],["mu <- linkinv(eta <- eta + offset)",45],["offset <- as.vector(model.offset(mf))",42],["offset <- as.vector(model.offset(mf))",42]]},{"word":"ok","context":[["ok <- FALSE",184],["if (!ok)",140],["ok(cmp(",85],["ok <- TRUE",68],["ok <- switch(.Generic, max = , min = , range = TRUE, FALSE)",67],["if(!ok)",59],["ext <- ext[ok]",54],["exists('ok') && isTRUE(ok)",47],["exists('ok') && isTRUE(ok)",47],["i <- pmatch(i, rows, duplicates.ok = TRUE)",45]]},{"word":"old","context":[["par(p.old)",240],["old",81],["par(old.par)",72],["Dev <- matrix(m.old[[\"Dev\"]],1,1)",63],["setwd(old)",56],["old <- as.character(spec)",52],["names(old) <- new",52],["if (is.null(new)) new <- old",52],["m.new <- m.old",51],["on.exit(par(old.par))",45]]},{"word":"omit","context":[["na.omit() %>%",103],["tmp<- na.omit(sapply(argv,function(arg)",93],["x <- na.omit(x)",92],["test_fit = wilcox.test(sen_dat,insen_dat,na.action=\"na.omit\")",69],["test_fit = t.test(sen_dat,insen_dat,na.action=\"na.omit\")",69],["#' @importFrom stats na.omit",62],["DF.yrs <- ordered(c(sort(unique(na.omit(Year))), \"All\"), levels=c(sort(unique(na.omit(Year))), \"All\"))",52],["DF.yrs <- ordered(c(sort(unique(na.omit(Year))), \"All\"), levels=c(sort(unique(na.omit(Year))), \"All\"))",52],["d <- na.omit(d)",49],["na.omit %>%",48]]},{"word":"on","context":[["# distributed under the License is distributed on an \"AS IS\" BASIS,",920],["#   distributed under the License is distributed on an \"AS IS\" BASIS,",717],["on.exit(close(con))",690],["# software distributed under the License is distributed on an",605],["##' @param jsonifyData Whether to call \\code{RJSONIO::toJSON} on",498],["# distributed under the License is distributed on an 'AS IS' BASIS,",397],["on.exit( .Call(\"R_igraph_finalizer\", PACKAGE=\"igraph\") )",382],["on.exit(close(file))",278],["on.exit()",276],["dev.hold(); on.exit(dev.flush())",254]]},{"word":"one","context":[["# Licensed to the Apache Software Foundation (ASF) under one",607],["# Licensed to the Apache Software Foundation (ASF) under one or more",154],["#all reference trees to one comp tree",139],["# one or both dates is \"[Not Available]\".  count tells us how many good",122],["if (one.fig)",86],["mxPath(from=\"one\", to=indicators,",68],["one <- (length(topfiles) == 1L)",58],["if(one) {",58],["msg <- c(if(one) \"File\" else \"Files\",",58],["# Align the feature in the sample with the one in the model",56]]},{"word":"only","context":[["# update plot legend with only ews line",898],["# Plant the seed only if a specified value is entered",159],["## we only source the assignments, and hence do not get any",102],["#These first few lines run only when the file is run in RStudio, !!NOT when an Rmd/Rnw file calls it!!",95],["## Currently only accessible via an internal environment",82],["######### Make new data set with only salinities and abundances#########",76],["if(!character.only)",68],["## package was called if character.only = TRUE and",66],["## Because we really only need this for calling from R CMD check, we",66],["## Look at all calls (not only at top level).",63]]},{"word":"op","context":[["par(op)",445],["options(op)",282],["#' par(op)",162],["op <- par(no.readonly = TRUE)",137],["on.exit(par(op))",124],["if(dep$op != '>=') next",88],["!do.call(depends$op, list(current, depends$version))",68],["else !do.call(depends$op,",68],["on.exit(options(op))",63],["cb$putcode(start.op, ci, end.label)",56]]},{"word":"open","context":[["#  open source, and has the attribution requirements (GPL Section 7) at",124],["else if (Sys.info()['sysname'] == 'Darwin') { system(paste (\"open \",fname, sep=\"\")) } # mac",71],["# open created file",68],["else { system(paste (\"xdg-open \",fname, sep=\"\")) } # linux",62],["type = \"open\",",46],["if (!isOpen(file)) open(file, \"w\") else closeit <- FALSE",42],["open(file)",40],["zz <- file(\"all.Rout\", open=\"wt\")",38],["outConn <- file(outFile, open = \"w\")",36],["bounds <- grid.Call(L_xsplineBounds, x$x, x$y, x$shape, x$open, x$arrow,",36]]},{"word":"option","context":[["#  (at your option) any later version.",5319],["# (at your option) any later version.",2316],["# of the License, or (at your option) any later version.",455],["## (at your option) any later version.",345],["# version 2 of the License, or (at your option) any later version.",297],["#    (at your option) any later version.",226],["#(at your option) any later version.",164],["#   (at your option) any later version.",125],["#     (at your option) any later version.",94],["# Foundation; either version 3 of the License, or (at your option) any later",91]]},{"word":"options","context":[["Rcmd <- paste(\"options(warn=1)\\n\",",750],["options(digits=22)",750],["options(warn=-1)",438],["options( digits = 16 )",339],["options(op)",282],["options(echo=TRUE)",250],["options(stringsAsFactors = FALSE)",233],["options(warn = -1)",193],["options(warn=2)",180],["options = list(",180]]},{"word":"opts","context":[["out <- R_runR(Rcmd, opts, c(env, env1), arch = arch)",96],["opts <- Rd2txt_options()",96],["opts <- if(nzchar(arch)) R_opts4 else R_opts2",84],["admb.opts = admbControl(noinit = FALSE))",58],["out <- R_runR(Rcmd, opts, env, arch = arch)",52],["opts <- list(",35],["} else if (opts$nFlag == 1) {",34],["if (opts$nFlag == 0) {",34],["lapply(sub(\".*=[[:space:]]*\", \"\", opts),",33],["args[sub(\"[[:space:]]*=.*\", \"\", opts)] <-",33]]},{"word":"or","context":[["#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",5389],["#  This program is free software; you can redistribute it and/or modify",5207],["#  the Free Software Foundation; either version 2 of the License, or",5121],["# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",2572],["# the Free Software Foundation, either version 3 of the License, or",1475],["# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",1415],["# Unless required by applicable law or agreed to in writing, software",1318],["#   Unless required by applicable law or agreed to in writing, software",729],["#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",717],["# This program is free software: you can redistribute it and/or modify",682]]},{"word":"order","context":[["colInd <- order.dendrogram(ddc)",160],["rowInd <- order.dendrogram(ddr)",123],["order by",79],["order, alpha, no.subsets);",73],["order <- 1;",72],["res <- res[order(res$padj),]",63],["fGroups = fGroups[order(fGroups)]",60],["as.integer(order.drop.sqr),",55],["# match call again, for order",51],["order<-dim(A)[1]",49]]},{"word":"org","context":[["#  http://www.r-project.org/Licenses/",4000],["#  Part of the R package, http://www.R-project.org",3868],["#  https://www.R-project.org/Licenses/",1168],["#  Part of the R package, https://www.R-project.org",1164],["#     http://www.apache.org/licenses/LICENSE-2.0",686],["#        http://www.apache.org/licenses/LICENSE-2.0",678],["# along with this program.  If not, see <http://www.gnu.org/licenses/>.",649],["#   http://www.apache.org/licenses/LICENSE-2.0",619],["# http://www.apache.org/licenses/LICENSE-2.0",586],["#' \\url{http://www.mlhim.org}",337]]},{"word":"other","context":[["# for the code accessed (or partly included) from other R-ports:",118],["# and other sources",118],["#' @param ... Further arguments passed to or from other methods.",114],["#' @param \\dots any other passthru parameters",71],["\"Use \\\\uxxxx escapes for other characters.\\n\")",63],["#' @param ... Further arguments to be passed from or to other methods.",60],["## try a couple of other heuristics",54],["#     the documentation and/or other materials provided with the",53],["#Load any source files that contain/define functions, but that don't load any other types of variables",47],["# for code accessed (or partly included) from other sources:",47]]},{"word":"out","context":[["return(out)",3387],["out",2263],["printLog0(Log, paste(c(out, \"\"), collapse = \"\\n\"))",975],["if (length(out)) {",866],["out <- R_runR(Rcmd, R_opts2, \"R_DEFAULT_PACKAGES=NULL\")",510],["out <- list()",465],["out <- NULL",280],["out <- R_runR2(Rcmd)",256],["# You can find out more about building applications with Shiny here:",223],["if(length(out)) {",196]]},{"word":"outfile","context":[["lines <- readLines(outfile, warn = FALSE)",96],["savefile <- paste(outfile, \"save\", sep = \".\" )",86],["unlink(outfile)",84],["stdout = outfile, stderr = outfile)",80],["stdout = outfile, stderr = outfile)",80],["out <- readLines(outfile, warn = FALSE)",64],["shQuote(f), shQuote(outfile))",63],["sQuote(outfile)))",58],["outfile <- paste0(f, \"out\")",57],["close(outfile)",56]]},{"word":"output","context":[["return(output)",1201],["shinyServer(function(input, output) {",959],["df.output.chk = df.output.chk, df.comp = df.comp,",592],["df.output.chk = df.output.chk, df.comp = df.comp,",592],["shinyServer(function(input, output, session) {",546],["output",265],["output$plot <- renderPlot({",210],["## output results in tables to pdf",190],["df.output.chk <- cbind(df.output.chk,",176],["df.output.chk <- cbind(df.output.chk,",176]]},{"word":"p","context":[["p",1549],["print(p)",1291],["return(p)",972],["par(p.old)",240],["p <- p +",228],["p <- p +",228],["plot(p)",207],["p <- ncol(x)",185],["for(p in nsInfo$exportPatterns)",166],["p <- p + theme_bw()",149]]},{"word":"p1","context":[["p1",220],["return(p1)",135],["print(p1)",95],["p1 <- 1L:p",46],["plot(p1)",44],["p1 <- p1 + geom_line(data=mvf_plot_data,aes(Time,Failure))",38],["p1 <- p1 + geom_line(data=mvf_plot_data,aes(Time,Failure))",38],["#p1 <- ggplot(,aes_string(x=Time,y=Failure));",35],["p1 = ggplot(dm[dm$X2==\"ones\",], aes(x = index, y = value, group = X2, color=\"black\")) +",33],["print(arrangeGrob(p1, p2, ncol=2))",28]]},{"word":"package","context":[["#  Part of the R package, http://www.R-project.org",3868],["#  Part of the R package, https://www.R-project.org",1164],["if(!missing(package)) {",748],["#' @docType package",689],["stop(\"argument 'package' must be of length 1\")",667],["if(length(package) != 1L)",625],["dir <- find.package(package, lib.loc)",623],["dir <- find.package(package, lib.loc)",623],[".load_package_quietly(package, lib.loc)",434],["function(package, dir, lib.loc = NULL)",419]]},{"word":"packages","context":[["## packages",206],["# load packages",150],["# Load packages",150],["# ---- load-packages -----------------------------------------------------------",130],["install.packages(\"ggplot2\")",124],["#  of packages for network analysis, http://statnet.org .",124],["available <- available.packages(contriburl = contriburl,",96],["install.packages(\"devtools\")",93],["# Load required packages",75],["install.packages(pkg_dir,type=\"source\",repos=NULL)",72]]},{"word":"panel","context":[["panel.grid.minor = element_blank(),",524],["panel.grid.major = element_blank(),",410],["panel.background = element_blank(),",345],["panel.border = element_blank(),",316],["sgp.panel.years.within=c('LAST_OBSERVATION', 'FIRST_OBSERVATION'),",229],["# Make the panel",205],["panel.grid.minor=element_blank(),",161],["sgp.baseline.panel.years=c('2009', '2010', '2011', '2012', '2013'),",141],["panel.grid.major=element_blank(),",126],["panel.background=element_blank(),",125]]},{"word":"par","context":[["par(mfrow=c(1,1))",1117],["par(mfrow=c(2,2))",802],["par(mfrow=c(1,2))",779],["par(new=T)",722],["par(mfrow=c(2,1))",456],["par(op)",445],["par(new=TRUE)",417],["par(mar=c(0,0,0,0))",300],["par(opar)",241],["par(p.old)",240]]},{"word":"parallel","context":[["library(parallel)",701],["}, .parallel = FALSE)",151],["require(parallel)",124],["parallel::stopCluster(cl)",77],["if( parallel==F )",63],["if( parallel==T)",62],["parallel.config=list(",60],["options(mc.cores = parallel::detectCores())",58],["#' @import parallel",43],["if((poped.db$settings$parallel$bParallelLS == 0)){",43]]},{"word":"param","context":[["##' @param alwaysRetry Whether to always retry even when no response is",498],["##' @param inputParams Either an R object that will be converted into JSON",498],["##' @param jsonifyData Whether to call \\code{RJSONIO::toJSON} on",498],["#' @param ctx the github context object",473],["##' @param objectID DNAnexus object ID",358],["#' @param fileList - The path/file name(s) of the XML file(s) to process.",337],["#' @param x An \\linkS4class{H2OFrame} object.",199],["#' @param \\dots further arguments to be passed on (currently unimplemented)",192],["#' @param repo the name of the repo",187],["#' @param owner the repo owner",163]]},{"word":"parameter","context":[["mtext(paste(\"Parameters:\", param_file), side=1, line=3, cex=0.75)  # Add parameter file",253],["### Propose new parameter values",178],["parameter = PARAMETER,",117],["parameter <- rep(n,nrow(level))",101],["pll <- c(pll,list(data.frame(parameter,type,level)))",101],["if(any(scale <= 0)) stop(\"The scale parameter must be positive.\")",86],["# To check the input parameter for generating figures",62],["## -- parameter definition function",61],["fun_call(parameter =",60],["fun_call(parameter = fun_argument(",60]]},{"word":"parameters","context":[["# Check parameters coverage",93],["parameters {",76],["# parameters",76],["parameters <- list()",72],["#' @param \\dots any other passthru parameters",71],["#' @param ... ignored parameters",70],["return(parameters)",68],["with(as.list(parameters),{",65],["# Model parameters",59],["parameters.to.save = model_parameters,",56]]},{"word":"params","context":[["return(params)",109],["params",104],["params <- list()",76],["params$training_frame  <- training_frame",70],["params <- list(",63],["params = params,",62],["params = params,",62],["params                 <- list()",58],["params = list(",56],["if (getIgraphOpt(\"add.params\")) {",52]]},{"word":"parent","context":[["e <- get(\"e\", parent.frame())",440],["mf <- eval(m, parent.frame())",204],["env <- parent.env(env)",163],["if(is.matrix(eval(m$data, parent.frame())))",163],["data, enclos = sys.frame(sys.parent()))",109],["parent=outTreeMessage)",109],["where = topenv(parent.frame()),",107],["env <- parent.frame()",97],["where = topenv(parent.frame()))",85],["mf <- eval(mf, parent.frame())",81]]},{"word":"parm","context":[["thinned[t.iter,] <- Mo0[[\"parm\"]]",223],["prop <- Mo0[[\"parm\"]]",173],["\"Current:\", round(Mo0[[\"parm\"]][j]),",129],["Data[[\"parm.names\"]][j],",117],["thinned[t.iter,] <- Mo1[[\"parm\"]]",81],["Data[[\"parm.names\"]][j], \".\\n\",",45],["cat(\"\\nWARNING: Evaluating\", Data[[\"parm.names\"]][j],",36],["post <- matrix(Mo0[[\"parm\"]], Iterations, LIV, byrow=TRUE)",34],["parm.len <- length(parm)",33],["parm.len <- length(parm)",33]]},{"word":"parms","context":[["parms <- list()",182],["parms$training_frame <- training_frame",103],["parms$seed <- seed",93],["#' @param parms (Optional) Parameters to include in the request",84],["parms$model_id <- model_id",83],["parms$ignored_columns <- args$x_ignore",75],["parms$response_column <- args$y",75],["parms$nfolds <- nfolds",73],["parms$validation_frame <- validation_frame",62],["if( !missing(fold_assignment) )           parms$fold_assignment        <- fold_assignment",60]]},{"word":"pars","context":[["if (is.null(pars)) {",70],["assign(pars[1],0)",52],["if(transform.pars) {",49],["pars <- env$pars",46],["pars <- env$pars",46],["##' @rdname pars",44],["pars[[i]]@parnum <- tmp2",39],["return(pars)",27],["ini.cov.pars = ini.cov.pars,",27],["ini.cov.pars = ini.cov.pars,",27]]},{"word":"parse","context":[["expected <- eval(parse(text=\"FALSE\"));",383],["print(\"Time it took to parse\")",199],["expected <- eval(parse(text=\"TRUE\"));",191],["newy <- format(eval(parse(text=newy)), digits= 3, scientific = TRUE)",138],["expected <- eval(parse(text=\"NULL\"));",135],["good_expr <- parse(text=correctExpr)[[1]]",89],["e1      <- try(parse(text=dat))",77],["if (eval(parse(text=newy)) >= 10^6) {",67],["if (eval(parse(text= newy)) <= 10^(-6)) {",67],["stop(gettextf(\"parse error in file '%s':\\n%s\",",66]]},{"word":"part","context":[["# This file is a part of Xpose 4.",234],["# This file is part of icd.",135],["# This file is part of Rcpp.",133],["# This file is part of the R package rkwarddev.",122],["## This file is part of the R-package `ape'.",116],["# This file is part of the R package koRpus.",111],["#  This file is part of sybil.",104],["# This file is part of darch.",97],["# This file is part of icd9.",77],["# This file is part of shinystan",74]]},{"word":"parts","context":[["model.parts <- .model.parts(object)",305],["model.parts <- .model.parts(object)",305],["if( is.null(model.parts$xm) ) invisible(.warn.no.cross.validation())",243],["if( is.null(model.parts$vm) ) invisible(.warn.no.validation())",243],["\"parts\": {",129],["# You are welcome to use parts of this code, but please give credit when using it extensively.",51],["if( is.null(model.parts$vm) ) return( invisible(.warn.no.validation()) )",51],["## mentioned in other parts of the Rd object documenting them, or be",34],["## We could also check that the local and domain parts are no longer",33],["## the non-matched parts.",33]]},{"word":"passed","context":[["#' @param \\dots further arguments to be passed on (currently unimplemented)",192],["num.passed.tests=num.passed.tests+1",135],["num.passed.tests=num.passed.tests+1",135],["#' @param ... Further arguments passed to or from other methods.",114],["# ggplot objects can be passed in ..., or to plotlist (as a list of ggplot objects)",110],["valGood <- valResults$passed",108],["if(is(e, \"dev\") && !valResults$passed)swirl_out(valResults$message)",108],["#' @param \\dots further arguments to be passed to/from this method.",97],["Log.info(\"Check that the hyper_params that were passed to grid, were used to construct the models...\")",87],["#' @param \\dots extra arguments to be passed if `object` is of type",78]]},{"word":"paste","context":[["printLog0(Log, paste(c(out, \"\"), collapse = \"\\n\"))",975],["Rcmd <- paste(\"options(warn=1)\\n\",",750],["paste(",446],["mtext(paste(\"Parameters:\", param_file), side=1, line=3, cex=0.75)  # Add parameter file",253],["writeMM(as(R, \"CsparseMatrix\"), paste(args[2], \"R\", sep=\"\"));",204],["A <- as.matrix(readMM(paste(args[1], \"A.mtx\", sep=\"\")))",197],["printLog0(Log, paste(out, collapse = \"\\n\"), \"\\n\")",176],["Rcmd <- paste(\"options(warn=1, showErrorCalls=FALSE)\\n\",",160],["paste(\"c(\",paste(prop, collapse=\",\"),\")\",",152],["paste(\"c(\",paste(prop, collapse=\",\"),\")\",",152]]},{"word":"paste0","context":[["statement <- paste0(statement, \" AND\")",1666],["as.POSIXct(paste0(\"2016-\",1:12,\"-01\")), \"%b\"))",598],["write(paste0(\"STOP \",sErrorMsg,\" \",date()),file=sLogFile,append=TRUE)",320],["cat(paste0(sErrorMsg,\"\\n\"))",320],["paste0(",263],["ret = paste0(base.path1,\"/\")",158],["ggtitle(paste0(case5_ABT$Case_Name,\"\\n\",case5_ABT$ticker))+ geom_line() +",116],["error = function(e)stop(paste0(\"Illegal expression \", dprs(expr), \": \",",102],["newy <- paste0(\"1/\", newy)",99],["statement <- paste0(statement, \" person_id = '\", person_id,\"'\")",96]]},{"word":"pasture","context":[["## on pasture",188],["## bac load on pasture",188],["chk.pasture.pop <- data.frame(",142],["## pop on pasture",142],["chk.pasture.bac <- data.frame(",142],["chk.bac[chk.bac$location == \"pasture\", \"accum.bac\"]) /",96],["manual.calc.pop.total = chk.pop[chk.pop$location == \"pasture\", \"pop\"],",96],["model.bac.total = df.output[ , \"bac.pasture.on.land\"],",96],["chk.pop[chk.pop$location == \"pasture\", \"pop\"],",96],["chk.bac[chk.bac$location == \"pasture\", \"total.bac\"],",96]]},{"word":"path","context":[["code_dir <- file.path(dir, \"R\")",636],["dfile <- file.path(dir, \"DESCRIPTION\")",627],["#' @param fileList - The path/file name(s) of the XML file(s) to process.",337],["if(file.exists(file.path(dir, \"NAMESPACE\"))) {",203],["setwd(path)",191],["sys_data_file <- file.path(code_dir, \"sysdata.rda\")",170],["#' path <- \"path/to/file.json\"",168],["#' path <- \"path/to/file.json\"",168],["tkwm.iconbitmap(tt, default = file.path(R.home(\"bin\"), \"Rgui.exe\"))",153],["return(invisible(path))",150]]},{"word":"paths","context":[["if (length(paths)) {",59],["if(length(paths)) {",58],["paths <-",49],["# 2nd element - file paths of the data files for each study as character vector",42],["## Spaces in paths might still cause trouble.",38],["for(p in paths) {",36],["#' @rdname simList-accessors-paths",36],["paths <- paths[file_test(\"-f\", paths)]",34],["if(!length(paths)) return(bad_flags)",34],["paths <- paths[file_test(\"-f\", paths)]",34]]},{"word":"patient","context":[["PtNum=patient.number,",314],["new.event <- list(PatientID=patient.id,",314],["patient.number <- as.integer(id.map[patient.id])",260],["patient.number <- as.integer(id.map[patient.id])",260],["patient.id <- gsub(\"-\", \".\", patient.id, fixed=TRUE)",260],["patient.id <- gsub(\"-\", \".\", patient.id, fixed=TRUE)",260],["diagnosis.year <- subset(tbl.pt, bcr_patient_barcode==patient.id)$initial_pathologic_dx_year[1]",154],["curr_info = info[match(train_pats,as.character(info$patient)),]",76],["tbl.pt.row <- subset(tbl.pt, bcr_patient_barcode==patient.id)",62],["train.resp = as.character(train.info$response[match(colnames(train.dat),as.character(train.info$patient))])",57]]},{"word":"pattern","context":[["rm(list = ls(pattern = \"tmp\\\\.*\"))",1348],["#' files <- dir('./inst/examples', recursive=TRUE, full.names=TRUE, pattern='\\\\.xml$')",337],["pattern = pattern),",110],["pattern = pattern),",110],["h2o.rm(localH2O, grep(pattern = \"Last.value\", x = h2o.ls(localH2O)$Key, value = TRUE))",89],["file.remove(list.files(pattern=\".png\"))",88],["pattern <- vignetteEngine(\"Sweave\")$pattern",83],["pattern <- vignetteEngine(\"Sweave\")$pattern",83],["path <- tempfile(pattern=\"git2r-\")",82],["## obs            observed value of K(r) for data pattern",78]]},{"word":"pch","context":[["pch = 19,",101],["pch = 16,",70],["plot(pr.out$x[,1:2], col=col, pch=19, xlab='Z1', ylab='Z2',",68],["pch = 19)",61],["ylab=input$yaxis, pch=1)",60],["plot(pr.out$x[,c(2,3)], col=col, pch=19, xlab='Z2', ylab='Z3',",54],["plot(pr.out$x[,c(1,3)], col=col, pch=19, xlab='Z1', ylab='Z3',",54],["#' op <- par(mfrow=c(1,2),pch=19)",51],["pch = 0, cex = 1.2, col = \"blue\")",48],["pch=16, cex=0.75, xlab=\"Longitude\", ylab=\"Latitude\",",45]]},{"word":"pdf","context":[["## output results in tables to pdf",190],["\".pdf\"), height = 8.5, width = 11, onefile = TRUE)",190],["## close the pdf file",158],["pdf(file)",110],["dev.off(pdf.output)",61],["pdf.output <- dev.cur()",61],["contentType='image/pdf')",57],["\".tex\", \".log\", \".aux\", \".pdf\", \".png\",",55],["sUserGuide <<- \"Marxan_io_rev39_user_guide.pdf\"",50],["condition=\"input.paramdown=='pdf'\",",47]]},{"word":"permissions","context":[["# See the License for the specific language governing permissions and",1314],["#   See the License for the specific language governing permissions and",729],["# specific language governing permissions and limitations",605],["# See the License for the specific language governing permissions and limitations under the License.",101],["# for the specific language governing permissions and limitations",45],["## See the License for the specific language governing permissions and",40],["checkingLog(Log, \"for sufficient/correct file permissions\")",32],["printLog(Log, \"Please fix their permissions\\n\")",32],["wrapLog(\"Found the following files with insufficient permissions:\\n\")",32],["#  See the License for the specific language governing permissions and",26]]},{"word":"pi","context":[["if( !is.null(pi) ) perm[[i]] <- pi",44],["if( !is.null(pi) ) perm[[i]] <- pi",44],["m <- list(a1=1:3, a2=4:6, a3=pi, a4=c(\"a\",\"b\",\"c\"))",38],["foo(pi)",38],["more <- c(more, names(pi$Depends), names(pi$Imports),",32],["names(pi$LinkingTo))",32],["more <- c(more, names(pi$Depends), names(pi$Imports),",32],["thispkg <- unname(pi$DESCRIPTION[\"Package\"])",32],["\"methods\" %in% c(names(pi$Depends), names(pi$Imports))",32],["pi <- .split_description(.read_description(file.path(pkgdir, \"DESCRIPTION\")))",32]]},{"word":"pkg","context":[["bad_imports <<- c(bad_imports, pkg)",132],["for (pkg in pkgs) {",121],["bad <- c(bad, pkg)",74],["for(pkg in pkgs) {",71],["if(!is.null(pkg <- mc$package) && !pkg %in% depends_suggests)",66],["if(! pkg %in% depends_suggests)",66],["unknown <- c(unknown, pkg)",66],["if(!is.null(pkg <- mc$package)) {",66],["if(! pkg %in% imports)",66],["bad_data <<- c(bad_data, pkg)",66]]},{"word":"pkgdir","context":[["pkgdir))",240],["vigns <- pkgVignettes(dir = pkgdir)",122],["pkgdir <- getwd()",86],["owd <- setwd(pkgdir)",63],["pkgname <- basename(pkgdir)",53],["f <- file.path(pkgdir, \"DESCRIPTION\")",50],["Sys.setenv(R_PACKAGE_DIR = pkgdir)",44],["tests_dir <- file.path(pkgdir, test_dir)",44],["Sys.setenv(R_LIBRARY_DIR = dirname(pkgdir))",44],["cleanup_pkg(pkgdir, Log)",44]]},{"word":"pkgname","context":[[".onLoad <- function(libname, pkgname) {",188],[".onAttach <- function(libname, pkgname) {",142],[".onLoad <- function(libname, pkgname)",101],["return(e3 != pkgname)",66],["file.copy(latex_log, paste0(pkgname, \"-manual.log\"))",64],["pkgname))",56],["sQuote(pkgname)),",53],["pkgname <- basename(pkgdir)",53],["runUserHook <- function(pkgname, pkgpath) {",52],["runHook <- function(hookname, env, libname, pkgname) {",50]]},{"word":"pkgs","context":[["for (pkg in pkgs) {",121],["pkgs <- character()",99],["function(pkgs, lib, repos = getOption(\"repos\"),",80],["} else pkgs <- c(pkgs, a)",78],["} else pkgs <- c(pkgs, a)",78],["for(pkg in pkgs) {",71],["if(!length(pkgs)) return(invisible())",61],["if(is.null(pkgs))",55],["pkgs <- names(value)",54],["for(i in seq_along(pkgs)) {",54]]},{"word":"plot","context":[["plot.new()",1229],["# update plot legend with ews and breakpoint lines",898],["# update plot legend with only ews line",898],["plot(",313],["# plot",279],["plot[[\"data\"]] <- .endSaveImage(image)",250],["twoord.plot(1:length(decomposed$random), decomposed$random,",236],["plot(g)",234],["# then, if the requested plot already exists, use it",228],["twoord.plot(1:length(decomposed$seasonal), decomposed$seasonal,",226]]},{"word":"plots","context":[["numPlots = length(plots)",222],["plots <- c(list(...), plotlist)",215],["print(plots[[1]])",207],["# ncol: Number of columns of plots",192],["print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,",190],["# To run a while loop to generate different plots",108],["plots <- list()",61],["plots.ttest[[z]] <- state$plotsTtest[[index]]",59],["segments(mp - 0.1, AB_mean + AB_se, mp + 0.1, AB_mean + AB_se, lwd=2) #plots error bar caps",57],["segments(mp, AB_mean + AB_se, mp,AB_mean, lwd=2) # plots positive error bar centered on mp",57]]},{"word":"plyr","context":[["library(plyr)",2718],["require(plyr)",775],["library(\"plyr\")",175],["#' @import plyr",82],["ds1 <- plyr::rename(x=ds1, replace = c(",51],["requireNamespace(\"plyr\")",51],["install.packages(\"plyr\")",46],["library('plyr')",46],["#library(plyr)",45],["require(\"plyr\")",40]]},{"word":"png","context":[["png(filename)",134],["library(png)",100],["file.remove(list.files(pattern=\".png\"))",88],["png(file)",87],["contentType='image/png')",57],["\".tex\", \".log\", \".aux\", \".pdf\", \".png\",",55],["plot_name <- paste(plot_name, '.png', sep='')",48],["png(filename=plot_name, width=PLOT_W, height=PLOT_H, units=\"px\", pointsize=PTSIZE)",48],["condition=\"input.paramdown=='png'\",",47],["\".png\")",45]]},{"word":"points","context":[["trellis.par.set(fontsize = list(text = 7, points = 5),",76],["c(\"Compiled code should not call entry points which\",",60],["nums.of.characteristic.points=nums.of.characteristic.points,",42],["nums.of.characteristic.points=nums.of.characteristic.points,",42],["invisible(points)",40],["# Adding the number of points to the plot",40],["#define the the lon/lat of the background / psuedo absence points to use -- 2 column matrix of longitude and latitude",39],["# subset ocurrence points within GOC",38],["# time points",38],["points(",37]]},{"word":"pop","context":[["\"model.pop.total\")",230],["pop$add_model(",198],["chk.stream.pop <- data.frame(",158],["model.pop.total = sum(df.output$pop.total),",158],["chk.total.pop <- data.frame(",158],["chk.forest.pop <- data.frame(",158],["## pop on forest",158],["model.pop.total = sum(df.output$pop.total),",158],["## pop in/around stream",158],["chk.bac <- data.frame(chk.pop, total.bac = chk.pop$pop * chk.Bacteria.Prod)",142]]},{"word":"poped","context":[["poped.db <- returnArgs[[2]]",344],["#' @inheritParams create.poped.database",61],["poped.db <- returnArgs[[3]]",45],["if((!isempty(poped.db$settings$strIterationFileName))){",44],["return(list( y= y,poped.db=poped.db))",43],["return(list( y= y,poped.db=poped.db))",43],["if((poped.db$settings$parallel$bParallelLS == 0)){",43],["return(list(y=y,poped.db=poped.db))",37],["return(list(y=y,poped.db=poped.db))",37],["sigma=poped.db$parameters$sigma,",37]]},{"word":"port","context":[["# for this R-port:",164],["conn <- h2o.init(ip=myIP, port=myPort, startH2O = FALSE)",94],["h2o.init(ip=myIP, port=myPort, startH2O = FALSE)",55],["\"port: \",     session$clientData$url_port,     \"\\n\",",51],["conn <- new(\"H2OClient\", ip=myIP, port=myPort)",49],["algorithm=\"port\",control=ctrl)",48],["port = conn@port",42],["port = conn@port",42],["onco <- OncoDev14(port=PORT, scriptDir=scriptDir, userID=userID, datasetNames=dataset)",42],["stop(\"need to hardcode ip and port\")",38]]},{"word":"pos","context":[["if(length(pos)) {",225],["layout.pos.col = matchidx$col))",203],["print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,",190],["trim_spectra <- get(x=\"trim\", pos=\"package:MALDIquant\")",91],["if(length(pos))",90],["assign (pos = 1, newnam, xpdb)",85],["assign (pos = 1, \".cur.db\", xpdb)",85],["pos <- pos[1L]",77],["pos <- pos[1L]",77],["base::assign(\".dptime\", (proc.time() - get(\".ptime\", pos = \"CheckExEnv\")), pos = \"CheckExEnv\")",73]]},{"word":"position","context":[["legend.position=\"right\",",207],["theme(legend.position=\"none\") +",170],["position=position_dodge(0.05)) +",151],["#position=position_dodge(0.05)) +",151],["theme(legend.position=\"none\")",130],["theme(legend.position=\"bottom\")",128],["theme(legend.position = \"none\") +",125],["theme(legend.position = \"none\")",119],["legend.position=\"none\",",108],["theme(legend.position = \"bottom\") +",102]]},{"word":"possible","context":[["plot[[\"error\"]] <- list(error=\"badData\", errorMessage= paste(\"Plotting is not possible:\", errorMessage))",72],["## subscript whenever possible.",68],["errorMessage <- \"Plotting is not possible: The Bayes factor is too small\"",66],["## Determine encoding and re-encode if necessary and possible.",43],["## sink() handling as general as possible -- unbelievably unpretty coding:",42],["warning(\"'DESCRIPTION' has an 'Encoding' field and re-encoding is not possible\", call.=FALSE)",40],["gc() # Let's clean ouR garbage if possible",37],["## If we were really picky, we would worry about possible",34],["## now look for possible copy as a registered S3 method",34],["## If possible, also catch clashes with archived CRAN packages",33]]},{"word":"pred","context":[["s.pred = s.p, knots = knots,",139],["pred",91],["post.prob.pro <- pred.spprob(mcmcoutput = fit.probit, X.pred = X.p,",62],["post.prob.pro <- pred.spprob(mcmcoutput = fit.probit, X.pred = X.p,",62],["head(pred)",60],["return(pred)",59],["post.prob.gev <- pred.spgev(mcmcoutput = fit.gev, x.pred = X.p,",59],["post.prob.gev <- pred.spgev(mcmcoutput = fit.gev, x.pred = X.p,",59],["yp.sp.log <- spPredict(sp.obj = fit.logit, pred.coords = s.p,",58],["fit.gev <- mcmc.gev(y = y.i.o, s = s.o, x = X.o, s.pred = NULL, x.pred = NULL,",57]]},{"word":"predict","context":[["print(\"    start mcmc predict\")",189],["predict(fit)",78],["predict(fit, data.frame(x=x), se=TRUE)",76],["predict(fit, type=\"terms\", se=TRUE)",76],["pred = as.numeric( predict(model , testSet )  )",52],["pred = predict(bst,x[teind,])",50],["ph = as.data.frame(h2o.predict(hh,newdata = hdf))",48],["predict = plsBag$pred,",45],["#' pred <- predict(model, toyml)",44],["prediction = prediction, level.predict = level.predict,",40]]},{"word":"print","context":[["print(p)",1291],["print(\"\")",1012],["print(i)",795],["print(x)",412],["print(g)",382],["print(gp)",351],["print(",311],["#print(.self$formatResponse(response))",282],["print(hdfs_name_node)",209],["print(plots[[1]])",207]]},{"word":"printLog","context":[["printLog(Log,",578],["printLog(Log, paste(c(out, \"\"), collapse = \"\\n\"))",129],["printLog(Log, \"\\n\")",116],["printLog(Log, msg)",68],["printLog(Log, \"      -----------------------------------\\n\")",44],["printLog(Log, \"Subdirectory 'exec' contains no files.\\n\")",32],["printLog(Log, \"Found subdirectory 'r'.\\n\",",32],["printLog(Log, \"* loading checks for arch \", sQuote(arch), \"\\n\")",32],["printLog(Log, \"Re-running with no redirection of stdout/stderr.\\n\")",32],["printLog(Log, \"Unable to find GhostScript executable to run checks on size reduction\\n\")",32]]},{"word":"printLog0","context":[["printLog0(Log, paste(c(out, \"\"), collapse = \"\\n\"))",975],["printLog0(Log,",707],["printLog0(Log, paste(out, collapse = \"\\n\"), \"\\n\")",176],["printLog0(Log, .format_lines_with_indent(bad_files), \"\\n\")",151],["printLog0(Log, .format_lines_with_indent(out), \"\\n\")",148],["printLog0(Log, paste(msg, collapse = \"\\n\"))",110],["printLog0(Log, .format_lines_with_indent(bad_lines), \"\\n\")",78],["printLog0(Log, msg,",78],["printLog0(Log, .format_lines_with_indent(lines), \"\\n\")",64],["printLog0(Log, paste(c(res, \"\", \"\"), collapse = \"\\n\"))",64]]},{"word":"proc","context":[["ptm <- proc.time()",350],["tm = proc.time() - ptm",308],["t1 <- proc.time()",205],["set.seed(476); ptm <- proc.time()",200],["t2 <- proc.time()",197],["endtime <- proc.time()",136],["starttime<-proc.time()",104],["proc.time()",87],["base::assign(\".dptime\", (proc.time() - get(\".ptime\", pos = \"CheckExEnv\")), pos = \"CheckExEnv\")",73],["base::assign(\".ptime\", proc.time(), pos = \"CheckExEnv\")",73]]},{"word":"process","context":[["#' @param fileList - The path/file name(s) of the XML file(s) to process.",337],["} else if (type == \"process\") {",136],["## FIXME: this does not need to be run in another process",128],["d.n=20 # Dimension of the noise process driving the MA",110],["tkgrid(tklabel(tt,text=\"Size of process (N) : \"), N.entry, sticky=\"w\")",91],["process = process,",77],["process = process,",77],["process = \"scOU\",",75],["process = \"BM\",",61],["source(paste0( getBasePath(\"process\") , \"/FeatureEncode_Lib.R\"))",60]]},{"word":"program","context":[["#  This program is distributed in the hope that it will be useful,",5265],["#  This program is free software; you can redistribute it and/or modify",5207],["# This program is distributed in the hope that it will be useful,",1782],["# This program is free software: you can redistribute it and/or modify",682],["# along with this program.  If not, see <http://www.gnu.org/licenses/>.",649],["# This program is free software; you can redistribute it and/or modify",594],["# along with this program; if not, a copy is available at",314],["# along with this program; if not, write to the Free Software",285],["# along with this program.  A copy can be cound in the R installation",234],["## This program is distributed in the hope that it will be useful,",210]]},{"word":"project","context":[["#  http://www.r-project.org/Licenses/",4000],["#  Part of the R package, http://www.R-project.org",3868],["#  https://www.R-project.org/Licenses/",1168],["#  Part of the R package, https://www.R-project.org",1164],["# R (http://r-project.org/) Econometrics for Performance and Risk Analysis",166],["\".project\", \".seed\", \".settings\", \".tm_properties\")",55],["\"Report bugs at bugs.r-project.org .\", sep = \"\\n\")",55],["result <- query_exec(querySql, project=project)",55],["result <- query_exec(querySql, project=project)",55],["#' PIHM Analysis project.",45]]},{"word":"prostate","context":[["#' prosPath <- system.file(\"extdata\", \"prostate.csv\", package=\"h2o\")",363],["#' prostate.hex <- h2o.uploadFile(path = prosPath)",123],["#' prostate.hex <- h2o.uploadFile(localH2O, path = prosPath)",120],["prosPath <- system.file(\"extdata\", \"prostate.csv\", package=\"h2o\")",85],["#' summary(prostate.hex)",66],["summary(prostate.hex)",66],["print(\"Read in prostate data.\")",65],["hex <- cp(prostate.hex)",64],["print(summary(prostate.hex))",63],["Log.info(\"Importing prostate.csv data...\\n\")",50]]},{"word":"prototype","context":[["pnames <- names(attributes(prototype))",108],["prototype = prototype(",85],["prototype = prototype(",85],["prototypeClass <- getClass(class(prototype), where = where)",81],["prototype=list(",73],["prototype=prototype(",69],["prototype=prototype(",69],["prototype <- do.call(\"prototype\", prototype)",54],["prototype <- prototype@object",54],["prototype <- do.call(\"prototype\", prototype)",54]]},{"word":"published","context":[["#  it under the terms of the GNU General Public License as published by",5392],["# it under the terms of the GNU General Public License as published by",2082],["# License as published by the Free Software Foundation; either",321],["## it under the terms of the GNU General Public License as published by",298],["# as published by the Free Software Foundation, either version 3",234],["#    it under the terms of the GNU General Public License as published by",221],["# as published by the Free Software Foundation; either version 2",192],["#it under the terms of the GNU General Public License as published by",191],["# under the terms of the GNU General Public License as published by",185],["#   it under the terms of the GNU General Public License as published by",129]]},{"word":"q","context":[["q()",244],["q(status=1)",171],["q(\"no\")",160],["q.but <- tkbutton(tt,text=\"Quit\",",144],["tkgrid(submit.but,reset.but,q.but,sticky=\"e\")",117],["return(q)",117],["#determine q value threshold or p value threshold",115],["q(\"no\", runLast = FALSE)",104],["q(save=\"no\")",104],["q",88]]},{"word":"qr","context":[["if(!is.qr(qr)) stop(\"argument is not a QR decomposition\")",77],["if(!is.qr(qr)) stop(\"argument is not a QR decomposition\")",77],["stop(\"'qr' and 'y' must have the same number of rows\")",56],["warning(gettextf(\"method = '%s' is not supported. Using 'qr'\", method),",48],["as.double(qr$qraux),",43],["k <- as.integer(qr$rank)",39],["as.double(qr$qr),",38],["as.double(qr$qr),",38],["n <- as.integer(nrow(qr$qr))",35],["n <- as.integer(nrow(qr$qr))",35]]},{"word":"query","context":[["query <- parseQueryString(session$clientData$url_search)",113],["rs <- dbSendQuery(con,query)",83],["if(bool(query[i]))",77],["query <- dbSendQuery(con, \"",68],["return(query)",64],["query = \"",60],["games <- fetch(query,n=-1)",55],["print(query)",53],["#count the query sequeces",50],["query <- gsub(\"`obj`\", obj, query)",48]]},{"word":"quote","context":[["quote=FALSE,",329],["quote = FALSE,",157],["m[[1L]] <- quote(stats::model.frame)",150],["quote = TRUE,",103],["quote = FALSE)",90],["quote=FALSE,row.names=FALSE)",77],["print.gap = 2, quote = FALSE)",75],["quote = FALSE,row.names = FALSE,col.names=FALSE)",66],["mf[[1L]] <- quote(stats::model.frame)",65],["quote = quote,",59]]},{"word":"r","context":[["#  http://www.r-project.org/Licenses/",4000],["r",845],["return(r)",430],["source(\"../../scripts/h2o-r-test-setup.R\")",427],["source(\"../../../scripts/h2o-r-test-setup.R\")",377],["#```r",260],["```{r}",204],["\" (r\", R.version[[\"svn rev\"]], \")\\n\", sep = \"\")",183],["# R (http://r-project.org/) Econometrics for Performance and Risk Analysis",166],["cat(\"num. phenotype samples =\",sum(!is.na(r)),\"\\n\")",93]]},{"word":"random","context":[["twoord.plot(1:length(decomposed$random), decomposed$random,",236],["twoord.plot(1:length(decomposed$random), decomposed$random,",236],["random = ~1|device_info_serial, method = \"ML\")",127],["# #' ##-- ==>  Define data, use random,",82],["method <- \"random\";",72],["x <- decomposed$random[!is.na(decomposed$random)]",56],["x <- decomposed$random[!is.na(decomposed$random)]",56],["random = ~1|device_info_serial , correlation = corARMA(q = 2), method = \"ML\")",56],["type <- rep(\"random\",nrow(df))",51],["random = ~1|device_info_serial , method = \"ML\")",51]]},{"word":"range","context":[["range <- count:(count+length(new.list)-1)",187],["result[range] <- new.list",187],["# a reasonable range of expression log2 ratios",96],["ok <- switch(.Generic, max = , min = , range = TRUE, FALSE)",67],["my.range <- env$my.range",51],["my.range <- env$my.range",51],["assign(state[d],X.t0[my.range[t],d])",45],["# Set color range",44],["ylim <- if (is.null(ylim)) range(xy$y[is.finite(xy$y)]) else ylim",43],["xlim <- if (is.null(xlim)) range(xy$x[is.finite(xy$x)]) else xlim",43]]},{"word":"rank","context":[["rank.related.requirements = rank.related.requirements,",73],["rank.related.requirements = rank.related.requirements,",73],["p <- object$rank",72],["rank.related.requirements = NULL,",71],["## Return hospital name in that state with the given rank",59],["## For each state, find the hospital of the given rank",56],["fitted.values = 0 * y, weights = w, rank = 0L,",39],["k <- as.integer(qr$rank)",39],["#wilcox rank sum test, and logistic regression are also provided: \"wilcox\", \"regression\"",37],["p <- model$rank",36]]},{"word":"raw","context":[["type=\"raw\"",77],["bytes <- raw()",63],["mxData(observed=data, type=\"raw\"),",51],["min.raw <- -max.raw",44],["min.raw <- -max.raw",44],["xv <- scale01(as.numeric(lv), min.raw, max.raw)",42],["xv <- scale01(as.numeric(lv), min.raw, max.raw)",42],["# each of these elements is a raw data set of a corresponding study, for example",42],["# 4th element - a dataset names and labels of raw variables + added metadata for all studies",41],["# \"norm\" or \"raw\", then it is assumed that we have to",41]]},{"word":"rbind","context":[["ewsLine <- rbind(NA, ewsLine)",193],["do.call(rbind,",161],["meantablerf <- rbind(meantablerf,mean(min[,2])) #zmean RF closest trees between pruned and deleted sets",137],["meantablepd <- rbind(meantablepd,mean(min[,3])) #zmean PD closest trees between pruned and deleted sets",137],["rbind(",132],["summaryInfo = rbind( summaryInfo ,",97],["chk.all.bac <- rbind(chk.total.bac, chk.stream.bac, chk.forest.bac,",96],["chk.pop <- rbind(data.frame(location = \"forest\", pop = chk.pop.on.land.Forest),",96],["chk.all.accum <- rbind(chk.forest.accum,",96],["chk.all.pop <- rbind(chk.total.pop, chk.stream.pop, chk.forest.pop,",96]]},{"word":"rdname","context":[["#' @rdname h2o.metric",300],["#' @rdname ModelAccessors",234],["#' @rdname H2OModelMetrics-class",183],["#' @rdname Frame",137],["#' @rdname string-methods",106],["#' @rdname H2OModel-class",99],["#' @rdname accessor-methods",85],["#' @rdname Node-class",82],["#' @rdname collector",82],["#' @rdname H2OFrame-Extract",70]]},{"word":"rds","context":[["NEI <- readRDS(\"summarySCC_PM25.rds\")",201],["SCC <- readRDS(\"Source_Classification_Code.rds\")",182],["\"Meta\", \"package.rds\"))",66],["pfile <- system.file(\"Meta\", \"package.rds\", package = package,",54],["if (grepl(\"[.]rds$\", f)) f <- readRDS(f)",48],["if(file_test(\"-f\", rds)) {",46],["rds <- file.path(dir, \"Meta\", \"Rd.rds\")",46],["rds <- file.path(dir, \"Meta\", \"Rd.rds\")",46],["\"symbols.rds\"))",44],["fv <- file.path(\"build\", \"vignette.rds\")",44]]},{"word":"re","context":[["# re-scale ews statistic",193],["checkingLog(Log, \"re-building of vignette outputs\")",84],["m <- gregexpr(re, s)",63],["#\tre-name the following:",46],["messageLog(Log, \"re-saving image files\")",44],["## Determine encoding and re-encode if necessary and possible.",43],["stop(gettextf(\"package %s was built before R 3.0.0: please re-install it\",",40],["warning(\"'DESCRIPTION' has an 'Encoding' field and re-encoding is not possible\", call.=FALSE)",40],["for(re in ignore[nzchar(ignore)])",38],["print(re)",38]]},{"word":"read","context":[["fm_test_real <- t(as.matrix(read.table('../data/fm_test_real.dat')))",110],["fm_train_real <- t(as.matrix(read.table('../data/fm_train_real.dat')))",110],["# list the user inputs the tab depends on (easier to read the code)",94],["dat <- read.csv(text=input$text, sep=\"\\t\")",79],["data <- read.csv(\"outcome-of-care-measures.csv\", colClasses = \"character\")",69],["# read data",67],["dat <- read.table(text=",64],["fm_train_dna <- as.matrix(read.table('../data/fm_train_dna.dat'))",59],["test_data <- as.data.frame(read.csv(file = test_data$datapath,header = T))",55],["train_data <- as.data.frame(read.csv(file = train_data$datapath,header = T))",55]]},{"word":"readLines","context":[["lines <- readLines(file, warn = FALSE)",145],["lines <- readLines(file)",112],["lines <- readLines(outfile, warn = FALSE)",96],["readLines(\"stdin\",n = 1)",92],["inputdat <- readLines(paste0(sMarxanDir,\"/input.dat\"))",69],["sLine <- readLines(con=infile,n=1)",65],["out <- readLines(outfile, warn = FALSE)",64],["lines <- readLines(f, warn = FALSE)",63],["if(length(grep(pat, readLines(f, warn = FALSE), useBytes = TRUE))",60],["inputdat <- readLines(paste(sMarxanDir,\"/input.dat\",sep=\"\"))",57]]},{"word":"received","context":[["# You should have received a copy of the GNU General Public License",2410],["##' received from the API server",498],["## You should have received a copy of the GNU General Public License",362],["# You should have received a copy of the GNU Library General",291],["#  You should have received a copy of the GNU General Public License",288],["# You should have received a copy of the GNU Lesser General Public License",263],["#    You should have received a copy of the GNU General Public License",221],["# Unless you have received this program directly from RStudio pursuant",175],["#You should have received a copy of the GNU General Public License",171],["# You should have received a copy of the GNU General Public License along with",148]]},{"word":"record","context":[["record = system.time(gcFirst = T,",119],["record, rescale, xpinch, ypinch,",35],["## If an installed package has a namespace, we need to record the S3",34],["## record some of the options used.",32],["\"      --timings         record timings for examples\",",32],["#record the best models in each bootstrap sample",32],["## record in the log what options were used",32],["## now check lengths, as tarballs can only record up to 100 bytes",30],["## predicate so that we record the name of the startup function in",30],["## predicate so that we record the name of the unload function in",30]]},{"word":"recursive","context":[["#' files <- dir('./inst/examples', recursive=TRUE, full.names=TRUE, pattern='\\\\.xml$')",337],["full.names = TRUE, recursive = TRUE)",238],["unlink(build_dir, recursive = TRUE)",204],["recursive = TRUE))",180],["fullNames=FALSE, recursive=TRUE) {",136],["recursive=recursive),",103],["recursive=recursive),",103],["recursive = TRUE)",98],["fullNames=fullNames, recursive=recursive)",90],["fullNames=fullNames, recursive=recursive)",90]]},{"word":"red","context":[["geom_point(size = 3, color=\"red\") +",289],["colours2=c( \"week0_EEDheto\"=\"red\",  \"week0_EEDko\"=\"red4\",   \"week4_EEDheto\"=\"skyblue\",  \"week4_EEDko\"=\"blue\" ),",94],["col=\"red\")",89],["col = \"red\",",82],["geom_line(size=0.5, colour=\"red\") + geom_hline(yintercept = 0.2, colour=\"blue\") +",76],["colours2=c(\"red\",  \"red4\",   \"blue\",    \"blue4\" ),",72],["col = \"red\")",70],["lty=1, lcol=\"red\")",65],["lty=c(1, 1, 1), col=c(\"red\", \"blue\", \"green4\"), bty=\"n\")",65],["lty=c(1, 1), col=c(\"red\", \"green4\"), bty=\"n\")",65]]},{"word":"redistribute","context":[["#  This program is free software; you can redistribute it and/or modify",5207],["# This program is free software: you can redistribute it and/or modify",682],["# This program is free software; you can redistribute it and/or modify",594],["# This library is free software; you can redistribute it and/or",268],["# Xpose 4 is free software; you can redistribute it and/or",234],["# This program is free software; you can redistribute it and/or",200],["#    This program is free software: you can redistribute it and/or modify",180],["#This program is free software: you can redistribute it and/or modify",172],["## This program is free software; you can redistribute it and/or modify",160],["# icd is free software: you can redistribute it and/or modify",135]]},{"word":"references","context":[["#' @references",1938],["#'@references",133],["##' @references",70],["#' @references See citation(\"microbiome\")",51],["#' @references Basel Committee: The standardised approach for measuring counterparty credit risk exposures",39],["#' @references Carl Bacon, \\emph{Practical portfolio performance measurement",37],["as(references, 'references')",34],["as(references, 'references')",34],["slot(.Object, 'references') <-",34],["references = new('references'),",34]]},{"word":"remove","context":[["\"\\nPlease remove them from your package.\\n\")",91],["file.remove(list.files(pattern=\".png\"))",88],["remove(\"a\", \"b\")",87],["if (exists(\"C_A\")) remove(\"C_A\")",76],["if (exists(\"A_A\")) remove(\"A_A\")",76],["if (exists(\"C_U\")) remove(\"C_U\")",76],["if (exists(\"A_U\")) remove(\"A_U\")",76],["\"Please remove them from your package.\\n\")",60],["return(remove(list = name, envir = .classTable))",52],["# if there are extra rows that have been added by \"dragging\" the control, remove them",46]]},{"word":"rep","context":[["parameter <- rep(n,nrow(level))",101],["grep <- rep(grep, length.out=depth(gPath))",90],["n <- rep.int(1, nobs)",77],["rep(\"week4_EEDheto\", numOfColumns1),    rep(\"week4_EEDko\", numOfColumns1)   ),",76],["rep(\"week4_EEDheto\", numOfColumns1),    rep(\"week4_EEDko\", numOfColumns1)   ),",76],["sampleType2=c( rep(\"week0_EEDheto\", numOfColumns1),    rep(\"week0_EEDko\", numOfColumns1),",76],["sampleType2=c( rep(\"week0_EEDheto\", numOfColumns1),    rep(\"week0_EEDko\", numOfColumns1),",76],["sampleType2=c( rep(\"banding\", numOfColumns1),    rep(\"sham\", numOfColumns1)  ),",68],["sampleType2=c( rep(\"banding\", numOfColumns1),    rep(\"sham\", numOfColumns1)  ),",68],["phi       = rep(1, 6),",67]]},{"word":"repos","context":[["repos <- getOption(\"repos\")",117],["repos <- getOption(\"repos\")",117],["contriburl = contrib.url(repos, type),",107],["function(pkgs, lib, repos = getOption(\"repos\"),",80],["function(pkgs, lib, repos = getOption(\"repos\"),",80],["install.packages(pkg_dir,type=\"source\",repos=NULL)",72],["root=ifelse(.Platform$OS.type==\"windows\",\"c:/repos\",\"~/Repos\");",57],["repos <- NULL",50],["options(repos = repos)",46],["options(repos = repos)",46]]},{"word":"representation","context":[["representation(",267],["representation = representation(",172],["representation = representation(",172],["representation=representation(",141],["representation=representation(",141],["representation = representation(),",30],["representation = representation(),",30],["setClass(\"classPrototypeDef\", representation(object = \"ANY\", slots = \"character\", dataPart = \"logical\"),",27],["setClass(\"A\", representation(aa = \"integer\"))",27],["## either a basic class or something with the same representation",27]]},{"word":"require","context":[["require(ggplot2)",1390],["require(plyr)",775],["require(OpenMx)",577],["require(dplyr)",535],["require(data.table)",464],["require(grid)",439],["require(reshape2)",372],["require(MASS)",310],["require(scales)",302],["require(RColorBrewer)",301]]},{"word":"required","context":[["# Unless required by applicable law or agreed to in writing, software",1318],["#   Unless required by applicable law or agreed to in writing, software",729],["# Unless required by applicable law or agreed to in writing,",605],["# Load the required libraries",138],["## variables) required to compute the correlation between",95],["# Define server logic required to draw a histogram",93],["stop(\"The Specs argument is required.\", file=LogFile,",88],["# check required information",86],["# Load required packages",75],["if(missing(x)) stop(\"The x argument is required.\")",68]]},{"word":"res","context":[["res",3478],["return(res)",2592],["res[[1]]$message)) > 0)",321],["res <- list()",288],["if (inherits(res, \"try-error\"))",269],["res <- try(",268],["res <- system(cmd)",198],["print(res)",189],["invisible(res)",185],["res <- NULL",184]]},{"word":"reshape2","context":[["library(reshape2)",1774],["require(reshape2)",372],["library(\"reshape2\")",134],["#' @importFrom reshape2 melt",66],["#'@import reshape2",48],["install.packages(\"reshape2\")",47],["require(\"reshape2\")",45],["#' @import reshape2",45],["library('reshape2')",41],["library(reshape2, quietly = TRUE)",34]]},{"word":"residuals","context":[["r <- z$residuals",58],["r <- object$residuals",52],["resid <- as.matrix(object$residuals)",42],["#' @param mu.link object for which the extraction of model residuals is meaningful.",36],["n <- length(fit$residuals)",36],["ans$residuals <- r",34],["# residuals",33],["\"residuals\", \"effects\", \"rank\", \"fitted.values\", \"assign\", \"qr\",",33],["return(list(coefficients = numeric(), residuals = y,",30],["res <- residuals(lm.model$lm.fit)",30]]},{"word":"response","context":[["##' @param alwaysRetry Whether to always retry even when no response is",498],["##' response is returned (using \\code{RJSONIO::fromJSON}).",498],["#print(.self$formatResponse(response))",282],["response <- attr(attr(mf, \"terms\"), \"response\")",126],["response <- attr(attr(mf, \"terms\"), \"response\")",126],["return(response)",100],["response=1 #1:1000 imbalance",80],["insen_ix = which(as.character(curr_info$response)==\"insensitive\")",74],["sen_ix = which(as.character(curr_info$response)==\"sensitive\")",74],["Log.info(\"Converting the response column to a factor...\")",63]]},{"word":"result","context":[["return(result)",2964],["result",2535],["return (result)",429],["result[[good.records.found]] <- new.event",376],["result <- list()",336],["result <- NULL",296],["result <- character()",215],["result <- result[-deleters]",189],["result <- result[-deleters]",189],["result[range] <- new.list",187]]},{"word":"resultLog","context":[["} else resultLog(Log, \"OK\")",1491],["if (!any) resultLog(Log, \"OK\")",402],["resultLog(Log, \"OK\")",326],["resultLog(Log, \"SKIPPED\")",173],["resultLog(Log, \"NO\")",96],["resultLog(Log, \"EXISTS but not correct format\")",82],["resultLog(Log, \"ERROR\")",76],["else resultLog(Log, \"OK\")",52],["resultLog(Log, desc[\"Type\"])",32],["if (!do_examples) resultLog(Log, \"SKIPPED\")",32]]},{"word":"results","context":[["return(results)",842],["results",282],["if ( ! .shouldContinue(callback(results)))",273],["results <- list()",269],["## output results in tables to pdf",190],["## combining results",158],["results <- c(results,list(data.frame(factor,type,level,estimate)))",102],["results <- c(results,list(data.frame(factor,type,level,estimate)))",102],["### Save results",102],["# Compare OpenMx results to Mx results",98]]},{"word":"ret","context":[["return(ret)",1158],["ret",991],["ret = \"\"",184],["result <- createArray(ret)",176],["ret = base.path2",176],["ret = paste0(base.path1,\"/\")",158],["ret <- list()",146],["return (ret)",86],["if (! ret$success)",71],["ret[sapply(ret, is.null)] <- NULL",67]]},{"word":"return","context":[["return(NULL)",5221],["return()",4703],["return(out)",3387],["return(result)",2964],["return(FALSE)",2961],["return(x)",2931],["return(res)",2592],["return(TRUE)",2383],["return(data)",2047],["return(invisible())",1209]]},{"word":"rgl","context":[["library(\"rgl\")",1720],["library(rgl)",201],["rgl.close()",55],["require(rgl)",47],["options(rgl.useNULL=TRUE)",37],["vertices <- rgl.attrib(id, \"vertices\")",36],["#library(rgl)",32],["rm(offset); rgl.clear(); rgl.viewpoint(theta=45, phi=30, fov=60, zoom=1)",26],["rm(offset); rgl.clear(); rgl.viewpoint(theta=45, phi=30, fov=60, zoom=1)",26],["rgl.open()",25]]},{"word":"right","context":[["if (oneSided == \"right\") {",302],["legend.position=\"right\",",207],["#  All right reserved.",120],["# then plot 1 will go in the upper left, 2 will go in the upper right, and",110],["} else if (oneSided == \"right\") {",83],["layout.widths = list(left.padding = 0, right.padding = 0),",76],["# Are we in the right universe?",64],["oneSided <- \"right\"",55],["Log.info(\"Checking left and right: \")",46],["\"</td><td style=\\\"text-align: right\\\">\",",40]]},{"word":"rm","context":[["rm(list=ls())",2467],["rm(list = ls(pattern = \"tmp\\\\.*\"))",1348],["rm(list = ls())",1170],["rm(tmp.gt)",592],["rm(list=ls(all=TRUE))",377],["rm(x)",251],["na.rm = TRUE)",197],["rm(tmp)",161],["Discrepancy.Statistic <- round(mean(Summ[,8], na.rm=TRUE),3)}",140],["system(paste(\"rm -rf\",cran_pkg_unuseful,sep=\" \"))",139]]},{"word":"rnorm","context":[["y <- rnorm(10)",116],["x <- rnorm(100)",99],["x <- rnorm(10)",85],["rnorm(4)",57],["y <- rnorm(n)",50],["UMatrix <- matrix(rnorm(numberSubjects*numberIndicators, mean=0, sd=1), numberSubjects, numberIndicators)",49],["x <- rnorm(n)",36],["y <- x + rnorm(10)",33],["y <- rnorm(100)",32],["epsilon.rep <- matrix(rnorm(N*S), N, S)",30]]},{"word":"root","context":[["data$ccd <- XML::xmlName(root)",608],["root <- XML::xmlRoot(doc)",312],["root.state = root.state,",127],["root.state = root.state,",127],["stationary.root = TRUE,",95],["root=ifelse(.Platform$OS.type==\"windows\",\"c:/repos\",\"~/Repos\");",57],["root <- xmlRoot(doc)",56],["value.root = NA,",53],["adj.root = 0,",53],["value.root = 10^(-2),",50]]},{"word":"round","context":[["dil = round(",1864],["dil = round(chk.dil *",506],["round(Mo0[[\"LP\"]],1), \"\\n\", sep=\"\",",227],["Discrepancy.Statistic <- round(mean(Summ[,8], na.rm=TRUE),3)}",140],["\"Current:\", round(Mo0[[\"parm\"]][j]),",129],["\"Proposed:\", round(prop[j],5),",102],["else sprintf(\" [%dm/%dm]\", round(sum(td[-3L])), round(td[3L]))",53],["else sprintf(\" [%ds/%ds]\", round(sum(td[-3L])), round(td[3L]))",53],["else sprintf(\" [%ds/%ds]\", round(sum(td[-3L])), round(td[3L]))",53],["if(WINDOWS) sprintf(\" [%dm]\", round(td[3L]))",53]]},{"word":"row","context":[["row.names=FALSE)",515],["#' The source name and the CCD ID are also included in each row to assist in identifying the source of the data.",304],["row.names=FALSE,",211],["print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,",190],["print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,",190],["row.names = FALSE)",185],["row.names = FALSE,",144],["tkgrid(DimHlp.but, row=4, column=2,sticky=\"w\")",140],["anova.rows[[length(anova.rows) + 1]] <- row",129],["tkgrid(DimHlp.but, row=5, column=2,sticky=\"w\")",128]]},{"word":"rownames","context":[["# all rownames should follow \"TCGA.02.0014\" format.  no multiply-sampled suffixes yet",122],["tmp.table <- tableGrob(chk.all.accum, show.rownames = FALSE)",112],["tmp.table <- tableGrob(chk.all.bac, show.rownames = FALSE)",112],["tmp.table <- tableGrob(chk.all.pop, show.rownames = FALSE)",112],["tmp.table <- tableGrob(chk.RAOCUT.pop, show.rownames = FALSE)",92],["rownames(dfCluster) = dfCluster$gene",70],["rownames(performances)=c(\"a1\", \"a2\", \"a3\", \"a4\", \"a5\", \"a6\");",68],["rownames(res) <- NULL",66],["rownames(cv.mat) = obs",56],["#rownames(m) = rownames(mCounts)",51]]},{"word":"rows","context":[["chk.bac[tmp.rows, \"accum.bac\"] <- chk.bac[tmp.rows, \"total.bac\"] /",288],["chk.bac[tmp.rows, \"accum.bac\"] <- chk.bac[tmp.rows, \"total.bac\"] /",288],["# nrow: Number of rows needed, calculated from # of cols",192],["tmp.rows <- grep(\"TRUE\", with(chk.bac,",180],["chk.bac[tmp.rows, \"accum.bac\"] <-",180],["anova.rows[[length(anova.rows) + 1]] <- row",129],["anova.rows[[length(anova.rows) + 1]] <- row",129],["tmp.rows <- grep(\"TRUE\", with(chk.bac, location == \"forest\"))",112],["\"replacement has %d rows, data has %d\"),",108],["rows <- attr(x, \"row.names\")",97]]},{"word":"rs","context":[[".rs.makeCompletions(token = token,",114],["return(.rs.emptyCompletions())",113],["dbClearResult(rs)",97],["rs <- dbSendQuery(con,query)",83],["completions <- .rs.appendCompletions(",74],["result <- .rs.makeCompletions(",72],["inDirectory = .rs.getProjectDirectory(),",63],["return(.rs.makeCompletions(token = token,",46],["result <- .rs.emptyCompletions()",45],["if(length(rs) == 0){",44]]},{"word":"run","context":[["if (perform == \"run\") {",190],["## FIXME: this does not need to be run in another process",128],["# To run a while loop to generate different plots",108],["#These first few lines run only when the file is run in RStudio, !!NOT when an Rmd/Rnw file calls it!!",95],["#These first few lines run only when the file is run in RStudio, !!NOT when an Rmd/Rnw file calls it!!",95],["new.runno <- gsub(\"run\", \"\", model)",85],["run = function() {",84],["# run",82],["## Not run:",74],["## End(Not run)",73]]},{"word":"runif","context":[["log.u <- log(runif(1))",133],["r <- h2o.runif(cars,seed=seed)",70],["Log.info(paste0(\"runif seed: \",seed))",69],["s <- h2o.runif(data.hex)    # Useful when number of rows too large for R to handle",68],["p.sid <- h2o.runif(pros.hex)",60],["runif(100); print(runif(4))",57],["runif(100); print(runif(4))",57],["runif(1)",52],["c.sid <- h2o.runif(cars.hex)",51],["u <- log(runif(1)) < (Mo1[[\"LP\"]] - Mo0[[\"LP\"]])",46]]},{"word":"rval","context":[["rval",604],["return(rval)",251],["n=n, rval=double(n), NAOK=TRUE, package=\"gsw\")$rval",102],["n=n, rval=double(n), NAOK=TRUE, package=\"gsw\")$rval",102],["dim(rval) <- dim(SA)",85],["rval <- NULL",40],["attr(rval, \"mheader\") <- paste(mheader, collapse = \"\\n\")",38],["rval <- paste(...)",38],["if(length(rval) == 1L) rval <- rval[[1L]]",38],["if(length(rval) == 1L) rval <- rval[[1L]]",38]]},{"word":"s","context":[["stop(gettextf(\"directory '%s' does not exist\", dir),",379],["stop(gettextf(\"directory '%s' does not contain R code\",",357],["#' @section Topic(s):",347],["#' @param fileList - The path/file name(s) of the XML file(s) to process.",337],["#' The semantic reference(s) for this data:",337],["#' @param fileList - The path/file name(s) of the XML file(s) to process.",337],["s",281],["stop(gettextf(\"directory '%s' does not exist\", dir), domain = NA)",232],["url <- sprintf(\"hdfs://%s%s\", hdfs_name_node, hdfs_data_file)",208],["url <- sprintf(\"hdfs://%s%s\", hdfs_name_node, hdfs_data_file)",208]]},{"word":"sMarxanDir","context":[["inputdat <- readLines(paste0(sMarxanDir,\"/input.dat\"))",69],["sMarxanDir <<- \"\"",60],["inputdat <- readLines(paste(sMarxanDir,\"/input.dat\",sep=\"\"))",57],["inputdat[iINPUTDIRparam] <- paste0(\"INPUTDIR \",sMarxanDir,\"/input\")",46],["inputdat[iOUTPUTDIRparam] <- paste0(\"OUTPUTDIR \",sMarxanDir,\"/output\")",46],["sAppendSummary <<- paste0(sMarxanDir,\"/output/output_SPFsummary_BLM\",ruserblm,\"_Targ\",rusertarg,\".csv\")",45],["sAppendSummary <<- paste0(sMarxanDir,\"/output/output_BLMsummary_SPF\",ruserspf,\"_Targ\",rusertarg,\".csv\")",45],["sAppendSummary <<- paste0(sMarxanDir,\"/output/output_Targsummary_BLM\",ruserblm,\"_SPF\",ruserspf,\".csv\")",45],["setwd(paste0(sMarxanDir,\"/core\",i))",40],["thetable <- read.csv(paste0(sMarxanDir,\"/output/output_sum.csv\"))",36]]},{"word":"sQuote","context":[["sQuote(f)),",354],["sQuote(getPackageName(where))),",166],["sQuote(xx)), msg)",160],["sQuote(xx))",147],["sQuote(what),",146],["sQuote(package)),",119],["sQuote(package),",109],["sQuote(f),",105],["sQuote(name)),",103],["sQuote(basename(bad_vignettes))),",96]]},{"word":"same","context":[["Log.info(\"Now do the same filter & subset, but select complement of columns.\")",285],["## Run the same test with compression",69],["# Just need to test that output is the same as if the GTuples were GRanges",67],["stop(\"'x' and 'y' must have the same length\")",57],["stop(\"'qr' and 'y' must have the same number of rows\")",56],["stop(\"'x' and 'y' and 'id' must all be same length\")",50],["stop(\"'x' and 'y' and 'id.lengths' must specify same overall length\")",50],["stop(\"'x' and 'y' must be same length\")",50],["warning(gettextf(\"Not all arguments are of the same length, the following need to be recycled: %s\",",48],["\"formal arguments in method and generic do not appear in the same order\",",44]]},{"word":"sample","context":[["# dsL <- dsL[dsL$id %in% sample(unique(dsL$id), 100), ]",90],["d <- dsL[dsL$id %in% sample(unique(dsL$id), sample_size), ]",86],["cr <- sample(creds, 1)",69],["train.pats = sample(train.pats,size=length(train.pats),replace=FALSE)",67],["seed <- sample(1:1000000, 1)",65],["dplyr::filter(id %in% sample(unique(id),10)) %>%",57],["# Align the feature in the sample with the one in the model",56],["# Add it to another list (it will be used to adjust the column names in the final sample peaklist)",56],["# Set the default presence of the signal in the sample to FALSE",56],["# If after all the signal in the model is not found in the sample",56]]},{"word":"samples","context":[["cat(\"num. phenotype samples =\",sum(!is.na(r)),\"\\n\")",93],["# To filter out samples based on donor information",88],["#bootstrap samples#",78],["#output data:row as genes and col as samples",66],["#input data: row as genes and col as samples",66],["post.prob.log <- t(yp.sp.log$p.y.predictive.samples)",54],["BarcodeSample <- sample.tbl[match(samples, sample.tbl[,1]), 2]",50],["cov.model = cov.model, n.samples = iters,",50],["#this function only generates BS samples",48],["# pca on samples i.e. covariance matrix of m",48]]},{"word":"sapply","context":[["ind <- as.logical(sapply(exprs,",166],["any(sapply(c(...), function(expr)omnitest(expr)))",142],["sapply(",115],["ind <- as.logical(sapply(db_usages,",98],["tmp<- na.omit(sapply(argv,function(arg)",93],["leg <- which(sapply(tmp$grobs, function(x) x$name) == \"guide-box\")",84],["(cl <- sapply(AB, class))",70],["n = (which(sapply(lSigGenes.adj, length) >= 10)) + 1",69],["ret[sapply(ret, is.null)] <- NULL",67],["keep <- sapply(e, function(x) deparse(x)[1L] != \"...\")",66]]},{"word":"save","context":[["quit(save=\"no\", status=1)",133],["q(save=\"no\")",104],["savefile <- paste(outfile, \"save\", sep = \".\" )",86],["save <- startCapture()",60],["d1$save(paste(fileName,\".html\",sep=\"\"), cdn = TRUE)",56],["parameters.to.save = model_parameters,",56],["if(save==TRUE){dev.off()}",49],["q(save = \"no\")",48],["save(BC2116_Global_Summary, file=\"Summary.RData\")",46],["# save results",45]]},{"word":"sc","context":[["#' sc <- sparkR.init()",595],["#' sqlContext <- sparkRSQL.init(sc)",214],["# sc <- sparkR.init()",154],["#' rdd <- parallelize(sc, 1:10)",89],["sc <- sparkR.init()",48],["#' rdd <- parallelize(sc, 1:10, 2L)",40],["Sstar <- sc %*% S %*% sc",38],["Sstar <- sc %*% S %*% sc",38],["sc <- diag(1/sqrt(Psi))",38],["rdd <- textFile(sc, fileName)",33]]},{"word":"scale","context":[["# re-scale ews statistic",193],["ma.scale=c(-1.4,2.3,-2) # scaling of the MA filter",110],["if(any(scale <= 0)) stop(\"The scale parameter must be positive.\")",86],["if(any(scale <= 0)) stop(\"The scale parameter must be positive.\")",86],["if(scale > 0) paste(\"\\nscale: \", format(scale), \"\\n\"))",60],["if(scale > 0) paste(\"\\nscale: \", format(scale), \"\\n\"))",60],["pr.out = prcomp(t(m), scale=T)",51],["if (scale == \"row\") {",47],["else match.arg(scale)",44],["warning(\"specify 'rate' or 'scale' but not both\")",44]]},{"word":"sd","context":[["datac$se <- datac$sd / sqrt(datac$N)  # Calculate standard error of the mean",61],["signif(sd(x),digits=4),",55],["UMatrix <- matrix(rnorm(numberSubjects*numberIndicators, mean=0, sd=1), numberSubjects, numberIndicators)",49],["sd(x)",44],["kurt <- m4/(sd(x, na.rm=TRUE)^4)-3",40],["skew <- m3/(sd(x, na.rm=TRUE)^3)",40],["# N, mean, and sd",39],["sd   = sd     (xx[[col]], na.rm=na.rm)",38],["sd   = sd     (xx[[col]], na.rm=na.rm)",38],["signif(sd(y),digits=4),",32]]},{"word":"se","context":[["(test <- test[c('est', 'se', \"est_se\", 'pval')])",102],["(test <- test[ ,c(\"est\", \"se\",\"est_se\", \"pval\")])",86],["predict(fit, data.frame(x=x), se=TRUE)",76],["predict(fit, type=\"terms\", se=TRUE)",76],["datac$ci <- datac$se * ciMult",67],["datac$se <- datac$sd / sqrt(datac$N)  # Calculate standard error of the mean",61],["if(se) {",56],["geom_smooth(method=lm, se=F) +",42],["dt2[, uui := mean + 1.96 * se]",40],["dt2[, lui := mean - 1.96 * se]",40]]},{"word":"search","context":[["s <- search()",73],["sp <- search()",54],["\"search: \",   session$clientData$url_search,   \"\\n\",",51],["Log.info(lapply(names(grid_space), function(n) paste0(\"The \",n,\" search space: \", grid_space[n])))",49],["Log.info(lapply(names(grid_space), function(n) paste0(\"The provided \",n,\" search space: \", grid_space[n])))",47],["Log.info(lapply(names(grid_space), function(n) paste0(\"The expected \",n,\" search space: \", expected_grid_space[n])))",47],["Log.info(lapply(names(new_grid_space), function(n) paste0(\"The new \",n,\" search space: \", new_grid_space[n])))",40],["attach(compat, name=\"compat\", pos = length(search()),",33],["if (!pname %in% search())",33],["## only 'Depends' are guaranteed to be on the search path, but",33]]},{"word":"season","context":[["## season 1",152],["## season 2",152],["chk.season.2.RAOCUT.elk",48],["chk.season.1.RAOCUT.elk",48],["data.frame(month = chk.Season.2.Months, season = 2))",46],["data.frame(season = 1,",46],["c(season == 1 & location == \"RAOCUT\")))",46],["c(season == 2 & location == \"pasture\")))",46],["data.frame(season = 2,",46],["c(season == 2 & location == \"forest\")))",46]]},{"word":"section","context":[["#' @section Topic(s):",347],["\"See section 'Package structure'\",",189],["#'@section Slots:",90],["#' @section Details:",79],["#' @section Sources:",76],["#' @section Revisions:",76],["#' @section Requirements:",62],["#' @section References:",61],["gettextf(\"See section %s in '%s'.\",",60],["wrapLog(gettextf(\"See section %s in '%s'.\",",60]]},{"word":"see","context":[["# along with this program.  If not, see <http://www.gnu.org/licenses/>.",649],["# directory under \\share\\licenses. If not, see http://www.gnu.org/licenses/.",234],["\"This is free software; see the GNU General Public License version 2\",",183],["# for full details see the file COPYING",173],["#    along with this program.  If not, see <http://www.gnu.org/licenses/>.",145],["#along with this program.  If not, see <http://www.gnu.org/licenses/>.",137],["# along with icd. If not, see <http:#www.gnu.org/licenses/>.",135],["# along with Rcpp.  If not, see <http://www.gnu.org/licenses/>.",133],["# along with rkwarddev.  If not, see <http://www.gnu.org/licenses/>.",121],["#   see R's copyright and license files",117]]},{"word":"seealso","context":[["#' @seealso",617],["##' @seealso \\code{\\link{dxHTTPRequest}}",498],["#'@seealso",92],["#' @seealso \\code{\\link{h2o.month}}",54],["##' @seealso",51],["# \\seealso{",47],["#' @seealso \\code{\\link{RBM}}",47],["#' @seealso \\code{\\link{predict.H2OModel}} for prediction.",38],["##seealso<<",38],["#' @seealso \\href{../doc/tmap-nutshell.html}{\\code{vignette(\"tmap-nutshell\")}}",36]]},{"word":"seed","context":[["set.seed(1)",1932],["set.seed(123)",971],["set.seed(seed)",860],["set.seed(seed)",860],["set.seed(42)",627],["set.seed(1234)",583],["set.seed(0)",311],["if (!is.null(seed)) {",213],["set.seed(mcmc.seed)",203],["set.seed(mcmc.seed)",203]]},{"word":"select","context":[["Log.info(\"Now do the same filter & subset, but select complement of columns.\")",285],["dplyr::select(cluster.id)",145],["select(",110],["select",108],["qry<-\"select",73],["#' \\cr \\code{\\link[dplyr]{select}}, \\code{\\link[dplyr]{slice}}",54],[".tkigraph.error(\"Please select exactly one graph\")",52],["validate(       need(!is.null(df), \"Please select a data set\"))",52],["##select differential genes across cancer types##",49],["dplyr::select(study_name, name, label_short,categories)",43]]},{"word":"selected","context":[["\"opened\", \"selected\", \"disabled\", \"icon\")),",212],["loaded = TRUE, opened = FALSE, selected = FALSE,",163],["selected = FALSE, disabled = FALSE, icon = \"fa fa-\"), .Names = c(\"loaded\",",129],["selected.table      <- c(\"2\")",126],["selected = NULL)",74],["gnos <- .tkigraph.get.selected()",66],["if(anyNA(cols)) stop(\"undefined columns selected\")",64],["\"opened\", \"selected\", \"disabled\", \"icon\")), children = structure(list(), class = \"AsIs\")), .Names = c(\"text\",",63],["\"opened\", \"selected\", \"disabled\", \"icon\")), children = structure(list(",59],["selected = 1),",53]]},{"word":"self","context":[[".self$incMessageId()",369],["str_data <- .self$makeData(.self$formatJson(list_param))",327],["str_data <- .self$makeData(.self$formatJson(list_param))",327],["#print(.self$formatResponse(response))",282],["return(invisible(.self))",187],["self",92],["if (inherits(self, \"ExternalReference\")) self = slot(self,\"ref\")",78],["if (inherits(self, \"ExternalReference\")) self = slot(self,\"ref\")",78],["if (inherits(self, \"ExternalReference\")) self = slot(self,\"ref\")",78],["return(.self)",71]]},{"word":"sep","context":[["sep = \"\")",816],["sep = \"\\n\")",542],["sep=\"\")",430],["cat( y, sep = \",\\n\" )",427],["\"\\n\", sep = \"\")",280],["sep = \"\"),",255],["sep = \"\"))",231],["round(Mo0[[\"LP\"]],1), \"\\n\", sep=\"\",",227],["writeMM(as(R, \"CsparseMatrix\"), paste(args[2], \"R\", sep=\"\"));",204],["sep=\"\\t\",",199]]},{"word":"seq","context":[["for (e in seq(from=1, to=nExp)) {",212],["layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),",201],["for (k in seq(from=1, to=nAssets)) {",177],["for (i in seq(from=1, to=nAssets)) {",169],["for (k in seq(from=0, to=nExp-1)) {",148],["axis(side=4, labels=F, at=log(seq(0.1:1, by = 0.1)), lwd.ticks=2, cex.axis=1.2, las=1)",113],["for (i in seq(from=step, to=step*numRows*numCols, by=step)) {",76],["for (i in seq(from=1, to=nAssets*nRuns, by=nAssets)) {",76],["probs = seq( 0, 1, 0.01 )",68],["bubble_plot_configs.BUBBLE_X_TICKS=seq(0,100,10),",66]]},{"word":"seq_along","context":[["for (i in seq_along(tr2)) {",278],["for(i in seq_along(ext)) {",156],["for (j in seq_along(ref2)) {",139],["for(i in seq_along(e)) Recall(e[[i]])",119],["for(i in seq_along(exprs)) find_bad_exprs(exprs[[i]])",106],["for(i in seq_along(classes)) {",90],["for(i in seq_along(methods)) {",88],["for (i in seq_along(x)) {",87],["for(i in seq_along(x)) {",84],["for (i in seq_along(vigns$docs)) {",83]]},{"word":"seq_len","context":[["for(i in seq_len(n)) {",156],["for (i in seq_len(n)) {",80],["tspan     = seq_len(10) - 1,",60],["for(i in seq_len(nrow(update))) {",57],["tspan   = seq_len(10) - 1,",48],["iseq <- seq_len(nrows)[i]",45],["blocks[-seq_len(i)] )",44],["i1 <- -seq_len(lag)",39],["for (j in seq_len(ydim)) {",36],["else for (i in seq_len(differences))",35]]},{"word":"server","context":[["##' received from the API server",498],["##' function which makes POST HTTP requests to the API server.",498],["##' @return If the API call is successful, the parsed JSON of the API server",498],["shinyApp(ui = ui, server = server)",124],["shinyApp(ui = ui, server = server)",124],["server <- function(input, output) {",122],["# This is the server logic for a Shiny web application.",105],["# Define server logic required to draw a histogram",93],["sourceDialect = \"sql server\",",90],["# server.R",79]]},{"word":"session","context":[["shinyServer(function(input, output, session) {",546],["query <- parseQueryString(session$clientData$url_search)",113],["server <- function(input, output, session) {",70],["progress <- shiny::Progress$new(session)",68],["function(input, output, session) {",58],["updateTextInput(session,",58],["updateSelectInput(session = session,",57],["updateSelectInput(session = session,",57],["shinyServer(function(input, output, session, clientData) {",52],["\"hostname: \", session$clientData$url_hostname, \"\\n\",",51]]},{"word":"set","context":[["set.seed(1)",1932],["set.seed(123)",971],["set.seed(seed)",860],["set.seed(42)",627],["set.seed(1234)",583],["##' providing the JSON string directly, you must set \\code{jsonifyData} to",498],["set.seed(0)",311],["set.seed(mcmc.seed)",203],["set.seed(476); ptm <- proc.time()",200],["set.seed(10)",168]]},{"word":"setClass","context":[["setClass(",704],["} else if(Call %in% c(\"setClass\", \"setMethod\")) {",33],["## at setClass() time, so prototype slot in classRepresentation can have that class",27],["setClass(\"A\", representation(aa = \"integer\"))",27],["setClass(\"classPrototypeDef\", representation(object = \"ANY\", slots = \"character\", dataPart = \"logical\"),",27],["setClass(\"MethodSelectionReport\",",26],["setClass(\".Other\", representation(label = \"character\"),",26],["setClass(\"classGeneratorFunction\",",25],["## Users should call setClass instead of this function.",22],["setClass <-",22]]},{"word":"setMethod","context":[["setMethod(",1937],["setMethod(\"initialize\",",107],["#' @importFrom methods setMethod",86],["setMethod(\"show\",",48],["setMethod(\"[\",",44],["setMethod(f, signature, NULL, where = where)",43],["setMethod(what, signature, method, where = where)",36],["## This may find things twice if a setMethod() with a bad FF",34],["} else if(Call %in% c(\"setClass\", \"setMethod\")) {",33],["setMethod(\"length\", \"A\", function(x) length(x@aa))",27]]},{"word":"setdiff","context":[["myX = setdiff(names(data.hex), myY)",88],["methods <- setdiff(methods, methods_stop_list)",60],["#' \\cr \\code{\\link[dplyr]{intersect}}, \\code{\\link[dplyr]{union}}, \\code{\\link[dplyr]{setdiff}}",54],["myX = setdiff(names(data1.hex), myY)",49],["class_2 = setdiff( unique(class), target_class )",47],["rs <- setdiff(rs, exc.snps)",36],["unusedSettings <- setdiff(names(settings), usedSettings)",31],["reqs <- setdiff(reqs, c(imports, depends, allowed_imports))",30],["setdiff(standard_package_names$base, c(\"methods\", \"stats4\"))",30],["objects_in_code <- setdiff(objects_in_code, ns_S3_methods)",30]]},{"word":"setwd","context":[["setwd(normalizePath(dirname(R.utils::commandArgs(asValues=TRUE)$\"f\")))",3565],["setwd(owd)",486],["setwd(startdir)",433],["setwd(wd)",210],["setwd(path)",191],["setwd(dir)",160],["setwd(cwd)",137],["setwd(wd2)",131],["setwd(pkgoutdir)",128],["setwd(\"..\")",121]]},{"word":"sgp","context":[["sgp.exact.grade.progression=TRUE,",1079],["sgp.grade.sequences=list(c('EOCT', 'EOCT')),",374],["sgp.panel.years.within=c('LAST_OBSERVATION', 'FIRST_OBSERVATION'),",229],["# sgp.exact.grade.progression=TRUE,",204],["sgp.norm.group.preference=2),",199],["sgp.norm.group.preference=1),",170],["sgp.norm.group.preference=3),",167],["sgp.grade.sequences=list(c('EOCT', 'EOCT'))),",144],["sgp.baseline.panel.years=c('2009', '2010', '2011', '2012', '2013'),",141],["sgp.norm.group.preference=4),",129]]},{"word":"shQuote","context":[["cmd <- paste(shQuote(file.path(R.home(\"bin\"), \"R\")),",128],["paste0(\"--build-dir=\", shQuote(build_dir)),",96],["shQuote(f), shQuote(outfile))",63],["shQuote(f), shQuote(outfile))",63],["shQuote(file.path(R.home(\"share\"), \"make\",",56],["shQuote(url),",53],["paste(\"-f\", shQuote(makefiles), collapse = \" \")))",48],["system(paste(\"mv\", shQuote(instdir),",48],["\"-l\", shQuote(update[i, 2L]),",48],["shQuote(file.path(R.home(\"share\"), \"make\", \"clean.mk\")),",44]]},{"word":"shiny","context":[["library(shiny)",3258],["# http://shiny.rstudio.com",168],["require(shiny)",144],["library(\"shiny\")",95],["progress <- shiny::Progress$new()",85],["sShinyPath <<- \"/mnt/shiny/\"",74],["progress <- shiny::Progress$new(session)",68],["code('library(shiny)'),br(),",57],["# http://www.rstudio.com/shiny/",53],["shiny::observe({",49]]},{"word":"should","context":[["# You should have received a copy of the GNU General Public License",2410],["## You should have received a copy of the GNU General Public License",362],["# You should have received a copy of the GNU Library General",291],["#  You should have received a copy of the GNU General Public License",288],["# You should have received a copy of the GNU Lesser General Public License",263],["#    You should have received a copy of the GNU General Public License",221],["#You should have received a copy of the GNU General Public License",171],["# You should have received a copy of the GNU General Public License along with",148],["# all colnames should be recognzied gene symbols.  no isoform suffixes yet",142],["## You should have received a copy of the GNU General Public License along",129]]},{"word":"show","context":[["stat_summary( aes(y=yAxis),   fun.y=mean, colour=\"white\", geom=\"point\", shape=19, size=1.5, show.legend = FALSE) +",176],["tmp.table <- tableGrob(chk.all.bac, show.rownames = FALSE)",112],["tmp.table <- tableGrob(chk.all.accum, show.rownames = FALSE)",112],["tmp.table <- tableGrob(chk.all.pop, show.rownames = FALSE)",112],["tmp.table <- tableGrob(chk.RAOCUT.pop, show.rownames = FALSE)",92],["show = function() {",81],["f = \"show\",",68],["file.show(path)",63],["signif.stars = getOption(\"show.signif.stars\"), ...)",62],["if(!isGeneric(\"show\", envir))",55]]},{"word":"side","context":[["mtext(input$quick_ewsRadioButtons, side=4, col=\"green4\")",460],["mtext(input$ewsRadioButtons, side=4, col=\"green4\")",438],["mtext(paste(\"Parameters:\", param_file), side=1, line=3, cex=0.75)  # Add parameter file",253],["axis(side=3, labels=F, lwd.ticks=2, cex.axis=1.2, las=1)",129],["axis(side=4, labels=F, at=log(seq(0.1:1, by = 0.1)), lwd.ticks=2, cex.axis=1.2, las=1)",113],["side=3,",96],["axis(side=1, labels=T, lwd.ticks=2, cex.axis=1.2, las=1)",84],["axis(side=2,",70],["Axis(side=2)",59],["mtext(paste(\"  Copyright 2012, USTHB. Algeria\"),side = 1, line = 4, adj = 0.5, cex = .66)",55]]},{"word":"sigma","context":[["sigma = sigma,",87],["sigma = sigma,",87],["\"phi.unif\" = c(0.1, 1e4), \"sigma.sq.ig\" = c(1, 1))",58],["sigma = 1",41],["starting <- list(\"phi\" = 3/0.5, \"sigma.sq\" = 50, \"beta\" = 0, \"w\" = 0)",41],["tuning <- list(\"phi\" = 0.1, \"sigma.sq\" = 0.2, \"beta\" = 1, \"w\" = 5)",41],["sigma=poped.db$parameters$sigma,",37],["sigma=poped.db$parameters$sigma,",37],["#' @param sigma vector of shape parameter values",36],["#' @param sigma.link type of residual to be used.",36]]},{"word":"signature","context":[["signature(x = \"Column\"),",252],["signature(x = \"RDD\"),",130],["signature(x = \"DataFrame\"),",128],["if(length(signature) == 0L)",104],["signature <- matchSignature(signature, fdef)",83],["signature <- matchSignature(signature, fdef)",83],["signature(X = \"RDD\", FUN = \"function\"),",76],["if(is.null(signature)) {",71],["signature=\"x\")",71],["classes <- as.character(signature)",60]]},{"word":"silent","context":[["silent = TRUE)",214],["silent=TRUE)",185],["silent=!Debug[[\"DB.Model\"]])",171],["}, silent=TRUE)",133],["if (!silent) {",130],["Mo1 <- try(Model(prop, Data), silent=!Debug[[\"DB.Model\"]])",124],["}, silent = TRUE)",86],["try(dev.off(),silent=TRUE)",85],["p <- try(silent=FALSE, expr= {",65],["Mo1 <- try(Model(prop, Data), silent=TRUE)",59]]},{"word":"single","context":[["stop(\"'conf.level' must be a single number between 0 and 1\")",84],["heading(\"Testing single file importHDFS\")",80],["# Value must be character or single number",54],["selectmode=\"single\",",42],["# (for data sets with single rare population: 1 = rare population of interest, 0 = all others)",38],["# Initialize the multiple-QTL-model with the results from single QTL analysis",35],["stop(\"specifying 'contriburl' or 'available' requires a single type, not type = \\\"both\\\"\")",34],["function (x, y = NULL, plot.type = c(\"multiple\", \"single\"),",32],["\"single\" = as.single(c(...)),",27],["\"single\" = as.single(c(...)),",27]]},{"word":"sink","context":[["sink()",1573],["sink(file = lod2int_file_name)",71],["sink(file)",60],["if(userParameters$createLog) sink()",60],["sink(type = \"message\")",47],["sink(zz)",45],["if(!isSTDOUT){ sink(file); on.exit({sink(); if(closeit) close(file)}) }",42],["if(!isSTDOUT){ sink(file); on.exit({sink(); if(closeit) close(file)}) }",42],["sink(NULL)",42],["## sink() handling as general as possible -- unbelievably unpretty coding:",42]]},{"word":"size","context":[["theme(axis.text = element_text(size = 9),",378],["geom_point(size = 3, color=\"red\") +",289],["theme(plot.title=element_text(size = 18, vjust = 2))",204],["# adjust starting point to accomodate rolling window size",193],["axis.text.y = element_text(size = rel(1.5), angle = 0)) +",189],["stat_summary( aes(y=yAxis),   fun.y=mean, colour=\"white\", geom=\"point\", shape=19, size=1.5, show.legend = FALSE) +",176],["axis.text.x = element_text(size = rel(1.5), angle = 0)) +",171],["#geom_errorbar(aes(ymin=min,ymax=max),  data=whisk_1(DataFrame_Local),   width = 0.1, size=0.1, colour = \"black\") +",165],["for(i in 1:d.size){",147],["k.size <- env$k.size",112]]},{"word":"slot","context":[["slot(.Object, 'schemaLocation') <-",173],["slot(.Object, 'lang') <-",172],["slot(.Object, 'slot_order') <-",172],["if (inherits(model, \"ExternalReference\")) model = slot(model,\"ref\")",90],["if (inherits(self, \"ExternalReference\")) self = slot(self,\"ref\")",78],["if (inherits(world, \"ExternalReference\")) world = slot(world,\"ref\")",64],["#' @param value the replacement value of the slot",56],["slot(value, slotNames[[i]], FALSE) <- slots[[i]]",54],["## (asserted not to be needed if the subclass slot is complete)",54],["#' @slot finalizers A \\code{list} object containing environments with finalizers that",45]]},{"word":"slots","context":[["slots = c(",283],["dataPartClass <- elNamed(slots, \".Data\")",61],["slots <- list(...); slotNames <- names(slots)",54],["slots <- list(...); slotNames <- names(slots)",54],["slot(value, slotNames[[i]], FALSE) <- slots[[i]]",54],["pnames <- prototype@slots",54],["toSlots <- names(toDef@slots)",54],["properties <- ClassDef@slots",54],["slotNames <- names(slots)",54],["slots <- list(...)",54]]},{"word":"so","context":[["# furnished to do so, subject to the following conditions:",114],["## it seems that splits on spaces, so try harder.",97],["# check out if the file is compressed and if so unzip it",69],["## so force LANGUAGE=en",64],["# with so many knots, adaptive is time prohibitive",57],["## so e.g. .tar.xz works everywhere",56],["## since so many people use 'R CMD' in Makefiles,",54],["# so raise an exception. (Note that builtins were handled earlier.)",51],["## uses strwrap, so will be in current locale",48],["## so use a backdoor to suppress it.",48]]},{"word":"software","context":[["#  This program is free software; you can redistribute it and/or modify",5207],["# Unless required by applicable law or agreed to in writing, software",1318],["#   Unless required by applicable law or agreed to in writing, software",729],["# This program is free software: you can redistribute it and/or modify",682],["# software distributed under the License is distributed on an",605],["# This program is free software; you can redistribute it and/or modify",594],["# This library is free software; you can redistribute it and/or",268],["# Xpose 4 is free software; you can redistribute it and/or",234],["# This program is free software; you can redistribute it and/or",200],["\"This is free software; see the GNU General Public License version 2\",",183]]},{"word":"some","context":[["# some number of the expected events will fail, often (always?) because",122],["## As going through the db to extract sections can take some time,",68],["# some precalculated values for quicker pairwise evaluation",57],["## some have had space before ,",46],["# availability of some outputs",40],["# There are some NAs in the integer columns so conversion to zero",36],["BF10post[i] <- some.bf",36],["## Need some heuristics now.  When does an Rd object document just",34],["## provide function usages for some of the internal functions.",34],["## Need some heuristics now.  When does an Rd object document a",34]]},{"word":"sort","context":[[".pretty_format(sort(xx)))",180],[".pretty_format(sort(xx)), msg)",160],["objects_in_code <- sort(names(code_env))",147],["sig_ix = sort(p_values,decreasing=F,index.return=T)$ix",115],["u<-sort(unique(nodecov))",82],["x <- sort(x)",73],["function(x) paste(sort(x), collapse=\":\"))",69],["res <- c(res, msg, sort(xx))",62],["DF.yrs <- ordered(c(sort(unique(na.omit(Year))), \"All\"), levels=c(sort(unique(na.omit(Year))), \"All\"))",52],["DF.yrs <- ordered(c(sort(unique(na.omit(Year))), \"All\"), levels=c(sort(unique(na.omit(Year))), \"All\"))",52]]},{"word":"source","context":[["source('../h2o-runit.R')",1120],["source('../../h2o-runit.R')",867],["source(\"../../scripts/h2o-r-test-setup.R\")",427],["source(\"../../../scripts/h2o-r-test-setup.R\")",377],["source(\"header.R\")",372],["#' The source name and the CCD ID are also included in each row to assist in identifying the source of the data.",304],["#' The source name and the CCD ID are also included in each row to assist in identifying the source of the data.",304],["source('../findNSourceUtils.R')",302],["source(\"http://bioconductor.org/biocLite.R\")",285],["source('../../findNSourceUtils.R')",201]]},{"word":"sources","context":[["## Using sources from directory @code{dir} ...",442],["# ---- load-sources ------------------------------------------------------------",130],["# and other sources",118],["## working on the sources we (currently?) cannot deal with the",104],["if(length(sources)) {",83],["## If not, we build the Rd db from the sources:",62],["\"distribution of original sources:\\n\",",60],["strwrap(paste(sQuote(sources), collapse = \", \"),",55],["# for code accessed (or partly included) from other sources:",47],["## Do the package sources have a NAMESPACE file?",33]]},{"word":"sp","context":[["library(sp)",670],["require(sp)",131],["#' @import sp",86],["yp.sp.log <- spPredict(sp.obj = fit.logit, pred.coords = s.p,",58],["yp.sp.log <- spPredict(sp.obj = fit.logit, pred.coords = s.p,",58],["sp <- search()",54],["post.prob.log <- t(yp.sp.log$p.y.predictive.samples)",54],["sp <- paste(rep('  ', indent), collapse=\"\")",47],["#' library(sp)",45],["ttc <- sapply(term.coefs, function(x) x[sp])",34]]},{"word":"space","context":[["seqnames <- space(bamWhich(scanBamParam))",129],["seqnames <- space(bamWhich(sb_param))",57],["pat <- \"^([^\\\\([:space:]]+)[[:space:]]*\\\\(([^\\\\)]+)\\\\).*\"",53],["pat <- \"^([^\\\\([:space:]]+)[[:space:]]*\\\\(([^\\\\)]+)\\\\).*\"",53],["barplot(yhist$counts, axes=FALSE, xlim=c(0, top), space=0,",50],["barplot(xhist$counts, axes=FALSE, ylim=c(0, top), space=0,",50],["Log.info(lapply(names(grid_space), function(n) paste0(\"The \",n,\" search space: \", grid_space[n])))",49],["Log.info(lapply(names(grid_space), function(n) paste0(\"The provided \",n,\" search space: \", grid_space[n])))",47],["Log.info(lapply(names(grid_space), function(n) paste0(\"The expected \",n,\" search space: \", expected_grid_space[n])))",47],["## some have had space before ,",46]]},{"word":"specific","context":[["# See the License for the specific language governing permissions and",1314],["#   See the License for the specific language governing permissions and",729],["# specific language governing permissions and limitations",605],["# See the License for the specific language governing permissions and limitations under the License.",101],["# for the specific language governing permissions and limitations",45],["# If there are no specific error, then go get the parameter solution",41],["# testing for specific errors",41],["## See the License for the specific language governing permissions and",40],["## This drops packages in version-specific subdirectories.",33],["wrapLog(\"The system-specific extension for\",",32]]},{"word":"specified","context":[["# Plant the seed only if a specified value is entered",159],["stop(\"environment specified is not a package\")",56],["if (!missing(prob)) stop(\"'prob' and 'mu' both specified\")",56],["#' @param fold_assignment Cross-validation fold assignment scheme, if fold_column is not specified",55],["## specified number of breaks",52],["##' @param ...  Not used.  Forces remaining arguments to be specified by name.",49],["# draw the histogram with the specified number of bins",48],["# If eval_for_class is not specified, default to customTests$EVAL_FOR_CLASS.",44],["# If no DATA is specified either as a list, or strings",41],["# fall back on '/' if baseurl is not specified",39]]},{"word":"split","context":[["arg.split <- strsplit(each.arg,'=',fixed=TRUE)[[1]] # split on =",80],["arg.split <- strsplit(each.arg,'=',fixed=TRUE)[[1]] # split on =",80],["vars <- unlist(strsplit(variables.in.model[var], split = \":\"))",71],["if (! is.na(arg.split[2]) ) {",60],["ns <- names(split)",51],["# Check AUC and overall prediction error at least as good with group split than without",40],["vars <- unlist(strsplit(variable, split = \":\"))",36],["# Specify id.vars: the variables to keep but not split apart on",35],["## <FIXME split.matrix>",35],["iValue <- as.integer(unlist(strsplit(inputdat[iParam], split=\" \"))[2])",34]]},{"word":"sprintf","context":[["url <- sprintf(\"hdfs://%s%s\", hdfs_name_node, hdfs_data_file)",208],["sprintf(",194],["diagnosis.date <- as.Date(sprintf(\"%s-%s-%s\", diagnosis.year, \"01\", \"01\"))",174],["stop(sprintf(ngettext(N,",144],["payload <- sprintf('{",129],["cmd <- sprintf(\"rm -fr %s\", tmpdir_name)",76],["sprintf(\"\")",66],["printLog0(Log, sprintf(\"See %s for details.\\n\",",58],["else sprintf(\" [%ds/%ds]\", round(sum(td[-3L])), round(td[3L]))",53],["if(WINDOWS) sprintf(\" [%dm]\", round(td[3L]))",53]]},{"word":"sqrt","context":[["datac$se <- datac$sd / sqrt(datac$N)  # Calculate standard error of the mean",61],["sc <- diag(1/sqrt(Psi))",38],["ans$sigma <- sqrt(resvar)",35],["AB_se <- FigureTable$SDPercentCoverage/sqrt(FigureTable$NPercentCoverage)*100",35],["r <- sqrt(w) * r",35],["df = df, residual.scale = sqrt(res.var))",34],["FUN=function(x){if (x[1]>100){return(x[1]/x[2]*exp(1.96*sqrt(1/x[1])))",27],["}else{return(x[1]+(x[3]/sqrt(x[4])*(0.5*qchisq(0.975,2*x[4]+2)-x[4])))}})",27],["FUN=function(x){if (x[1]>100){return(x[1]/x[2]*exp(-1.96*sqrt(1/x[1])))",27],["}else{return(x[1]+(x[3]/sqrt(x[4])*(0.5*qchisq(0.025,2*x[4])-x[4])))}})",27]]},{"word":"src","context":[["owd <- setwd(\"src\")",96],["singleton(tags$head(tags$script(src = \"js/shinyBindings.js\", type='text/javascript'))),",73],["singleton(tags$head(tags$script(src = \"js/md5.js\", type='text/javascript'))),",73],["ss <- paste(\"src\", arch, sep = \"-\")",72],["## called from src/library/Makefile",56],["sQuote(\"src/Makevars\"),",56],["if (dir.exists(\"src\")) {",54],["source(\"./src/CommonFunctions.R\")",54],["file.copy(Sys.glob(\"src/*\"), ss, recursive = TRUE)",48],["## See @file{src/library/Makefile.in}.",45]]},{"word":"standard","context":[["## need stats:: for non-standard evaluation",115],["# #' ##--\tor do  help(data=index)  for the standard data sets.",82],["# Confidence interval multiplier for standard error",63],["datac$se <- datac$sd / sqrt(datac$N)  # Calculate standard error of the mean",61],["## force standard handling for data frames",41],["# 2. Extracts only the measurements on the mean and standard deviation for each measurement.",40],["## this is not a `standard' model-fitting function,",38],["cat(\"\\nResidual standard error:\",",36],["#    using a standard RAM.",34],["stop(\"character string is not in a standard unambiguous format\")",34]]},{"word":"start","context":[["print(\"    start mcmc predict\")",189],["print(\"    start mcmc fit\")",179],["start.time <- Sys.time()",166],["start <- Sys.time()",144],["start$mday <- 1L",136],["start = 1, end = iters - burn, update = update)",127],["print(\"    start pcl fit\")",70],["start = Sys.time()",69],["start <- 1",66],["print(\"  start probit\")",62]]},{"word":"stat","context":[["geom_bar(stat=\"identity\") +",205],["geom_bar(stat = \"identity\") +",114],["geom_bar(stat='identity') +",54],["geom_bar(stat=\"identity\",position=dodge) +",50],["geom_bar(position=position_dodge(), stat=\"identity\") +",43],["return(stat)",36],["geom_bar(stat = \"identity\", position = \"identity\", col = \"black\") +",36],["stat=\"identity\",",33],["upload.cmd <- paste(\"scp \", tblname, \" samorris@hpc.stat.ncsu.edu:~/rare-binary/markdown/\",",32],["## https://stat.ethz.ch/pipermail/r-devel/2010-April/057225.html",31]]},{"word":"state","context":[["## Check that state and outcome are valid",194],["### Log-Posterior of the proposed state",188],["stop(\"invalid state\")",166],["state = structure(list(loaded = TRUE, opened = FALSE,",144],["# Swirl's state, named e, is stored in the environment of the callback.",138],["# Get the swirl state",138],["root.state = root.state,",127],["root.state = root.state,",127],["best <- function(state, outcome) {",104],["rankhospital <- function(state, outcome, num = \"best\") {",80]]},{"word":"statement","context":[["statement <- paste0(statement, \" AND\")",1666],["statement <- paste0(statement, \" AND\")",1666],["invisible(statement)",151],["assign(\"testSql\", c(get(\"testSql\", envir = globalenv()), statement), envir = globalenv())",136],["statement <- paste0(statement, \" person_id IS NULL\")",96],["statement <- paste0(statement, \" person_id = '\", person_id,\"'\")",96],["statement <- paste0(statement, \" person_id = '\", person_id,\"'\")",96],["statement <- paste0(statement, \" person_id IS NULL\")",96],["statement <- paste0(statement, \" provider_id IS NULL\")",60],["statement <- paste0(statement, \" provider_id IS NULL\")",60]]},{"word":"stats","context":[["m[[1L]] <- quote(stats::model.frame)",150],["library(stats)",145],["## need stats:: for non-standard evaluation",115],["#' @importFrom stats setNames",101],["linkfun = stats$linkfun,",90],["linkinv = stats$linkinv,",90],["mu.eta = stats$mu.eta,",90],["stats <- make.link(linktemp)",89],["stats <- link",82],["if (exists(\"A_U\")) boxplot.stats(A_U)",76]]},{"word":"status","context":[["q(status=1)",171],["plot[[\"status\"]] <- \"complete\"",145],["quit(save=\"no\", status=1)",133],["if (status$error)",132],["if (status) {",130],["return(status)",114],["plot[[\"status\"]] <- \"waiting\"",112],["status <- result$status",101],["status <- result$status",101],["status = \"primary\",",94]]},{"word":"stdout","context":[["flush(stderr()); flush(stdout())",320],["stdout = outfile, stderr = outfile)",80],["write(\"\",stdout())",71],["\"might terminate R nor write to stdout/stderr instead\",",64],["paste(out$stdout, collapse = \"\\n\"),",52],["if(!(isSTDOUT <- file == \"\")) ## stdout() -- no sink() needed",42],["con <- stdout()",39],["stdout = \"\", stderr = \"\", arch = arch)",34],["sink(tempfile()) ## suppress startup messages to stdout",33],["stdout, stderr, stdin, input = cmd, env = env))",32]]},{"word":"step","context":[["step <- ifelse(length(by2) == 2L, as.integer(by2[1L]), 1L)",78],["for (i in seq(from=step, to=step*numRows*numCols, by=step)) {",76],["for (i in seq(from=step, to=step*numRows*numCols, by=step)) {",76],["if (trace) {    # end of timing step",76],["for (i in seq(from=step, to=step*numRows*numCols, by=step)) {",76],["step = 1,",50],["os = c(\"unix\", \"windows\"), step = 1)",46],["step = 0.1",44],["ensemble_roc <- function(score_mat,class,target_class,step=0.0001)",38],["step.my  = step)",37]]},{"word":"stop","context":[["stop(\"argument 'package' must be of length 1\")",667],["stop(msg)",580],["stop()",502],["stop(msg, call. = FALSE)",398],["stop(gettextf(\"directory '%s' does not exist\", dir),",379],["stop(\"you must specify 'package' or 'dir'\")",364],["stop(gettextf(\"directory '%s' does not contain R code\",",357],["stop(sErrorMsg)",320],["stop(",282],["stop(cstr)",248]]},{"word":"stopifnot","context":[["stopifnot(",405],["stopifnot(abs(res$value - val) < res$abs.error)",144],["stopifnot(is.rvle(rvleHandle))",118],["stopifnot(identical(pmin(x, y, na.rm=TRUE), pmin(y, x, na.rm=TRUE)))",90],["stopifnot(identical(pmin(x, y), pmin(y, x)))",90],["stopifnot(identical(pmax(x, y), pmax(y, x)))",90],["stopifnot(identical(pmax(x, y, na.rm=TRUE), pmax(y, x, na.rm=TRUE)))",90],["stopifnot(is.na(ii))",88],["stopifnot(inherits(z, \"try-error\"))",83],["stopifnot(isUnivariate(periodPercentReturns))",82]]},{"word":"str","context":[["str <- whisker.render(template, data=data)",200],["str(x)",115],["str(control)",108],["str(data)",103],["str(d)",100],["str(df)",99],["str(dat)",84],["##print(expected); ##str(expected)",60],["str(train)",52],["num.queryseq <- as.integer(str.queryseq)",50]]},{"word":"stream","context":[["chk.stream.pop <- data.frame(",158],["## bac in/around stream",158],["## pop in/around stream",158],["chk.stream.bac <- data.frame(",158],["## for stream",158],["chk.bac[chk.bac$location == \"stream\", \"accum.bac\"] = NA",142],["chk.dil * (df.output[ , \"pop.total.in.stream\"] -",112],["data.frame(location = \"stream\", pop = chk.pop.in.around.stream))",112],["chk.pop[chk.pop$location == \"stream\", \"pop\"],",112],["manual.calc.pop.total = chk.pop[chk.pop$location == \"stream\", \"pop\"],",112]]},{"word":"strict","context":[["pathsofar, gPath, strict,",90],["if(strict) {",86],["gPath, strict,",80],["if (strict)",65],["gPath, strict, grep, global)",60],["if(strict)",56],["# Special case when strict is FALSE and depth(gPath) is 1",50],["if (fullPathMatch(pathsofar, gPath, strict, grep)) {",50],["if (!strict && depth(gPath) == 1) {",50],["partialPathMatch(pathsofar, gPath$path, strict, grep)) {",50]]},{"word":"string","context":[["##' providing the JSON string directly, you must set \\code{jsonifyData} to",498],["##' \\code{inputParams} to create the JSON string or pass through the value of",498],["#' @rdname string-methods",106],["string,",95],["stop(\"'file' must be a character string or connection\")",90],["## the package argument is not a string constant.",66],["data[[i]] <- string[i]",50],["n <- length(string)",50],["data <- as.list(as.character(string))",50],["if (is.language(string)) {",50]]},{"word":"stringsAsFactors","context":[["stringsAsFactors = FALSE)",1517],["stringsAsFactors=FALSE)",801],["stringsAsFactors = FALSE",406],["options(stringsAsFactors = FALSE)",233],["stringsAsFactors=F)",206],["stringsAsFactors=FALSE))",171],["options(stringsAsFactors=FALSE)",156],["stringsAsFactors = FALSE,",141],["stringsAsFactors=FALSE,",138],["stringsAsFactors=FALSE",119]]},{"word":"strsplit","context":[["args <- strsplit(args,'nextArg', fixed = TRUE)[[1L]][-1L]",154],["arg.split <- strsplit(each.arg,'=',fixed=TRUE)[[1]] # split on =",80],["vars <- unlist(strsplit(variables.in.model[var], split = \":\"))",71],["txt <- unlist(strsplit(txt, \", *\"))",56],["result <- strsplit(strsplit(data[i], \"#\")[[1]][1], \"\\\\s+\")[[1]]",55],["result <- strsplit(strsplit(data[i], \"#\")[[1]][1], \"\\\\s+\")[[1]]",55],["x <- unlist(strsplit(x, \",\"))",51],["l1 <- strsplit(l1,\":\")",51],["strsplit(",47],["name_splitted <- unlist(strsplit(features_model[f],\"\"))",46]]},{"word":"structure","context":[["children = structure(list(), class = \"AsIs\")), .Names = c(\"text\",",212],["\"See section 'Package structure'\",",189],["structure(",168],["state = structure(list(loaded = TRUE, opened = FALSE,",144],["return(structure(NULL, class = \"check_Rd_xrefs\"))",66],["structure(list(rdas = rdas[problems, 1:3], msg = msg,",66],["\"opened\", \"selected\", \"disabled\", \"icon\")), children = structure(list(), class = \"AsIs\")), .Names = c(\"text\",",63],["## files structure for computing summary messages.",63],["structure(list(",59],["\"opened\", \"selected\", \"disabled\", \"icon\")), children = structure(list(",59]]},{"word":"strwrap","context":[["strwrap(paste(y, collapse = \", \"),",81],["msg <- strwrap(paste(msg, collapse = \" \"), indent = 2L, exdent = 2L)",80],["c(strwrap(msg),",66],["strwrap(paste(nms, collapse = \" \"),",66],["strwrap(y[[1L]], indent = 2L, exdent = 4L),",66],["strwrap(y[[2L]], indent = 2L, exdent = 4L)),",63],["out <- c(out, strwrap(msg), .pretty_format(x$bad_S4methods))",60],["paste(strwrap(paste(sQuote(files[bad]), collapse = \", \"),",60],["out <- c(out, strwrap(msg), .pretty_format(x$bad_refs))",60],["strwrap(paste(sQuote(sources), collapse = \", \"),",55]]},{"word":"style","context":[["tags$style(type=\"text/css\",",59],["#      Path style model input - Raw data input",47],["td.style.background = 'red';",46],["div(style=\"display:inline-block\",",43],["style <- match.arg(style)",40],["style <- match.arg(style)",40],["\"</td><td style=\\\"text-align: right\\\">\",",40],["plot.style + theme(",39],["tags$input(id = inputId, class = \"userid\", value=as.character(value), type=\"text\", style=\"display:none;\")",37],["axis.text=element_text(colour=\"black\", size = 16),                              #sets size and style of labels on axes",37]]},{"word":"sub","context":[["newy <-  sub(\"-\", \"+\", x = newy)",99],["title(sub = sub.caption, ...)",86],["title(sub = sub.caption, ...)",86],["sub = \"byte\")",82],["lines[ind] <- iconv(lines[ind], \"\", \"\", sub = \"byte\")",68],["as.numeric(sub(\"^r\", \"\", depends$version))))",68],["sub(dep_regexp, \"\\\\4\", dep)))",66],["pkg <- sub('^\"(.*)\"$', '\\\\1', deparse(pkg))",58],["this <- sub(\"^'(.*)'$\", \"\\\\1\", this)",56],["this <- sub('^\"(.*)\"$', \"\\\\1\", this)",56]]},{"word":"subset","context":[["Log.info(\"Now do the same filter & subset, but select complement of columns.\")",285],["diagnosis.year <- subset(tbl.pt, bcr_patient_barcode==patient.id)$initial_pathologic_dx_year[1]",154],["min[kk, ] <- c(i, min((subset(x, x[,1] == i , drop=FALSE))[,3]), min((subset(x, x[,1] == i , drop=FALSE))[,4]))",139],["min[kk, ] <- c(i, min((subset(x, x[,1] == i , drop=FALSE))[,3]), min((subset(x, x[,1] == i , drop=FALSE))[,4]))",139],["function(formula, data, subset, na.action, ...)",101],["ggplot(subset(batch_merged,",72],["## matrix of the appropriate subset of covariates kj",70],["tbl.pt.row <- subset(tbl.pt, bcr_patient_barcode==patient.id)",62],["if (!missing(subset)) {",57],["#' Convert XML instance subset to a dataframe.",47]]},{"word":"substitute","context":[["DNAME <- deparse(substitute(x))",130],["series <- deparse(substitute(x))",103],["if (!quoted) { expr <- substitute(expr) } # force quoted",96],["linktemp <- substitute(link)",90],["body(fx) <- substitute(UseMethod(ff), list(ff=f))",85],["name <- as.character(substitute(name))",80],["rp[2] = substitute(expression(italic(p) == MYOTHERVALUE),",78],["rp[1] = substitute(expression(italic(R)^2 == MYVALUE),",78],["substitute({",71],["deparse(substitute(x)) ))",68]]},{"word":"substr","context":[["} else if (substr(a, 1, 1) == \"-\") {",126],["} else if (substr(a, 1, 9) == \"--output=\") {",80],["functions_in_code[substr(functions_in_code, 1L,",66],["} else if (substr(a, 1, 10) == \"--library=\") {",56],["if (substr(spsspkg.GetSPSSVersion(),1, 2) >= 19) {",41],["} else if (substr(a, 1, 11) == \"--encoding=\") {",41],["substr(x, nchar(x)-n+1, nchar(x))",41],["((substr(.CompletionEnv[[\"linebuffer\"]],",35],["## of the generic function ... hence substr().",34],["## the generic function ... hence substr().",34]]},{"word":"sum","context":[["FUN = sum),",506],["model.pop.total = sum(df.output$pop.total),",158],["chk.dil * ( sum(df.output$pop.total) - sum(chk.pop$pop)) /",142],["sum(chk.pop$pop),",142],["manual.calc.pop.total = sum(chk.pop$pop),",142],["manual.calc.bac.total = sum(chk.bac$total.bac),",142],["chk.dil * ( sum(df.output$pop.total) - sum(chk.pop$pop)) /",142],["sum(chk.bac$total.bac),",142],["msg <- ngettext(sum(ind),",120],["chk.dil * (df.output$bac.total - sum(chk.bac$total.bac)) /",112]]},{"word":"summary","context":[["summary(fit)",505],["summary(mod)",145],["summary(model)",141],["temp <- summary(x, Quiet=TRUE)$Summary",135],["summary(model1)",122],["summary(m)",111],["summary(m1)",101],["summary(x)",96],["epsilon.summary <- apply(epsilon, 1, quantile,",90],["print(summary(analysis))",82]]},{"word":"switch","context":[["switch(type,",347],["switch(",191],["switch(method,",151],["switch(tag,",141],["switch(alternative,",135],["else switch(tmp,",78],["switch(blocktag,",76],["res <- switch(type,",72],["switch(as.character(e[[1L]]),",68],["ok <- switch(.Generic, max = , min = , range = TRUE, FALSE)",67]]},{"word":"symbol","context":[[".addFootnote(footnotes, na.for.categorical, note.symbol)",75],[".addFootnote(footnotes, symbol=\"<em>Note.</em>\", text=message)",71],["if (typeof(fun) == \"symbol\") {",62],["# To get the gene symbol for each Illumina ID",55],["if(is.symbol(what))",40],["as.alist.symbol <-",34],["&& is.symbol(x[[3L]]))",33],["&& (identical(x[[1L]], as.symbol(\"<-\")))",33],["### ** as.alist.symbol",33],["&& e[[1L]] == as.symbol(\"data\")))))",33]]},{"word":"system","context":[["#' prosPath <- system.file(\"extdata\", \"prostate.csv\", package=\"h2o\")",363],["system.time(",249],["system(cmd)",249],["system.time({",210],["res <- system(cmd)",198],["system(command)",182],["timing <- system.time({",140],["system(paste(\"rm -rf\",cran_pkg_unuseful,sep=\" \"))",139],["parse_time <- system.time(data.hex <- h2o.importFile(url))",129],["record = system.time(gcFirst = T,",119]]},{"word":"t","context":[["Dev[t.iter] <- Mo0[[\"Dev\"]]",270],["t.iter <- floor(iter / Thinning) + 1",252],["thinned[t.iter,] <- Mo0[[\"parm\"]]",223],["Mon[t.iter,] <- Mo0[[\"Monitor\"]]}",215],["sep=\"\\t\",",199],["return(t)",131],["x <- t(x)",129],["for(t in 1:block){",123],["print(t)",120],["sep=\"\\t\")",113]]},{"word":"tab","context":[["tab",127],["return(tab)",114],["# list the user inputs the tab depends on (easier to read the code)",94],["# -*- mode: C++; indent-tabs-mode: nil; c-basic-offset: 4; tab-width: 4; -*-",78],["print(tab)",73],["tab[ind, 2L]))",66],["tab[ind, 1L]),",66],["if(length(tab)) {",66],["# Now pass to ui.R what it needs to display this tab",64],["tab <- get(methods:::.TableMetaName(f, attr(f, \"package\")),",60]]},{"word":"table","context":[["library(data.table)",1845],["tmp.h <- grobHeight(tmp.table)",1432],["tmp.w <- grobWidth(tmp.table)",1432],["tmp.gt <- gTree(children=gList(tmp.table, tmp.title))",1432],["data <- data.table::rbindlist(data, fill=TRUE)",608],["require(data.table)",464],["#' @import data.table",229],["table",186],["write.table(",129],["selected.table      <- c(\"2\")",126]]},{"word":"tables","context":[["## output results in tables to pdf",190],["function(object, db, with.tables, ...){",154],["with.tables=\"missing\"),",54],["with.tables=\"character\"),",48],["# copy table to tables folder on beowulf",43],["tables()",37],["tables = tables[-1]",36],["tables <- readRDS(objects_symbol_tables_file)",36],["tables = tables[-1]",36],["#See what tables are available",35]]},{"word":"tag","context":[["writeContent(block, tag)",251],["s <- .Rd_deparse(s, tag = FALSE)",165],["writeContent(block[[2L]], tag)",142],["switch(tag,",141],["writeContent(block[[1L]], tag)",96],["tag <- names(x)[i]",67],["##' provided to specify a version or tag (if not provided, the \"default\" tag is",57],["##' provided to specify a version or tag (if not provided, the \"default\" tag is",57],["tag <- tags[i]",48],["checkContent(block[[2L]], tag)",40]]},{"word":"tags","context":[["tags$hr(),",558],["tags$br(),",432],["tags$head(",253],["tags$div(",123],["tags <- RdTags(blocks)",88],["tags$ul(",86],["tags$li(",79],["tags$tr(",77],["for (i in seq_along(tags)) {",75],["singleton(tags$head(tags$script(src = \"js/md5.js\", type='text/javascript'))),",73]]},{"word":"tail","context":[["PVAL <- pchisq(STATISTIC, PARAMETER, lower.tail = FALSE)",75],["lower.tail = FALSE)",59],["dev[nas] <- safe_pchisq(dev[nas], aod$Df[nas], lower.tail=FALSE)",46],["#' @param lower.tail logical; if TRUE (default), probabilities are P[X <= x], otherwise, P[X > x]",44],["utils::tail(out, as.numeric(Sys.getenv(\"_R_CHECK_VIGNETTES_NLINES_\", 10))))",42],["out_file <-  tail(strsplit(out_list[i],\"/\")[[1]], n=1)",39],["if (!tail) {",39],["lower.tail=FALSE)",38],["if (lower.tail == TRUE)",36],["t1 = tail(aqw_ranked,10)",33]]},{"word":"target","context":[["checkIdentical(target, current)",247],["target = \"_blank\")),",75],["if(data.class(target) != data.class(current)) {",64],["#' @param y_pred Estimated target values.",54],["#' @param y_true Ground truth (correct) target values.",54],["if(binary.target){",54],["lt <- length(target)",51],["target, sQuote(pkgname)),",49],["checkTrue(.compare_hits(target, current))",48],["msg <-  if(check.attributes) attr.all.equal(target, current, ...)",46]]},{"word":"tbl","context":[["diagnosis.year <- subset(tbl.pt, bcr_patient_barcode==patient.id)$initial_pathologic_dx_year[1]",154],["tbl",118],["result <- vector(\"list\", nrow(tbl.good))",73],["tbl.pt.row <- subset(tbl.pt, bcr_patient_barcode==patient.id)",62],["tbl.pt.row <- subset(tbl.pt, bcr_patient_barcode==patient.id)",62],["if(nrow(tbl.omfSub)>0){",59],["BarcodeSample <- sample.tbl[match(samples, sample.tbl[,1]), 2]",50],["BarcodeSample <- sample.tbl[match(samples, sample.tbl[,1]), 2]",50],["m8 <- feval(y=e.ret,X=tbl,P=P)$forecast[,method]*w",43],["for(i in 1:nrow(tbl.fu.rows)){",42]]},{"word":"tcl","context":[["have_ttk <- as.character(tcl(\"info\", \"tclversion\")) >= \"8.5\"",184],["par(tcl= -0.5)",51],["par(tcl= -0.2)",47],["tcl(\"set\", name, value)",22],["tcl(tableList, 'finishediting')",22],["axis(3, at = seq(0, 80, 20), labels = FALSE, tcl = -0.25, lwd = 2)",16],["axis(4, at = seq(0, 80, 20), labels = FALSE, tcl = -0.25, lwd = 2)",16],["usrSel <- as.numeric(tcl(tableList, 'curselection'))",15],["#axis(1, pos=0, tick=T, tcl=0,lab=F, at=c(-1,10))",15],["tkcoords        <- function(widget, ...) tcl(widget, \"coords\", ...)",15]]},{"word":"td","context":[["</td>",85],["obj <- .td.object(attr(tdf, \"tableName\"), attr(tdf, \"database\"))",81],["if(WINDOWS) sprintf(\" [%dm]\", round(td[3L]))",53],["td2 <- if (td[3L] > 600) {",53],["td <- t2 - t1",53],["if(WINDOWS) sprintf(\" [%ds]\", round(td[3L]))",53],["else sprintf(\" [%ds/%ds]\", round(sum(td[-3L])), round(td[3L]))",53],["else sprintf(\" [%ds/%ds]\", round(sum(td[-3L])), round(td[3L]))",53],["else sprintf(\" [%dm/%dm]\", round(sum(td[-3L])), round(td[3L]))",53],["td <- td/60",53]]},{"word":"temp","context":[["return(temp)",167],["temp",155],["temp <- summary(x, Quiet=TRUE)$Summary",135],["rm(temp)",104],["temp <- tempfile()",87],["unlink(temp)",73],["sShinyTempPath <<- paste0(sShinyPath,\"temp/\")",73],["temp.school.data <- school.data[Year==DF.yrs[i],]",52],["temp.school.data <- school.data",52],["classes <- try(class(temp), silent=TRUE)",51]]},{"word":"tempfile","context":[["tf <- tempfile()",212],["tmp <- tempfile()",180],["filename <- tempfile(fileext = \".mat\")",145],["f <- tempfile()",134],["file <- tempfile()",114],["build_dir <- gsub(\"\\\\\", \"/\", tempfile(\"Rd2pdf\"), fixed = TRUE)",96],["temp <- tempfile()",87],["path <- tempfile(pattern=\"git2r-\")",82],["cpdir <- tempfile('cp')",66],["outfile <- tempfile(\"xshell\")",48]]},{"word":"terms","context":[["#  it under the terms of the GNU General Public License as published by",5392],["# it under the terms of the GNU General Public License as published by",2082],["## it under the terms of the GNU General Public License as published by",298],["# modify it under the terms of the GNU Library General Public",297],["# modify it under the terms of the GNU Lesser General Public License",239],["#    it under the terms of the GNU General Public License as published by",221],["# modify it under the terms of the GNU General Public License",191],["#it under the terms of the GNU General Public License as published by",191],["# under the terms of the GNU General Public License as published by",185],["# to the terms of a commercial license agreement with RStudio, then",175]]},{"word":"test","context":[["test(id=0, code={",3834],["source(\"../../scripts/h2o-r-test-setup.R\")",427],["# Parameters for the test.",398],["source(\"../../../scripts/h2o-r-test-setup.R\")",377],["test <- function() {",233],["test <- match.arg(test)",138],["test <- match.arg(test)",138],["#' test=1",116],["#perform test",115],["test = cbind(test,ts)",114]]},{"word":"tests","context":[["num.passed.tests=num.passed.tests+1",135],["num.passed.tests=num.passed.tests+1",135],["# Generated by gen-unary-tests.R using GNU R version 3.2.0 (2015-04-16)",122],["num.tests=num.tests+1",90],["num.tests=num.tests+1",90],["#' @example tests/testthat/examples_fcn_doc/warfarin_optimize.R",67],["# Generated by gen-math-unary-tests.R using GNU R version 3.2.0 (2015-04-16)",62],["# setwd(\"/Users/tomk/0xdata/ws/h2o/R/tests/testdir_jira\")",59],["num.tests=num.tests + 1",55],["num.tests=num.tests + 1",55]]},{"word":"text","context":[["expected <- eval(parse(text=\"FALSE\"));",383],["theme(axis.text = element_text(size = 9),",378],["axis.text.x = element_blank(),",306],["children = structure(list(), class = \"AsIs\")), .Names = c(\"text\",",212],["theme(axis.text.x=element_text(angle = 50, vjust=1.2, hjust = 1.2),",196],["expected <- eval(parse(text=\"TRUE\"));",191],["axis.text.y = element_text(size = rel(1.5), angle = 0)) +",189],["axis.text.y = element_blank(),",176],["axis.text.x = element_text(size = rel(1.5), angle = 0)) +",171],["text(xxt, mean(c(yya1, yya2)), labels = \"Evidence for H0\", cex= cexText)",158]]},{"word":"than","context":[["checkTrue(difference <= 0.01, \"h2o's model's residualDeviance/nullDeviance is more than 0.01 lower than R's model's\")",63],["checkTrue(difference <= 0.01, \"h2o's model's residualDeviance/nullDeviance is more than 0.01 lower than R's model's\")",63],["## Use a custom gatherer rather than .find_calls() with a suitable",60],["# sleep for 5 minutes if limit rate is less than 100",55],["stop(\"ERROR: there is more than one coefficient value per month and latband\")",46],["## Better than get(); works when called in fun :",46],["## Proceed if there is compatibility (sample range wider than the model range), otherwise return a message",42],["# Check AUC and overall prediction error at least as good with group split than without",40],["stop(\"the elements of 'comp' must be smaller or equal than \", object$ncomp, \".\")",39],["stop(\"cannot handle more than one 'x' coordinate\")",35]]},{"word":"that","context":[["#  This program is distributed in the hope that it will be useful,",5265],["# This program is distributed in the hope that it will be useful,",1782],["##' @param inputParams Either an R object that will be converted into JSON",498],["# This library is distributed in the hope that it will be useful,",267],["## This program is distributed in the hope that it will be useful,",210],["#This program is distributed in the hope that it will be useful,",203],["# Get the i,j matrix positions of the regions that contain this subplot",197],["## Check that state and outcome are valid",194],["#    This program is distributed in the hope that it will be useful,",177],["# icd is distributed in the hope that it will be useful,",135]]},{"word":"the","context":[["#  but WITHOUT ANY WARRANTY; without even the implied warranty of",5447],["#  it under the terms of the GNU General Public License as published by",5392],["#  it under the terms of the GNU General Public License as published by",5392],["#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",5389],["#  This program is distributed in the hope that it will be useful,",5265],["#  A copy of the GNU General Public License is available at",5168],["#  the Free Software Foundation; either version 2 of the License, or",5121],["#  the Free Software Foundation; either version 2 of the License, or",5121],["#  Part of the R package, http://www.R-project.org",3868],["# but WITHOUT ANY WARRANTY; without even the implied warranty of",3166]]},{"word":"them","context":[["\"\\nPlease remove them from your package.\\n\")",91],["# New version of length which can handle NA's: if na.rm==T, don't count them",72],["\"Please remove them from your package.\\n\")",60],["# the user's working directory and thus be accessible to them",49],["# Take the twelve series and melt (or equivalently, stack) them:",48],["# if there are extra rows that have been added by \"dragging\" the control, remove them",46],["cat(\"assuming text variables are categorical & replacing them with numeric ids\\n\")",45],["#When we convert to a data frame the numeric columns get an x in front of them. Remove them here.",41],["#When we convert to a data frame the numeric columns get an x in front of them. Remove them here.",41],["# and eliminate them from the training dataset because almost perfectly correlated to Y",36]]},{"word":"theme","context":[["theme(",600],["theme(axis.text = element_text(size = 9),",378],["theme(plot.title=element_text(size = 18, vjust = 2))",204],["theme(axis.text.x=element_text(angle = 50, vjust=1.2, hjust = 1.2),",196],["theme(legend.position=\"none\") +",170],["theme(legend.position=\"none\")",130],["theme(legend.position=\"bottom\")",128],["theme(legend.position = \"none\") +",125],["theme(legend.position = \"none\")",119],["theme(panel.background = element_blank(),",103]]},{"word":"theme_bw","context":[["theme_bw() +",1868],["theme_bw()",926],["theme_bw()+",280],["p <- p + theme_bw()",149],["theme_bw() + geom_line(colour=\"black\") + geom_hline(yintercept=0,lty=2) +",140],["theme_set(theme_bw())",110],["ggplot2::theme_bw() +",68],["theme_bw(base_size = 20) +",56],["theme_bw(20)+",51],["theme_bw() + theme(legend.position='bottom')",49]]},{"word":"then","context":[["# then, if the requested plot already exists, use it",228],["# If layout is NULL, then use 'cols' to determine layout",195],["# to the terms of a commercial license agreement with RStudio, then",175],["# then plot 1 will go in the upper left, 2 will go in the upper right, and",110],["when 11 then 'Q8.2'",62],["when 9 then 'Q9'",62],["when 8 then 'Q8.1'",62],["when 7 then 'Q7.1'",62],["# If there are no specific error, then go get the parameter solution",41],["# \"norm\" or \"raw\", then it is assumed that we have to",41]]},{"word":"there","context":[["# If there is a match",73],["## And pick the ones which should not be there ...",63],["# If there is a match...",56],["# Avoid consecutive duplicates (once it is found there is no point in keep going)",56],["# If there was no matching method, attempt to find the default method. If that fails,",51],["stop(\"ERROR: there is more than one coefficient value per month and latband\")",46],["# if there are extra rows that have been added by \"dragging\" the control, remove them",46],["## Proceed if there is compatibility (sample range wider than the model range), otherwise return a message",42],["# If there are no specific error, then go get the parameter solution",41],["## * if documentation was generated via prompt, there is a \\format",34]]},{"word":"these","context":[["a.smooth.coef=0 # coefficient for scaling the entries of the MA filter dimensionwise (not varying in these simulations)",110],["\"Most likely, these were included erroneously.\\n\")",96],["#' these objects hold also the data assign to R, as \\code{dataframe}, from opal datasources.",84],["## Are these mentioned in DESCRIPTION?",58],["# resulting codaSamples object has these indices:",42],["# each of these elements is a raw data set of a corresponding study, for example",42],["## .check_package_description will insist on these operators",41],["# these are available from dismo::evaluate.R NOT originally implemented in biomod2::Evaluate.models.R",39],["# TODO: these functions are used to evaluate the model ... configurable?",37],["## remove these function entries, but should really do better,",34]]},{"word":"theta","context":[["bounds <- grid.Call(L_locnBounds, x$x, x$y, theta)",99],["a.trial.min.cut(the.graph, the.true.cluster, theta, method, overlap,",73],["theta)",46],["stop(paste(\"theta must be positive\", \"\\n\", \"\"))",45],["if (any(theta<=0))",45],["theta,",42],["print(theta);",38],["return(theta)",38],["print(\"theta\");",38],["the.graph <- delete.edges(the.graph, E(the.graph)[weight < theta]);",37]]},{"word":"this","context":[["# you may not use this file except in compliance with the License.",1263],["#   you may not use this file except in compliance with the License.",729],["# along with this program.  If not, see <http://www.gnu.org/licenses/>.",649],["# distributed with this work for additional information",608],["# \"License\"); you may not use this file except in compliance",607],["# regarding copyright ownership.  The ASF licenses this file",607],["#' The semantic reference(s) for this data:",337],["# along with this program; if not, a copy is available at",314],["# Public License along with this library; if not, write to the",291],["# along with this program; if not, write to the Free Software",285]]},{"word":"ticks","context":[["axis.ticks = element_blank(),",212],["axis.ticks=element_blank(),",184],["axis(side=3, labels=F, lwd.ticks=2, cex.axis=1.2, las=1)",129],["axis(side=4, labels=F, at=log(seq(0.1:1, by = 0.1)), lwd.ticks=2, cex.axis=1.2, las=1)",113],["theme(axis.ticks.x = element_blank(),",98],["axis(side=1, labels=T, lwd.ticks=2, cex.axis=1.2, las=1)",84],["axis.ticks.y = element_blank(),",76],["axis.ticks =element_line(colour = \"black\"),",70],["axis.ticks.x = element_blank(),",70],["axis.ticks.y=element_blank(),",69]]},{"word":"time","context":[["ptm <- proc.time()",350],["tm = proc.time() - ptm",308],["system.time(",249],["system.time({",210],["t1 <- proc.time()",205],["set.seed(476); ptm <- proc.time()",200],["t2 <- proc.time()",197],[",strftime(Sys.time(), format = \"%Y%m%d%H%M\"),",190],["start.time <- Sys.time()",166],["start.time <- Sys.time()",166]]},{"word":"title","context":[["tmp.gt <- gTree(children=gList(tmp.table, tmp.title))",1432],["# Application title",412],["legend.title=element_blank(),",321],["axis.title.y = element_blank(),",219],["axis.title.x = element_blank(),",214],["theme(plot.title=element_text(size = 18, vjust = 2))",204],["axis.title.x=element_blank(),",189],["#' @title",175],["axis.title.y=element_blank(),",135],["main=title,",107]]},{"word":"tm","context":[["library(tm)",434],["tm = proc.time() - ptm",308],["tm, grid = perf.grid,verbose=verbose, doPlot=doPlot)",184],["require(tm)",78],["tm = proc.time();",63],["tm = proc.time()-tm;",59],["tm = proc.time()-tm;",59],["secs = as.numeric(tm[3])",40],["library(\"tm\")",40],["# tm[1:10]",34]]},{"word":"tmp","context":[["grid.draw(tmp.gt)",1992],["tmp.w <- grobWidth(tmp.table)",1432],["tmp.w <- grobWidth(tmp.table)",1432],["tmp.h <- grobHeight(tmp.table)",1432],["tmp.gt <- gTree(children=gList(tmp.table, tmp.title))",1432],["y=unit(0.5,\"npc\") + 0.5*tmp.h,",1432],["tmp.gt <- gTree(children=gList(tmp.table, tmp.title))",1432],["tmp.gt <- gTree(children=gList(tmp.table, tmp.title))",1432],["tmp.h <- grobHeight(tmp.table)",1432],["rm(list = ls(pattern = \"tmp\\\\.*\"))",1348]]},{"word":"to","context":[["# Unless required by applicable law or agreed to in writing, software",1318],["#   Unless required by applicable law or agreed to in writing, software",729],["# to you under the Apache License, Version 2.0 (the",607],["# Licensed to the Apache Software Foundation (ASF) under one",607],["# Unless required by applicable law or agreed to in writing,",605],["##' function which makes POST HTTP requests to the API server.",498],["##' @param jsonifyData Whether to call \\code{RJSONIO::toJSON} on",498],["##' using \\code{RJSONIO::toJSON} to be used as the input to the API call.  If",498],["##' providing the JSON string directly, you must set \\code{jsonifyData} to",498],["##' \\code{inputParams} to create the JSON string or pass through the value of",498]]},{"word":"tools","context":[["library(tools)",237],["meta <- tools:::.get_package_metadata(dir, installed = FALSE)",102],["dir <- tools::file_path_as_absolute(dir)",86],["res <- tools::assertError(",84],["if(is.null(dir)) dir <- tools:::.R_top_srcdir_from_Rd()",68],["emboss.path <- file.path(chipster.tools.path, \"emboss\" ,\"bin\")",60],["cmd <- paste0(\"invisible(tools::Rdiff('\",",60],["res <- tools::assertError(SISe3(init      = init,",59],["which <- tools:::.get_standard_package_names()$base",50],["res <- tools::assertError(SISe(init    = init,",47]]},{"word":"top","context":[["# Whenever swirl is running, its callback is at the top of its call stack.",138],["layout.heights = list(top.padding = 0, bottom.padding = 0))",76],["for (i in 1:top){",69],["top <- max(c(xhist$counts, yhist$counts))",69],["## Look at all calls (not only at top level).",63],["barplot(yhist$counts, axes=FALSE, xlim=c(0, top), space=0,",50],["barplot(xhist$counts, axes=FALSE, ylim=c(0, top), space=0,",50],["# Set up plot layout, map will go on top and histogram on bottom",50],["#remove datasets with too many missing top gene features",44],["theme(legend.position = \"top\") +",43]]},{"word":"total","context":[["\"model.bac.total\")",368],["## total",319],["chk.bac[tmp.rows, \"accum.bac\"] <- chk.bac[tmp.rows, \"total.bac\"] /",288],["\"model.pop.total\")",230],["chk.total.pop <- data.frame(",158],["chk.total.bac <- data.frame(",158],["## bacteria loads total and by locations",158],["model.pop.total = sum(df.output$pop.total),",158],["model.pop.total = sum(df.output$pop.total),",158],["## population total and by locations",158]]},{"word":"tr","context":[["<tr>",516],["</tr>",516],["tr = l[[1]]",120],["train = cbind(train,tr)",114],["tags$tr(",77],["adjR2.tr    <- r2.adj.funct(my.datf.train[,1],pred.tr,noFeats.fit)",33],["R2sd.tr   <- 0 # formulas will be added later!",33],["'</td></tr>')",33],["adjR2.tr    <- r2.adj.funct(my.datf.train[,1],pred.tr,noFeats.fit)",33],["tr<-newXMLNode(\"tr\",  parent = tbl)",33]]},{"word":"trace","context":[["if(trace)",255],["if (trace) {",172],["if(trace) {",124],["if (trace)",114],["if (trace) {    # end of timing step",76],["if(do.trace)",61],["if (control$trace)",54],["trace=\"none\",",48],["if (trace %in% c(\"both\", \"row\")) {",46],["if (trace %in% c(\"both\", \"column\")) {",46]]},{"word":"train","context":[["v_names <- c(v_names,\"train\")",259],["if ( train ) {",259],["#train data",140],["train = cbind(train,tr)",114],["train = cbind(train,tr)",114],["#Constructing validation and train sets by sampling (20/80)",102],["model <- train( x = Xtrain , y = ytrain.cat,",100],["train = train[ , -1]",95],["train = train[ , -1]",95],["curr.train_dat = train.dat[ ,match(bs_mat.pats[,bs],colnames(train.dat)) ]",89]]},{"word":"train_dat","context":[["train_dat = train_dat[sig_ix,]",345],["train_dat = train_dat[sig_ix,]",345],["p_values = vector( length=nrow(train_dat),mode=\"numeric\" )",115],["train_pats = colnames(train_dat)",115],["return(list(train_dat,test_dat,\"q_thresh\",q_thresh))",112],["return(list(train_dat,test_dat,\"p_thresh\",p_thresh))",112],["return(list(train_dat,test_dat,\"sig_gene\",sig_gene))",112],["curr.train_dat = train.dat[ ,match(bs_mat.pats[,bs],colnames(train.dat)) ]",89],["for( i in 1:nrow(train_dat) )",76],["sen_dat = as.numeric(as.character(train_dat[i,sen_ix]))",69]]},{"word":"training_frame","context":[["tryCatch(training_frame <- h2o.getFrame(training_frame),",135],["tryCatch(training_frame <- h2o.getFrame(training_frame),",135],["parms$training_frame <- training_frame",103],["parms$training_frame <- training_frame",103],["#' model <- h2o.gbm(x = 3:9, y = 2, training_frame = hex, distribution = \"bernoulli\")",88],["training_frame = train,",85],["params$training_frame  <- training_frame",70],["params$training_frame  <- training_frame",70],["args <- .verify_dataxy(training_frame, x, y)",68],["training_frame <- h2o.importFile(training_file)",66]]},{"word":"tree","context":[["#all reference trees to one comp tree",139],["phylo = tree,",84],["tree",69],["library(tree)",66],["return(tree)",60],["\" syntax tree without additional information.\\n\"))",51],["#train_control<-tree.control(nobs=dim(train_data)[1], mindev=0.01/2)",40],["tree <- GeneralTree$new(0, \"parent1\")",37],["times_shared <- compute_times_ca(tree)",32],["plot(tree)",29]]},{"word":"try","context":[["try({",360],["if (inherits(res, \"try-error\"))",269],["res <- try(",268],["if(inherits(Mo1, \"try-error\")) {",217],["if ( is( res, \"try-error\" ) )",144],["try(",140],["message(\"want to try to submit your grade at a later time.\")",129],["Mo1 <- try(Model(prop, Data), silent=!Debug[[\"DB.Model\"]])",124],["if (class(p) == \"try-error\") {",118],["if ( !is( res, \"try-error\" ) )",108]]},{"word":"tryCatch","context":[["tryCatch({",1607],["tryCatch(",691],["tryCatch(training_frame <- h2o.getFrame(training_frame),",135],["object <- tryCatch(",75],["tryCatch( {",71],["tryCatch(parse(file = con, n = -1L),",66],["out <- tryCatch(",65],["db <- tryCatch(Rd_db(basename(outDir), lib.loc = dirname(outDir)),",62],["tryCatch ({",58],["fit.pcl <- tryCatch(",57]]},{"word":"ts","context":[["ts = l[[2]]",120],["test = cbind(test,ts)",114],["d.ts=20 # Dimension of the FTS",110],["x <- as.ts(x)",109],["#' @keywords ts multivariate distribution models",101],["x <- na.action(as.ts(x))",88],["ts = {",54],["ts.eps <- getOption(\"ts.eps\")",48],["ts.eps <- getOption(\"ts.eps\")",48],["# +x, -x were ts, !x was not in 3.0.2",48]]},{"word":"tt","context":[["tt <- tktoplevel()",201],["tkwm.iconbitmap(tt, default = file.path(R.home(\"bin\"), \"Rgui.exe\"))",153],["command=function() tkdestroy(tt))",152],["q.but <- tkbutton(tt,text=\"Quit\",",144],["tkwm.resizable(tt, 0,0)",143],["reset.but  <- tkbutton(tt, text=\"Reset\", command=reset)",142],["submit.but <- tkbutton(tt, text=\"Simulation\",",113],["tkwm.title(tt, \"Sim.DiffProc\")",102],["tkgrid(tklabel(tt,text=\"Size of process (N) : \"), N.entry, sticky=\"w\")",91],["tkgrid(tklabel(tt,text=\"Final time (T) : \"), T.entry,sticky=\"w\")",91]]},{"word":"two","context":[["ma.diff.index=3 # which index of the MA filter differs between the two FTS",110],["subgrid.density=10 # density of the (frequency) subgrid on which the two spectral density operators are compared",91],["\"two.sided\" = {",65],["two.sided = {",65],[",alternative = c(\"two.sided\",\"less\",\"greater\")",62],["# input/output filenames are passed as two additional arguments to Rscript",50],["### two seasons",46],["#in each sample, two classes are balanced",43],["p.value <- if (alternative[1] == \"two.sided\") {",40],["stop(\"'x' must be an array of at least two dimensions\")",38]]},{"word":"txt","context":[["# https://www.gnu.org/licenses/gpl-2.0.txt",309],["# AGPL (http://www.gnu.org/licenses/agpl-3.0.txt) for more details.",199],["gsub(\"\\\\.txt\",\"-\",chr.input)",190],["file='log.txt',",138],["function(txt)",94],["add(repo, \"test.txt\")",87],["txt <- gsub(\"\\\\\\\\l?dots\", \"...\", txt)",82],["txt <- gsub(\"\\\\\\\\l?dots\", \"...\", txt)",82],["\".txt\")",80],["\"\\\\1<unescaped bksl>\\\\2\", txt)",66]]},{"word":"type","context":[["1:length(ewsLine[[1]]), ewsLine[[1]], type=\"l\",",898],["type <- match.arg(type)",739],["type <- match.arg(type)",739],["switch(type,",347],["if(.Platform$OS.type == \"windows\") {",326],["WINDOWS <- .Platform$OS.type == \"windows\"",233],["if(.Platform$OS.type == \"windows\")",233],["type,",217],["type=\"RAM\",",189],["type = \"l\",",183]]},{"word":"types","context":[["if (\"html\" %in% types) {",72],["##select differential genes across cancer types##",49],["if (\"example\" %in% types) {",48],["if (\"latex\" %in% types) {",48],["#Load any source files that contain/define functions, but that don't load any other types of variables",47],["map.types = map.types,",47],["map.types = map.types,",47],["types = c(\"examples\", \"tests\", \"vignettes\"),",42],["for (type in types) {",33],["## for at least the supported OS types.  Under Unix, we",32]]},{"word":"tz","context":[["if(nzchar(tz)) attr(res, \"tzone\") <- tz",57],["if(nzchar(tz)) attr(res, \"tzone\") <- tz",57],["tz=tz,timestep = \"OutputSoilMaps\",wpath=wpath,inpts.file=inpts.file)",48],["tz=tz,timestep = \"OutputSoilMaps\",wpath=wpath,inpts.file=inpts.file)",48],["tz <- do.call(\"check_tzones\", args)",38],["return(.POSIXct(res, tz))",38],["format(pmin(x, y, na.rm=TRUE), tz=\"GMT\")",36],["tz = \"UTC\"))",36],["format(pmax(x, y, na.rm=TRUE), tz=\"GMT\")",36],["format(pmax(x, y), tz=\"GMT\")",36]]},{"word":"u","context":[["log.u <- log(runif(1))",133],["if(log.u < log.alpha) {",118],["u<-sort(unique(nodecov))",82],["if(any(is.na(nodecov))){u<-c(u,NA)}",82],["if(any(is.na(nodecov))){u<-c(u,NA)}",82],["# Auth: u.niazi@imperial.ac.uk",71],["nodecov <- match(nodecov,u,nomatch=length(u)+1)",62],["nodecov <- match(nodecov,u,nomatch=length(u)+1)",62],["if (length(u)==1)",62],["#' @importFrom unitted u",60]]},{"word":"unclass","context":[["x <- unclass(x)",142],["parg <- unclass(sym$dll)$name",54],["xx <- unclass(x)",43],["args <- lapply(args, unclass)",38],["s <- lapply(unclass(x),",38],["do.call(`unclass`, argv);",35],["res <- cut(unclass(x), unclass(breaks), labels = labels,",34],["res <- cut(unclass(x), unclass(breaks), labels = labels,",34],["classlabel <- as.vector(unclass(sampclass(object)))",33],[".pretty_format(unclass(x))",33]]},{"word":"under","context":[["#  it under the terms of the GNU General Public License as published by",5392],["# it under the terms of the GNU General Public License as published by",2082],["# limitations under the License.",1311],["# distributed under the License is distributed on an \"AS IS\" BASIS,",920],["# Licensed under the Apache License, Version 2.0 (the \"License\");",865],["#   Licensed under the Apache License, Version 2.0 (the \"License\");",729],["#   limitations under the License.",729],["#   distributed under the License is distributed on an \"AS IS\" BASIS,",717],["# under the License.",650],["# to you under the Apache License, Version 2.0 (the",607]]},{"word":"unique","context":[["objects_in_code <- unique(OK)",102],["ux <- unique(x)",92],["# dsL <- dsL[dsL$id %in% sample(unique(dsL$id), 100), ]",90],["uasgn <- unique(asgn)",90],["d <- dsL[dsL$id %in% sample(unique(dsL$id), sample_size), ]",86],["u<-sort(unique(nodecov))",82],["unique(c(Filter(function(f) .is_S3_generic(f, envir = code_env),",66],["res <- list(others = unique(bad_exprs),",66],["imports = unique(bad_imports),",66],["xx <- unique(xx)",62]]},{"word":"unit","context":[["y=unit(0.5,\"npc\") + 0.5*tmp.h,",1432],["unit(0, \"inches\")",301],["unit(0.5, \"npc\")",262],["if (!is.unit(x))",191],["y <- unit(y, default.units)",181],["x <- unit(x, default.units)",181],["if (!is.unit(y))",176],["if (!is.unit(x$x) ||",153],["unit(bounds[3L], \"inches\")",126],["unit(bounds[1L], \"inches\")",126]]},{"word":"united","context":[["united$TempBreed <- NULL",504],["united$MainBreed <- ifelse(united$TempBreed == TRUE, \"Hound\", united$MainBreed)",84],["united$MainBreed <- ifelse(united$TempBreed == TRUE, \"Hound\", united$MainBreed)",84],["united$MainBreed <- ifelse(united$TempBreed == TRUE, \"Hound\", united$MainBreed)",84],["united$TempBreed <- grepl(\"Greyhound\",united$MainBreed)",42],["united$TempBreed <- grepl(\"Greyhound\",united$MainBreed)",42],["tail(united[1:trCount,])         #end of train data",23],["united$AnimalType <- as.factor(united$AnimalType)",23],["united$Color1 <- sapply(united$Color, FUN = function(x) {strsplit(x, split=\"/\",fixed=TRUE)[[1]][1]})",23],["united$Color1 <- sapply(united$Color, FUN = function(x) {strsplit(x, split=\"/\",fixed=TRUE)[[1]][1]})",23]]},{"word":"units","context":[["default.units=\"npc\",",287],["x <- unit(x, default.units)",181],["y <- unit(y, default.units)",181],["bg = \"transparent\", canvas = \"white\", units = \"px\", dpi = \"auto\")",122],["default.units=\"native\",",102],["units = \"in\")",93],["units <- match.arg(units)",88],["units <- match.arg(units)",88],["stop(\"'x' and 'y' must be units\")",85],["default.units=default.units,",81]]},{"word":"unknown","context":[["encoding <- \"unknown\"",114],["message(\"Warning: unknown option \", sQuote(a))",86],["unknown <- c(unknown, pkg)",66],["unknown <- c(unknown, pkg)",66],["if (length(unknown)) {",34],["\"unknown\")",33],["paste(sQuote(unknown[!miss]), collapse = \", \")),",33],["unk <- xx[enc == \"unknown\"]",33],["else unknown %in% c(known, c(\"GLMMGibbs\", \"survnnet\", \"yags\"))",33],["obsolete <- unknown %in% c(\"ctest\", \"eda\", \"lqs\", \"mle\", \"modreg\", \"mva\", \"nls\", \"stepfun\", \"ts\")",33]]},{"word":"unlink","context":[["unlink(tf)",218],["unlink(build_dir, recursive = TRUE)",204],["unlink(filename)",162],["unlink(tmp)",107],["on.exit(unlink(file))",106],["unlink(outfile)",84],["unlink(path, recursive=TRUE)",83],["unlink(temp)",73],["unlink(file.path(outDir, dirname[type], drop))",72],["on.exit(unlink(f))",61]]},{"word":"unlist","context":[["as.character(unlist(lapply(names(x), .fmt)))",193],["deleters <- which(unlist(lapply(result, is.null)))",187],["unlist(Map(.format_calls_in_file, x, names(x))))",90],["x <- unlist(x)",89],["unlist %>%",74],["unlist(",72],["vars <- unlist(strsplit(variables.in.model[var], split = \":\"))",71],["cat(unlist(Rdtxt), file = filename, sep = \"\\n\")",69],["unlist(lapply(names(bad),",66],["\"bad_arg_names\" %in% unlist(lapply(y, names))",63]]},{"word":"up","context":[["# Set up the page",211],["## clean up",206],["# Clean up",99],["mynoiseqHo.deg1 = degenes(mynoiseqHo, q = 0.95, M = \"up\")",60],["# clean up",60],["class(n) <- \"up\"",60],["# Set up plot layout, map will go on top and histogram on bottom",50],["# clear up RAM",49],["# lesson is started. Any variables created here will show up in",49],["### Tidy up data",46]]},{"word":"update","context":[["# update plot legend with ews and breakpoint lines",898],["# update plot legend with only ews line",898],["start = 1, end = iters - burn, update = update)",127],["start = 1, end = iters - burn, update = update)",127],["iters = iters, burn = burn, update = update, thin = 1)",88],["iters = iters, burn = burn, update = update, thin = 1)",88],["iters = iters, burn = burn, update = update)",74],["iters = iters, burn = burn, update = update)",74],["# iters <- 100; burn <- 50; update <- 10; thin <- 1",67],[".byref.update.frame(x)",63]]},{"word":"url","context":[["#' \\url{http://www.mlhim.org}",337],["#' \\url{http://phylo.wikidot.com/matzke-2013-international-biogeography-society-poster}",218],["url <- sprintf(\"hdfs://%s%s\", hdfs_name_node, hdfs_data_file)",208],["respone <- httr::POST(url, body = payload)",129],["url <- 'https://www.coursera.org/api/onDemandProgrammingScriptSubmissions.v1'",129],["parse_time <- system.time(data.hex <- h2o.importFile(url))",129],["contriburl = contrib.url(repos, type),",107],["#' \\url{https://code.google.com/p/lagrange/}",75],["download.file(url, dest)",69],["opts_knit$set(base.url = base.url)",65]]},{"word":"use","context":[["# you may not use this file except in compliance with the License.",1263],["#   you may not use this file except in compliance with the License.",729],["# \"License\"); you may not use this file except in compliance",607],["# then, if the requested plot already exists, use it",228],["# If layout is NULL, then use 'cols' to determine layout",195],["# (the \"License\"); you may not use this file except in compliance with",154],["use.names = FALSE)",146],["# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",114],["# use this for interactive setup",111],["use.names = FALSE),",92]]},{"word":"useBytes","context":[["perl = TRUE, useBytes = TRUE)",163],["useBytes = TRUE)",142],["invert = TRUE, value = TRUE, useBytes = TRUE)",138],["lines, invert = TRUE, value = TRUE, useBytes = TRUE)",116],["lines, useBytes = TRUE, value = TRUE)",78],["contents <- readChar(f, file.size(f), useBytes = TRUE)",75],["writeLines(x, con, useBytes = TRUE, ...)",72],["useBytes = TRUE))) {",65],["if (grepl(\"\\r\", contents, fixed = TRUE, useBytes = TRUE))",64],["if(length(grep(pat, readLines(f, warn = FALSE), useBytes = TRUE))",60]]},{"word":"used","context":[["##' using \\code{RJSONIO::toJSON} to be used as the input to the API call.  If",498],["## to be used",173],["Log.info(\"Check that the hyper_params that were passed to grid, were used to construct the models...\")",87],["#### Start MCMC setup: Most of this is used for the spBayes package",71],["## to be used in installed.packages() and similar",60],["##' used).",57],["# Add it to another list (it will be used to adjust the column names in the final sample peaklist)",56],["source(\"./scripts/common-functions.R\") # used in multiple reports",55],["#'                                                  covariates will be created and used in models that",50],["##' @param ...  Not used.  Forces remaining arguments to be specified by name.",49]]},{"word":"useful","context":[["#  This program is distributed in the hope that it will be useful,",5265],["# This program is distributed in the hope that it will be useful,",1782],["# This library is distributed in the hope that it will be useful,",267],["## This program is distributed in the hope that it will be useful,",210],["#This program is distributed in the hope that it will be useful,",203],["#    This program is distributed in the hope that it will be useful,",177],["# icd is distributed in the hope that it will be useful,",135],["# Rcpp is distributed in the hope that it will be useful, but",133],["#   This program is distributed in the hope that it will be useful,",122],["# rkwarddev is distributed in the hope that it will be useful,",122]]},{"word":"user","context":[["user.prompt()",145],["#' @param owner the repo owner (user, org, etc)",144],["# Get the value which a user either entered directly or was computed",137],["# Get the last expression which the user entered at the R console.",136],["# This is the user-interface definition of a Shiny web application.",121],["# list the user inputs the tab depends on (easier to read the code)",94],["# first the reactive function doing all calculations when the related inputs were modified by the user",79],["config(repo, user.name=\"Alice\", user.email=\"alice@example.org\")",77],["config(repo, user.name=\"Alice\", user.email=\"alice@example.org\")",77],["#' \tNote: This function requires acting user",67]]},{"word":"using","context":[["##' response is returned (using \\code{RJSONIO::fromJSON}).",498],["##' using \\code{RJSONIO::toJSON} to be used as the input to the API call.  If",498],["# Generated by gen-unary-tests.R using GNU R version 3.2.0 (2015-04-16)",122],["## Function translated automatically using 'matlab.to.r()'",86],["## using the SuperLearner prediction algorithm output [SL_Pred_j], with the Xnew",70],["# Generated by gen-math-unary-tests.R using GNU R version 3.2.0 (2015-04-16)",62],["# forward options using x",62],["##' @param appNameOrID An app identifier using either the name of an app",57],["# Generated by using Rcpp::compileAttributes() -> do not edit by hand",57],["# You are welcome to use parts of this code, but please give credit when using it extensively.",51]]},{"word":"usr","context":[["#!/usr/bin/env Rscript",1591],["#!/usr/bin/Rscript",680],["par(usr = c(0, 1, 0, 1))",164],["#! /usr/bin/env Rscript",126],["usr <- par(\"usr\")",118],["usr <- par(\"usr\")",118],["usr <- par(\"usr\"); on.exit(par(usr))",101],["usr <- par(\"usr\"); on.exit(par(usr))",101],["usr <- par(\"usr\"); on.exit(par(usr))",101],["#! /usr/bin/Rscript",91]]},{"word":"utils","context":[["setwd(normalizePath(dirname(R.utils::commandArgs(asValues=TRUE)$\"f\")))",3565],["utils::flush.console()",160],["source(file.path(chipster.common.path, \"zip-utils.R\"))",123],["library(R.utils)",88],["library(utils)",87],["#' @include utils.R",80],["mc <- match.call(utils::data, e)",66],["source(file.path(chipster.common.path, \"tool-utils.R\"))",53],["aar <- utils:::.read_authors_at_R_field(aar)",52],["source(\"utils.R\")",52]]},{"word":"v","context":[["abline(v=quickTP()[[2]], col=\"blue\")",480],["abline(v=TPanalysis()[[2]], col=\"blue\")",442],["v",273],["if ( length(v)==1 ) { return( v[[1]] ) } else { return( v ) }",259],["if ( length(v)==1 ) { return( v[[1]] ) } else { return( v ) }",259],["if ( length(v)==1 ) { return( v[[1]] ) } else { return( v ) }",259],["names(v) <- v_names",259],["v <- c()",241],["return(v)",228],["else if (a %in% c(\"-v\", \"--version\")) {",145]]},{"word":"val","context":[["val",605],["return(val)",195],["stopifnot(abs(res$value - val) < res$abs.error)",144],["getState()$val",137],["selection <- getState()$val",129],["class(val) <- cl",110],["valResults <- expectThat(e$val,",108],["#print(paste(\"User val is \",e$val,\"Correct ans is \",correctVal))",107],["#print(paste(\"User val is \",e$val,\"Correct ans is \",correctVal))",107],["isTRUE(all.equal(correctVal,e$val))",102]]},{"word":"valid","context":[["v_names <- c(v_names,\"valid\")",259],["if ( valid ) {",259],["## Check that state and outcome are valid",194],["data.valid <- data.hex[s > 0.8,]",68],["if ( validation_scheme == 3 ) { valid[,response_col] <- as.factor(valid[,response_col]) } }",53],["if ( validation_scheme == 3 ) { valid[,response_col] <- as.factor(valid[,response_col]) } }",53],["if ( validation_scheme == 3 ) { valid <- cars[r <= 0.2,] }",53],["if(is.na(valid)) stop(\"invalid specification of 'breaks'\")",52],["if( valid ) {",51],["stop(\"argument \\\"training_frame\\\" must be a valid H2OFrame or key\")",51]]},{"word":"validation","context":[["if( is.null(model.parts$xm) ) invisible(.warn.no.cross.validation())",243],["if( is.null(model.parts$vm) ) invisible(.warn.no.validation())",243],["#Constructing validation and train sets by sampling (20/80)",102],["# validation des arguments #",68],["#' @param fold_column (Optional) Column with cross-validation fold index assignment per observation",57],["cv.mat[fd.ix==j,j] = \"validation\"",56],["#' @param fold_assignment Cross-validation fold assignment scheme, if fold_column is not specified",55],["Log.info(paste0(\"Validation scheme (1:none, 2:cross-validation, 3:validation set): \", validation_scheme))",53],["Log.info(paste0(\"Validation scheme (1:none, 2:cross-validation, 3:validation set): \", validation_scheme))",53],["test.pats = as.character(core.info$patient[as.character(core.info[,test_fold])==\"validation\"])",52]]},{"word":"value","context":[["value",2149],["##' \\code{inputParams} to create the JSON string or pass through the value of",498],["function(object, value) {",350],["return(value)",312],["invert = TRUE, value = TRUE)",262],["value <- NULL",233],["definition = function(object, value) {",178],["if(is.null(value)) {",166],["# Plant the seed only if a specified value is entered",159],["stopifnot(abs(res$value - val) < res$abs.error)",144]]},{"word":"values","context":[["free=TRUE, values=.2,",248],["free=FALSE, values=1),",187],["### Propose new parameter values",178],["stop(\"Not OK check your values\")",139],["return(values)",125],["scale_color_manual(values = palle)",119],["for (j in 1:nrow(values))",102],["# threshhold the values",100],["free=TRUE, values=.8,",98],["## in the 'id' vector (ignoring NA values)",84]]},{"word":"var","context":[["vars <- unlist(strsplit(variables.in.model[var], split = \":\"))",71],["name <- as.character(variables.in.model[ var])",53],["return(var)",50],["for (var in 1:length(variables.in.model)) {",47],["var <- as.character(var)",47],["var <- as.character(var)",47],["var.equal = TRUE, paired = FALSE)",44],["if (grepl(\":\", variables.in.model[var])) {",42],["var projection, path;",40],["stopifnot(is.character(x$var))",40]]},{"word":"variable","context":[["xlab=variable,",90],["datvar <- datVar() # requested variable name, x of dat.x",86],[",processP = \"fev\" # Mplus variable",84],["for (variable in variables) {",84],["## variable.",83],[",processP = \"gripavg\" # Mplus variable",78],["## the first argument could be named, or could be a variable name.",66],["# add an index variable:",51],["checkTrue(\"history\" %in% manifest(dp)$variable)",51],["aes(variable,value),",48]]},{"word":"variables","context":[["### Local variables: ***",188],["rm(list=ls(all=TRUE))  #Clear the variables from previous runs.",120],["## variables) required to compute the correlation between",95],["for (variable in variables) {",84],["print(\"Set variables for h2o.\")",73],["vars <- unlist(strsplit(variables.in.model[var], split = \":\"))",71],["#'        variables in the model.",67],["name <- as.character(variables.in.model[ var])",53],["# Renaming variables",51],["##' @param freeSet names of matrices containing free variables",51]]},{"word":"vars","context":[["name <- paste0(vars, collapse=\"\\u2009\\u273b\\u2009\")",89],["vars <- unlist(strsplit(variables.in.model[var], split = \":\"))",71],["library(vars)",44],["for (i in seq_along(vars))",39],["vars <- .variables",37],["vars=names(case1)",36],["vars <- unlist(strsplit(variable, split = \":\"))",36],["# Specify id.vars: the variables to keep but not split apart on",35],["return(vars)",35],["vars",33]]},{"word":"vector","context":[["## 'directory' is a character vector of length 1 indicating",280],["## 'id' is an integer vector indicating the monitor ID numbers",172],["x <- as.vector(x)",165],["p_values = vector( length=nrow(train_dat),mode=\"numeric\" )",115],["as.vector.foo <- function(...) 99",112],["result <- vector(\"list\", length(ids))",104],["#' @param R an xts, vector, matrix, data frame, timeSeries or zoo object of",98],["## Return a numeric vector of correlations",97],["y <- as.vector(y)",96],["## 'threshold' is a numeric vector of length 1 indicating the",95]]},{"word":"verbose","context":[["if (verbose) {",1034],["if(verbose)",870],["if(verbose){",539],["if (verbose)",516],["if(verbose) {",363],["verbose = FALSE,",225],["if (verbose){",193],["tm, grid = perf.grid,verbose=verbose, doPlot=doPlot)",184],["tm, grid = perf.grid,verbose=verbose, doPlot=doPlot)",184],["if (verbose == TRUE) {",161]]},{"word":"version","context":[["#  (at your option) any later version.",5319],["#  the Free Software Foundation; either version 2 of the License, or",5121],["# (at your option) any later version.",2316],["# the Free Software Foundation, either version 3 of the License, or",1475],["# the Free Software Foundation; either version 2 of the License, or",574],["# of the License, or (at your option) any later version.",455],["## (at your option) any later version.",345],["# version 2 of the License, or (at your option) any later version.",297],["# version 2 of the License, or (at your option) any later version.",297],["# the Free Software Foundation, either version 2 of the License, or",264]]},{"word":"vignettes","context":[["checkingLog(Log, \"running R code from vignettes\")",64],["} else if (a == \"--no-build-vignettes\") {",50],["types = c(\"examples\", \"tests\", \"vignettes\"),",42],["} else if (a == \"--no-vignettes\") {",34],["wrong <- vignettes",33],["sQuote(\"inst/doc\"), \" to \", sQuote(\"vignettes\"), \".\\n\")",32],["checkingLog(Log, \"package vignettes in \", sQuote(\"inst/doc\"))",32],["## Should checking the vignettes assume the system default",32],["## Can we run the code in the vignettes?",32],["## Check package vignettes.",32]]},{"word":"vigns","context":[["name <- vigns$names[i]",127],["vigns <- pkgVignettes(dir = pkgdir)",122],["file <- vigns$docs[i]",114],["for (i in seq_along(vigns$docs)) {",83],["if (!is.null(vigns) && length(vigns$docs)) {",81],["if (!is.null(vigns) && length(vigns$docs)) {",81],["enc <- vigns$encodings[i]",62],["engine <- vignetteEngine(vigns$engines[i])",60],["vignetteIndex <- .build_vignette_index(vigns)",44],["loadVignetteBuilder(vigns$pkgdir)",40]]},{"word":"vjust","context":[["vjust=0, gp=gpar(fontsize=20))",1432],["theme(plot.title=element_text(size = 18, vjust = 2))",204],["theme(axis.text.x=element_text(angle = 50, vjust=1.2, hjust = 1.2),",196],["resolveVJust(x$just, x$vjust),",143],["just=\"centre\", hjust=NULL, vjust=NULL,",74],["theme(axis.text.x=element_text(angle=45,vjust=1,hjust=1))",43],["x$vjust <- as.numeric(x$vjust)",42],["x$vjust <- as.numeric(x$vjust)",42],["theme(axis.title.y = element_text(size=12, vjust=1.5),",42],["if (!is.null(x$vjust))",42]]},{"word":"vp","context":[["print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,",190],["name=NULL, gp=gpar(), vp=NULL) {",183],["if (!is.null(vp))",139],["pushViewport(vp)",123],["name=name, gp=gp, vp=vp)",103],["name=name, gp=gp, vp=vp)",103],["name=NULL, gp=gpar(), draw=TRUE, vp=NULL) {",88],["vp=currvpTree",55],["name=NULL, gp=NULL, vp=NULL) {",46],["vp",44]]},{"word":"w","context":[["tmp.w <- grobWidth(tmp.table)",1432],["tkgrid(DimHlp.but, row=4, column=2,sticky=\"w\")",140],["tkgrid(DimHlp.but, row=5, column=2,sticky=\"w\")",128],["tkgrid(DimHlp.but, row=3, column=2,sticky=\"w\")",119],["tkgrid(DimHlp.but, row=6, column=2,sticky=\"w\")",114],["sticky = \"w\")",108],["tkgrid(DimHlp.but, row=7, column=2,sticky=\"w\")",99],["regex <- \"^TCGA\\\\.\\\\w\\\\w\\\\.\\\\w\\\\w\\\\w\\\\w\\\\.[0-9][0-9]$\"",98],["regex <- \"^TCGA\\\\.\\\\w\\\\w\\\\.\\\\w\\\\w\\\\w\\\\w\\\\.[0-9][0-9]$\"",98],["regex <- \"^TCGA\\\\.\\\\w\\\\w\\\\.\\\\w\\\\w\\\\w\\\\w\\\\.[0-9][0-9]$\"",98]]},{"word":"want","context":[["message(\"want to try to submit your grade at a later time.\")",129],["message(\"Press ESC if you want to exit this lesson and you\")",129],["## what we want due to backquotifying.)",68],["# Set this to True if you want to fetch the data directly from S3.",39],["## symbols via ':::' and hence package developers might want to",34],["## In case the package has a namespace, we really want to check",34],["## Not clear whether we want to require *all* namespace package",34],["## we would want the calls back ...",34],["## We do not want to use utils::available.packages() for now, as",33],["## For the QC computations, we really only want the S4 methods",33]]},{"word":"warn","context":[["Rcmd <- paste(\"options(warn=1)\\n\",",750],["options(warn=-1)",438],["if( is.null(model.parts$vm) ) invisible(.warn.no.validation())",243],["if( is.null(model.parts$xm) ) invisible(.warn.no.cross.validation())",243],["options(warn = -1)",193],["options(warn=2)",180],["Rcmd <- paste(\"options(warn=1, showErrorCalls=FALSE)\\n\",",160],["options(warn=0)",158],["lines <- readLines(file, warn = FALSE)",145],["options(warn = 1)",113]]},{"word":"warning","context":[["warning( \"Error message is: \", geterrmessage() );",263],["warning(msg)",141],["warning(",128],["warning = function(e) {",103],["warning(gettextf(",79],["}, warning = function(w) {",71],["warning(memo)",67],["if(!warning){",65],["\"In addition to the above warning(s), found the following notes:\",",60],["warning <- TRUE",59]]},{"word":"warningLog","context":[["warningLog(Log)",1033],["if (!any) warningLog(Log)",644],["if(!any) warningLog(Log)",588],["warningLog(Log,",84],["if (length(bad)) warningLog(Log) else noteLog(Log)",64],["warningLog(Log) else noteLog(Log)",58],["warningLog(Log, \"Errors in running code in vignettes:\")",32],["warningLog(Log, \"'qpdf' is needed for checks on size reduction of PDFs\")",32],["warningLog(Log, \"Found the following significant warnings:\")",32],["warningLog(Log, \"Found the following sources/headers with CR or CRLF line endings:\")",32]]},{"word":"warranty","context":[["#  but WITHOUT ANY WARRANTY; without even the implied warranty of",5447],["# but WITHOUT ANY WARRANTY; without even the implied warranty of",3166],["## but WITHOUT ANY WARRANTY; without even the implied warranty of",474],["#    but WITHOUT ANY WARRANTY; without even the implied warranty of",233],["#but WITHOUT ANY WARRANTY; without even the implied warranty of",214],["\"or later for copying conditions.  There is NO warranty.\",",183],["# WITHOUT ANY WARRANTY; without even the implied warranty of",180],["#   but WITHOUT ANY WARRANTY; without even the implied warranty of",129],["#     but WITHOUT ANY WARRANTY; without even the implied warranty of",105],["# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR",94]]},{"word":"was","context":[["# This file was generated by Rcpp::compileAttributes",216],["# Get the value which a user either entered directly or was computed",137],["## package was called if character.only = TRUE and",66],["# If there was no matching method, attempt to find the default method. If that fails,",51],["# +x, -x were ts, !x was not in 3.0.2",48],["stop(gettextf(\"package %s was built for %s\",",40],["stop(gettextf(\"package %s was built before R 3.0.0: please re-install it\",",40],["## Warn if the filter was not found in the db.",36],["## * if documentation was generated via prompt, there is a \\format",34],["## (in case 'verbose' was true).  We now add this as an attribute to",34]]},{"word":"we","context":[["# we found",122],["## working on the sources we (currently?) cannot deal with the",104],["## we only source the assignments, and hence do not get any",102],["## the name of the pollutant for which we will calculate the",86],["## what else shall we allow?  At least objects of class link-glm.",72],["## we do the vectorized metadata computations first, and try to",68],["## what we want due to backquotifying.)",68],["if (sum(rdas$size) < 1e5 || # we don't report unless we get a 1e5 reduction",66],["if (sum(rdas$size) < 1e5 || # we don't report unless we get a 1e5 reduction",66],["## Because we really only need this for calling from R CMD check, we",66]]},{"word":"weights","context":[["w <- object$weights",82],["dev <- sum(dev.resids(y, mu, weights))",60],["wts <- object$prior.weights",59],["w <- z$weights",58],["wt <- object$weights",55],["weights <- as.numeric(weights)",50],["weights <- as.numeric(weights)",50],["weights <- NULL",49],["#' @param weights_column Specify the weights column.",47],["stop(\"'weights' must be a numeric vector\")",46]]},{"word":"were","context":[["\"Most likely, these were included erroneously.\\n\")",96],["Log.info(\"Check that the hyper_params that were passed to grid, were used to construct the models...\")",87],["Log.info(\"Check that the hyper_params that were passed to grid, were used to construct the models...\")",87],["# first the reactive function doing all calculations when the related inputs were modified by the user",79],["# Just need to test that output is the same as if the GTuples were GRanges",67],["## which the calls were found.",60],["# so raise an exception. (Note that builtins were handled earlier.)",51],["# +x, -x were ts, !x was not in 3.0.2",48],["## Add the missing features to the final matrix (the one that were in the model but not in the peaklist)",42],["stop(\"models were not all fitted to the same size of dataset\")",41]]},{"word":"what","context":[["##' what they are doing.",156],["sQuote(what),",146],["what <- names(ext)",106],["## FIXME: what if conversion fails on e.g. UTF-8 comments",99],["what",88],["## be what commandArgs(TRUE) would return, that is a character vector",78],["sQuote(what)),",73],["## what else shall we allow?  At least objects of class link-glm.",72],["## what we want due to backquotifying.)",68],["# Now pass to ui.R what it needs to display this tab",64]]},{"word":"when","context":[["##' @param alwaysRetry Whether to always retry even when no response is",498],["## Does the package have a NAMESPACE file?  Note that when",104],["## in a NAMESPACE file when working on a package source dir, as",102],["#These first few lines run only when the file is run in RStudio, !!NOT when an Rmd/Rnw file calls it!!",95],["#These first few lines run only when the file is run in RStudio, !!NOT when an Rmd/Rnw file calls it!!",95],["# first the reactive function doing all calculations when the related inputs were modified by the user",79],["s <- h2o.runif(data.hex)    # Useful when number of rows too large for R to handle",68],["when 8 then 'Q8.1'",62],["when 9 then 'Q9'",62],["when 7 then 'Q7.1'",62]]},{"word":"where","context":[["where = envir)",263],["if(missing(where))",209],["fdef <- getGeneric(f, where = where)",196],["fdef <- getGeneric(f, where = where)",196],["where <- as.environment(where)",190],["where <- as.environment(where)",190],["where",185],["sQuote(getPackageName(where))),",166],["}, where = envir)",151],["assignClassDef(Class, classDef, where)",109]]},{"word":"which","context":[["##' function which makes POST HTTP requests to the API server.",498],["matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))",206],["deleters <- which(unlist(lapply(result, is.null)))",187],["# Get the value which a user either entered directly or was computed",137],["# Get the last expression which the user entered at the R console.",136],["ma.diff.index=3 # which index of the MA filter differs between the two FTS",110],["K=5 # Number of subspaces into which the test is projected",110],["subgrid.density=10 # density of the (frequency) subgrid on which the two spectral density operators are compared",91],["## the name of the pollutant for which we will calculate the",86],["leg <- which(sapply(tmp$grobs, function(x) x$name) == \"guide-box\")",84]]},{"word":"while","context":[["while(length(args)) {",162],["while (TRUE) {",136],["# To add 10 to a while loop",108],["# To run a while loop to generate different plots",108],["while( sum(q_values<q_thresh) <= sig_gene )",103],["while( sum(p_values<p_thresh) <= sig_gene  )",103],["while(TRUE){",97],["while(TRUE) {",65],["while (index < dl.index &&",60],["while (limit==0){",56]]},{"word":"white","context":[["stat_summary( aes(y=yAxis),   fun.y=mean, colour=\"white\", geom=\"point\", shape=19, size=1.5, show.legend = FALSE) +",176],["header=TRUE, sep=\",\", na.strings=\"NA\", dec=\".\", strip.white=TRUE)",157],["bg = \"transparent\", canvas = \"white\", units = \"px\", dpi = \"auto\")",122],["pointsize = 12, bg = \"white\")",104],["panel.background = element_rect(fill = \"white\"),",101],["#geom_hline(yintercept=-0.01, lty=1, col=\"white\", size=0.6) +",84],["stat_summary( aes(y=yAxis),   fun.y=mean, colour=\"white\", geom=\"point\", shape=19, size=1.5, show_guide = FALSE) +",44],["colours[j] <- \"white\"",41],["bg = \"transparent\", canvas = \"white\", units = \"px\", dpi = 82)",41],["\"white\", if(is.na(res)) NULL else res))",40]]},{"word":"width","context":[["\".pdf\"), height = 8.5, width = 11, onefile = TRUE)",190],["#geom_errorbar(aes(ymin=min,ymax=max),  data=whisk_1(DataFrame_Local),   width = 0.1, size=0.1, colour = \"black\") +",165],["width = 6,",151],["width = 12,",130],["column(width = 6,",129],["width = width,",115],["width = width,",115],["plot[[\"width\"]]  <- 530",107],["width = NULL,",101],["#geom_errorbar(aes(ymin=TransformedNpercentLower, ymax=TransformedNpercentUpper), width=.01,",85]]},{"word":"will","context":[["#  This program is distributed in the hope that it will be useful,",5265],["# This program is distributed in the hope that it will be useful,",1782],["##' @param inputParams Either an R object that will be converted into JSON",498],["# This library is distributed in the hope that it will be useful,",267],["## This program is distributed in the hope that it will be useful,",210],["#This program is distributed in the hope that it will be useful,",203],["#    This program is distributed in the hope that it will be useful,",177],["# icd is distributed in the hope that it will be useful,",135],["# Rcpp is distributed in the hope that it will be useful, but",133],["#   This program is distributed in the hope that it will be useful,",122]]},{"word":"win","context":[["y.date = \"DateTime_numeric\", index = \"SPY\", est.win = 390, digits = 6,",99],["y.date = \"DateTime_numeric\", index = \"SP\", est.win = 390, digits = 6,",93],["if (file.exists(\"Makefile.win\")) {",46],["y.date = \"DateTime_numeric\", index = \"XLY\", est.win = 390, digits = 6,",44],["win",35],["## Under Windows, need a Makefile.win for methods.",33],["assign(\"win.graph\",",33],["assign(\"win.metafile\",",33],["y.date = \"DateTime_numeric\", index = \"XLI\", est.win = 390, digits = 6,",33],["R_files <- c(\"sysdata.rda\", \"Makefile.win\",",33]]},{"word":"windows","context":[["if(.Platform$OS.type == \"windows\") {",326],["if(.Platform$OS.type == \"windows\")",233],["WINDOWS <- .Platform$OS.type == \"windows\"",233],["if (.Platform$OS.type == \"windows\") {",173],["OS_subdirs <- c(\"unix\", \"windows\")",88],["windows(10,10)",88],["if (Sys.info()['sysname'] == 'Windows') { shell.exec(paste(getwd(),\"/\",fname,sep=\"\")) }  # windows",71],["OS_subdirs = c(\"unix\", \"windows\"))",70],["if (.Platform$OS.type == \"windows\")",69],["if(.Platform$OS.type == \"windows\" || .Platform$GUI == \"AQUA\"",68]]},{"word":"with","context":[["# you may not use this file except in compliance with the License.",1263],["# update plot legend with ews and breakpoint lines",898],["# update plot legend with only ews line",898],["#   you may not use this file except in compliance with the License.",729],["# along with this program.  If not, see <http://www.gnu.org/licenses/>.",649],["# distributed with this work for additional information",608],["# with the License.  You may obtain a copy of the License at",608],["# along with this program; if not, a copy is available at",314],["# Public License along with this library; if not, write to the",291],["# along with this program; if not, write to the Free Software",285]]},{"word":"without","context":[["#  but WITHOUT ANY WARRANTY; without even the implied warranty of",5447],["# but WITHOUT ANY WARRANTY; without even the implied warranty of",3166],["## but WITHOUT ANY WARRANTY; without even the implied warranty of",474],["#    but WITHOUT ANY WARRANTY; without even the implied warranty of",233],["#but WITHOUT ANY WARRANTY; without even the implied warranty of",214],["# WITHOUT ANY WARRANTY; without even the implied warranty of",180],["#   but WITHOUT ANY WARRANTY; without even the implied warranty of",129],["# in the Software without restriction, including without limitation the rights",114],["# in the Software without restriction, including without limitation the rights",114],["## with/without stream access",112]]},{"word":"work","context":[["# distributed with this work for additional information",608],["# this work for additional information regarding copyright ownership.",154],["## Find the data sets to work on.",66],["## This work is distributed under the MIT license, included in the parent directory",65],["## Then manually adjusted to make work",43],["# the source command to work",41],["## Find the function objects to work on.",34],["## methods for, and then iterating over these.  To make this work",33],["# Check for large rate matrix (>= 7 areas; here, sparse matrices will work better)",32],["## so we can work in place, and allow ../../foo references.",32]]},{"word":"write","context":[["write(paste0(\"STOP \",sErrorMsg,\" \",date()),file=sLogFile,append=TRUE)",320],["# Public License along with this library; if not, write to the",291],["# along with this program; if not, write to the Free Software",285],["## with this program; if not, write to the Free Software Foundation, Inc.,",129],["write.table(",129],["# with this program; if not, write to the Free Software Foundation, Inc.,",115],["#   along with this program; if not, write to the Free Software",88],["### License along with this program; if not, write to the Free",81],["stop(\"unable to write code files\")",78],["#  along with this program; if not, write to the Free Software",72]]},{"word":"writeLines","context":[["writeLines(\"\")",248],["writeLines(\"\", PSOparam.TextFile)",114],["writeLines(tmp)",102],["writeLines(format(x))",84],["writeLines(x, con, useBytes = TRUE, ...)",72],["writeLines(",65],["##         writeLines(\"\")",61],["writeLines(lines, con)",51],["writeLines(mockFile, fileName)",48],["writeLines(c('<table width=\"100%\">',",48]]},{"word":"writing","context":[["# Unless required by applicable law or agreed to in writing, software",1318],["#   Unless required by applicable law or agreed to in writing, software",729],["# Unless required by applicable law or agreed to in writing,",605],["# Unless required by applicable law or agreed to in writing, this",45],["## Unless required by applicable law or agreed to in writing, software",41],["writeLines(\"\", InfoTXT.TextFile) # writing a blank line with a carriage return",36],["cat(\">> writing prediction on disk [\",fn,\"]... \\n\")",31],["## Avoid declared encodings when writing out.",26],["#  Unless required by applicable law or agreed to in writing, software",26],["cat(\">>> writing on disk ... \\n\")",22]]},{"word":"wrong","context":[["stop(\"nrows is wrong\")",119],["if(length(wrong)) {",112],["stop(\"row dendrogram ordering gave index of wrong length\")",107],["stop(\"column dendrogram ordering gave index of wrong length\")",107],["gettextf(\"  %s has wrong argument list %s\",",63],["if(!inherits(doc, \"pdf_doc\")) stop(\"wrong class\")",42],["#which is wrong, later we will corrected this",34],["if(doDelete) unlink(file.path(dir, \"R\", wrong))",33],["if(doDelete) unlink(file.path(dir, \"demo\", wrong))",33],["wrong_things$demo <- wrong",33]]},{"word":"www","context":[["#  http://www.r-project.org/Licenses/",4000],["#  Part of the R package, http://www.R-project.org",3868],["#  https://www.R-project.org/Licenses/",1168],["#  Part of the R package, https://www.R-project.org",1164],["#     http://www.apache.org/licenses/LICENSE-2.0",686],["#        http://www.apache.org/licenses/LICENSE-2.0",678],["# along with this program.  If not, see <http://www.gnu.org/licenses/>.",649],["#   http://www.apache.org/licenses/LICENSE-2.0",619],["# http://www.apache.org/licenses/LICENSE-2.0",586],["#' \\url{http://www.mlhim.org}",337]]},{"word":"x","context":[["x",5340],["return(x)",2931],["invisible(x)",2782],["function(x, ...)",2129],["function(x)",2000],["function(x) {",1328],["n <- length(x)",1017],["x <- as.matrix(x)",696],["x <- as.matrix(x)",696],["by.x = \"month.chr\", by.y = \"Month\")",598]]},{"word":"x1","context":[["weights_column = \"x1\")",82],["\"x1\", \"x2\", \"x3\", \"x4\", \"x5\", \"x6\", \"x7\"), row.names = c(\"1\",",50],["x1 <- x[id]",46],["x1",40],["x2 <- x1",40],["inner <- !is.leaf(subtree) && x1 != x2",36],["rdf$x1 <- 1  #set weights back to 1.0",31],["x1 <- rpois(n, rep(2, n)) + 1  #Random integer-valued (>=1) weights",31],["# draw some random weights ~ Poisson, add 'x1' weight col and y to df, hdf",31],["y <- j2r(\"x=[x1,x2]\")",30]]},{"word":"xi","context":[["xi.fix = TRUE, alpha.fix = FALSE,",136],["fit.rarebinaryCPP(beta.init = 0, xi.init = 0,",114],["beta.attempts = 50, xi.attempts = 50,",87],["knots = knots, beta.tune = 1, xi.tune = 0.1,",80],["xi.init = 0, xi.m = 0, xi.s = 0.5,",75],["xi.init = 0, xi.m = 0, xi.s = 0.5,",75],["xi.init = 0, xi.m = 0, xi.s = 0.5,",75],["xi <- x[[i]]",68],["vlist[[i]] <- xi",47],["xij <- xi[[j]]",46]]},{"word":"xlab","context":[["rcol=\"green4\", xlab=input$xaxis, ylab=input$yaxis,",898],["xlab(xLab2 ) + ylab( yLab2 ) + ggtitle( title2 )  + MyTheme_1( hjust1=1, vjust1=1,  angle1=30,   textSize=14 ) +",250],["xlab(\"\") +",204],["xlab = \"\",",128],["xlab=\"\",",127],["xlab(\"Year\") +",96],["xlab = \"Year\",",91],["xlab=variable,",90],["xlab=xlab,",86],["xlab=xlab,",86]]},{"word":"xlim","context":[["plot(1, type='n', xlim=0:1, ylim=0:1, bty='n', axes=FALSE, xlab=\"\", ylab=\"\")",74],["if (is.null(xlim)) {",62],["xlim=xlim,",51],["xlim=xlim,",51],["barplot(yhist$counts, axes=FALSE, xlim=c(0, top), space=0,",50],["xlim <- if (is.null(xlim)) range(xy$x[is.finite(xy$x)]) else xlim",43],["xlim <- if (is.null(xlim)) range(xy$x[is.finite(xy$x)]) else xlim",43],["xlim <- if (is.null(xlim)) range(xy$x[is.finite(xy$x)]) else xlim",43],["if (is.null(xlim))",40],["xlim = xlim,",40]]},{"word":"xval","context":[["if ( xval ) {",262],["v_names <- c(v_names,\"xval\")",259],["#' or \"xval\".",259],["Xtrain_mean_sd.reduced.xval, ytrain.cat.xval,",44],["Xtrain_mean_sd.reduced.xval, ytrain.cat.xval,",44],["Xtrain_quant.reduced.xval, ytrain.cat.xval,",44],["Xtrain_quant.reduced.xval, ytrain.cat.xval,",44],["Xtrain_mean_sd.scaled.xval, ytrain.cat.xval,",40],["Xtrain_quant.scaled.xval, ytrain.cat.xval,",40],["Xtrain_mean_sd.scaled.xval, ytrain.cat.xval,",40]]},{"word":"xx","context":[["if(length(xx) > 1L) {",340],[".pretty_format(sort(xx)))",180],["checkIdentical(expected, xx)",162],["sQuote(xx)), msg)",160],[".pretty_format(sort(xx)), msg)",160],["sQuote(xx))",147],["xx <- pileup(bf, scanBamParam=scanBamParam, pileupParam=pileupParam)",129],["xx",117],["xx <- x",101],["paste(c(\" \", sQuote(xx)), collapse = \" \"),",82]]},{"word":"xy","context":[["xy <- xy.coords(x, y)",63],["xy <- xy.coords(x, y)",63],["x <- xy$x",62],["y <- xy$y",60],["data = xy,",55],["ylim <- if (is.null(ylim)) range(xy$y[is.finite(xy$y)]) else ylim",43],["ylim <- if (is.null(ylim)) range(xy$y[is.finite(xy$y)]) else ylim",43],["xlim <- if (is.null(xlim)) range(xy$x[is.finite(xy$x)]) else xlim",43],["ylab <- if (is.null(ylab)) xy$ylab else ylab",43],["xlim <- if (is.null(xlim)) range(xy$x[is.finite(xy$x)]) else xlim",43]]},{"word":"y","context":[["y",1571],["y=unit(0.5,\"npc\") + 0.5*tmp.h,",1432],["return(y)",749],["by.x = \"month.chr\", by.y = \"Month\")",598],["cat( y, sep = \",\\n\" )",427],["expected = y",420],["n <- length(y)",315],["y,",269],["y = y,",232],["y = y,",232]]},{"word":"year","context":[["diagnosis.date <- as.Date(sprintf(\"%s-%s-%s\", diagnosis.year, \"01\", \"01\"))",174],["diagnosis.year <- subset(tbl.pt, bcr_patient_barcode==patient.id)$initial_pathologic_dx_year[1]",154],["predictors <- c(\"displacement\",\"power\",\"weight\",\"acceleration\",\"year\")",117],["group_by(year) %>%",96],["year,",69],["ycols <- c(pro_inflam_genes(year),antibody_genes(),ifn_genes())",66],["sentence(authorList(paper), fmtYear(paper$year), sep = \" \"),",63],["names(y$year) <- names(x)",50],["defense <- as.factor(paste(year,\"/\",opponent,sep=\"\"))",49],["# Store the total costs by year",48]]},{"word":"years","context":[["sgp.panel.years.within=c('LAST_OBSERVATION', 'FIRST_OBSERVATION'),",229],["sgp.baseline.panel.years=c('2009', '2010', '2011', '2012', '2013'),",141],["sgp.panel.years.within=c('LAST_OBSERVATION', 'LAST_OBSERVATION', 'FIRST_OBSERVATION'),",122],["sgp.panel.years=c('2011', '2012'),",118],["sgp.panel.years=c('2009', '2010'),",115],["sgp.panel.years=c('2010', '2011'),",111],["sgp.panel.years.within=c('FIRST_OBSERVATION', 'LAST_OBSERVATION'),",69],["sgp.panel.years=c('2012', '2013'),",68],["sgp.panel.years=c('2010', '2011', '2012'),",59],["sgp.panel.years=c('2011', '2012', '2013'),",46]]},{"word":"ylab","context":[["rcol=\"green4\", xlab=input$xaxis, ylab=input$yaxis,",898],["xlab(xLab2 ) + ylab( yLab2 ) + ggtitle( title2 )  + MyTheme_1( hjust1=1, vjust1=1,  angle1=30,   textSize=14 ) +",250],["ylab = \"\",",104],["ylab(\"\") +",98],["ylab=ylab,",81],["ylab=ylab,",81],["ylab=\"\",",81],["ylab = ylab,",75],["ylab = ylab,",75],["plot(1, type='n', xlim=0:1, ylim=0:1, bty='n', axes=FALSE, xlab=\"\", ylab=\"\")",74]]},{"word":"ylim","context":[["ylim = ylim,",78],["ylim = ylim,",78],["if (is.null(ylim))",77],["plot(1, type='n', xlim=0:1, ylim=0:1, bty='n', axes=FALSE, xlab=\"\", ylab=\"\")",74],["if (is.null(ylim)) {",63],["ylim=ylim,",58],["ylim=ylim,",58],["barplot(xhist$counts, axes=FALSE, ylim=c(0, top), space=0,",50],["if(is.null(ylim))",48],["ylim=c(0,1),",48]]},{"word":"you","context":[["#  This program is free software; you can redistribute it and/or modify",5207],["# you may not use this file except in compliance with the License.",1263],["#   you may not use this file except in compliance with the License.",729],["# This program is free software: you can redistribute it and/or modify",682],["# to you under the Apache License, Version 2.0 (the",607],["# \"License\"); you may not use this file except in compliance",607],["# This program is free software; you can redistribute it and/or modify",594],["##' providing the JSON string directly, you must set \\code{jsonifyData} to",498],["stop(\"you must specify 'package' or 'dir'\")",364],["# This library is free software; you can redistribute it and/or",268]]},{"word":"your","context":[["#  (at your option) any later version.",5319],["# (at your option) any later version.",2316],["# of the License, or (at your option) any later version.",455],["## (at your option) any later version.",345],["# version 2 of the License, or (at your option) any later version.",297],["#    (at your option) any later version.",226],["#(at your option) any later version.",164],["stop(\"Not OK check your values\")",139],["message(\"want to try to submit your grade at a later time.\")",129],["email <- readline(\"What is your email address? \")",129]]},{"word":"z","context":[["z",652],["return(z)",330],["z <- x",111],["stopifnot(inherits(z, \"try-error\"))",83],["z <- as.matrix(z)",83],["z <- as.matrix(z)",83],["z <- NULL",71],["print(z)",70],["if (missing(z)) {",66],["(as.character(z[[1L]]) == \"function\")) {",63]]},{"word":"~","context":[["#~",124],["else if (file.exists(f <- path.expand(\"~/.R/Makevars\")))",88],["p.byNatSat <- dotplot(Diff ~ country | byVar ,",61],["root=ifelse(.Platform$OS.type==\"windows\",\"c:/repos\",\"~/Repos\");",57],["x <- fsub(\"~\", \"\\\\textasciitilde{}\", x)",53],["fit.logit <- spGLM(formula = y.i.o ~ 1, family = \"binomial\",",50],["sDispersion ~ dunif(0, 5)",48],["sDensitySite ~ dunif(0, 5)",48],["formula = ~ 1,",48],["chk.pasture.accum.by.month <- merge(summaryBy(accum.bac ~ month.chr,",46]]}]
