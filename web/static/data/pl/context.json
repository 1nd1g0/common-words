[{"word":"0x00","context":[["movdqu\t0x00($inp), @XMM[0]\t# load input",99],["vpclmulqdq\t\\$0x00,$Hkey,$Ij,$Zlo",102],["vpclmulqdq\t\\$0x00,$Hkey,$Ij,$Xlo",119],["vpclmulqdq\t\\$0x00,$HK,$T1,$Xmi",119],["vmovdqa\t$t0,0x00(%rsp)",125],["vpclmulqdq\t\\$0x00,$Hkey,$Ii,$Xlo",136],["&data_byte(0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b);",136],["&data_byte(0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a);",143],["pxor\t0x00(%rsp), @XMM[0]\t# ^= tweak[]",168],["movdqu\t@XMM[0], 0x00($out)\t# write output",514]],"useCount":9106},{"word":"0x10","context":[["movdqu\t@XMM[1], 0x10($out)",478],["#        call mcount  (offset: 0x10)",102],["movaps\t0x10(%rsp),%xmm7",109],["&data_byte(0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2);",136],["sub\t\t\\$0x10,$len",139],["&data_byte(0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f);",143],["pxor\t0x10(%rsp), @XMM[1]",168],["movaps\t%xmm7,0x10(%rsp)",202],["&movups\t(&QWP(0x10,$out),$inout1);",252],["movups\t$inout1,0x10($out)",268]],"useCount":8173},{"word":"0x20","context":[["movaps\t0x20(%rsp),%xmm8",97],["movdqu\t@XMM[6], 0x20($out)",228],["movups\t$inout2,0x20($out)",218],["&movups\t(&QWP(0x20,$out),$inout2);",204],["movdqu\t@XMM[4], 0x20($out)",189],["&data_byte(0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20);",143],["movaps\t%xmm8,0x20(%rsp)",132],["movdqu\t0x20($inp), @XMM[2]",99],["movdqu\t0x20($inp), @XMM[10]",86],["&data_byte(0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b);",136]],"useCount":7802},{"word":"0x40","context":[["&movups\t(&QWP(0x40,$out),$inout4);",108],["movdqu\t@XMM[2], 0x40($out)",156],["movups\t$inout4,0x40($out)",152],["&data_byte(0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb);",143],["movdqu\t@XMM[3], 0x40($out)",139],["&data_byte(0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5);",136],["movdqu\t0x40($inp), @XMM[4]",99],["movdqu\t0x40($inp),$inout4",79],["movaps\t0x40(%rsp),%xmm9",75],["movaps\t%xmm9,0x40(%rsp)",75]],"useCount":5937},{"word":"A","context":[["mov\t%rdx,$A[1]",384],["add\t%rax,$A[1]",384],["A=1,",481],["1*A+ -1*B=0,",484],["verifier_error(A,B,C) :-",508],["1*A=0,",540],["1*A>=0,",583],["FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE",642],["# A colon can be substituted for the equals sign, and anything to the left of",2251],["A=0,",540]],"useCount":59243},{"word":"A0","context":[["lea\t($j,$A0[1],2),$S[3]\t# t[2*i+1]<<1 |",96],["lea\t($shift,$A0[0],2),$S[0]\t# t[2*i]<<1 | shift",96],["mov\t%rdx,$A0[0]",114],["add\t$A1[0],$A0[0]",144],["mov\t$A0[1],$shift\t\t# shift=t[2*i+1]>>63",168],["mov\t%rdx,$A0[1]",176],["shr\t\\$63,$A0[0]",192],["shr\t\\$63,$A0[1]",192],["adc\t\\$0,$A0[1]",264],["adc\t\\$0,$A0[0]",216]],"useCount":5883},{"word":"ADD","context":[["ADD `ccode` VARCHAR(10) DEFAULT NULL AFTER `cn_sort`,",78],["ADD `cn_item` VARCHAR(10) DEFAULT NULL AFTER `cn_class`,",78],["ADD `cn_class` VARCHAR(30) DEFAULT NULL AFTER `cn_source`,",78],["ADD `materials` VARCHAR(10) DEFAULT NULL AFTER `ccode`,",78],["ADD COLUMN holdallowed tinyint(1) NULL",78],["ADD `cn_suffix` VARCHAR(10) DEFAULT NULL AFTER `cn_item`,",78],["ADD `cn_sort` VARCHAR(30) DEFAULT NULL AFTER `cn_suffix`,",78],["ADD `cn_sort` VARCHAR(30) DEFAULT NULL AFTER `cn_source`,",78],["operator => \"ADD\"",84],["operator => \"ADD\",",206]],"useCount":11820},{"word":"ALTER","context":[["$dbh->do(\"ALTER TABLE `deletedbiblioitems`",76],["$dbh->do(\"ALTER TABLE aqbooksellers CHANGE name name mediumtext NOT NULL\");",78],["ALTER TABLE `aqbudgets`",108],["$dbh->do(\"ALTER TABLE items",114],["ALTER TABLE aqorders",116],["$dbh->do(\"ALTER TABLE import_batches",141],["$dbh->do(\"ALTER TABLE deleteditems",152],["#ALTER TABLE `aqbudgets`",72],["$dbh->do(\"ALTER TABLE `borrowers` ADD `privacy` INTEGER NOT NULL DEFAULT 1;\");",70],["$dbh->do(\"ALTER TABLE subscriptionroutinglist",68]],"useCount":13833},{"word":"AND","context":[["=head1 BUGS AND LIMITATIONS",285],["=head1 CONFIGURATION AND ENVIRONMENT",197],["AND",188],["#  RECEIVED FROM MEDIATEK AND/OR ITS REPRESENTATIVES ARE PROVIDED TO BUYER ON",158],["AND explanation NOT LIKE '%WARNING%'",116],["AND hlstats_Players.hideranking=0",118],["#  BUYER'S SOLE AND EXCLUSIVE REMEDY AND MEDIATEK'S ENTIRE AND CUMULATIVE",158],["#  BUYER'S SOLE AND EXCLUSIVE REMEDY AND MEDIATEK'S ENTIRE AND CUMULATIVE",158],["#  BY OPENING THIS FILE, BUYER HEREBY UNEQUIVOCALLY ACKNOWLEDGES AND AGREES",158],["#  BUYER'S SOLE AND EXCLUSIVE REMEDY AND MEDIATEK'S ENTIRE AND CUMULATIVE",158]],"useCount":18641},{"word":"ARABIC","context":[["00657\tARABIC INVERTED DAMMA",11],["0FD16\tARABIC LIGATURE GHAIN WITH YEH FINAL FORM",11],["0FCDF\tARABIC LIGATURE YEH WITH HAMZA ABOVE WITH MEEM MEDIAL FORM",11],["0FC08\tARABIC LIGATURE BEH WITH MEEM ISOLATED FORM",11],["0FD75\tARABIC LIGATURE AIN WITH JEEM WITH MEEM FINAL FORM",11],["0FC67\tARABIC LIGATURE YEH WITH HAMZA ABOVE WITH NOON FINAL FORM",11],["0FBF9\tARABIC LIGATURE UIGHUR KIRGHIZ YEH WITH HAMZA ABOVE WITH ALEF MAKSURA ISOLATED FORM",11],["0FCCA\tARABIC LIGATURE LAM WITH HAH INITIAL FORM",11],["0FCE1\tARABIC LIGATURE BEH WITH MEEM MEDIAL FORM",11],["0FB57\tARABIC LETTER PEH FINAL FORM",11]],"useCount":13266},{"word":"ARGV","context":[["unless (@ARGV) {",289],["shift @ARGV;",1766],["if (!$::Driver) { use FindBin; exec(\"$FindBin::Bin/bootstrap.pl\", @ARGV, $0); die; }",594],["while (@ARGV) {",535],["foreach (@ARGV) {",501],["if ($#ARGV < 0) {",493],["shift(@ARGV);",483],["if (@ARGV) {",471],["foreach my $file (@ARGV) {",377],["for my $filename (@ARGV) {",319]],"useCount":41237},{"word":"Add","context":[["# Add the path where libndbclient can be found",129],["# Add the actors to the renderer, set the background and size",231],["# Add the path to the library to be used",138],["# Add valgrind options, can be overriden by user",146],["# Add \"libtool --mode-execute\" before the test to execute",185],["# Add test data for timezone - this is just a subset, on a real",147],["# Add name of the exe before args",147],["# Add the offical mysql system tables",145],["# Add arguments that should not go into the MYSQL_TEST env var",145],["# Add the mysql system tables initial data",145]],"useCount":11587},{"word":"Any","context":[["# Any use must be runtime checked with $^V",158],["# database, Version 5.2.0.  Any changes made here will be lost!",1670],["Any known bugs and limitations will be listed here.",77],["# database, Version 6.2.0.  Any changes made here will be lost!",1762],["# database, Version 6.0.0.  Any changes made here will be lost!",1994],["# database, Version 6.3.0.  Any changes made here will be lost!",1161],["# database, Version 6.1.0.  Any changes made here will be lost!",2613],["# Any changes made here will be lost!",2921],["# database, Version 7.0.0.  Any changes made here will be lost!",405],["# Any other process exited?",116]],"useCount":13696},{"word":"Auth","context":[["C4::AR::Auth::output_html_with_http_headers($template, $t_params, $session);",566],["use C4::AR::Auth;",528],["C4::AR::Auth::print_header($session);",356],["use C4::Auth qw(get_template_and_user);",197],["use C4::Auth qw/:DEFAULT get_session/;",145],["use C4::Auth qw(:DEFAULT get_session);",106],["use C4::Auth qw/check_cookie_auth/;",104],["use C4::Auth;    # get_template_and_user",101],["use C4::Auth;    # checkauth, getborrowernumber.",93],["use C4::Auth;",5322]],"useCount":8282},{"word":"Author","context":[["# Author: Slaven Rezic",108],["# Author: David Torres <api.davidtorres@gmail.com>",153],["##  Author:",128],["## Author     : ian.sealy@sanger.ac.uk",201],["#    Author : David Gonzalez, david.gonzalez@crg.eu",127],["# Author: H. Carvey, keydet89@yahoo.com",219],["# Author: Daniel \"Trizen\" È˜uteu",336],["Author:        Jan Wielemaker and Anjo Anjewierden",788],["Author:        Jan Wielemaker",1204],["#  Author: DWS Systems Inc.",331]],"useCount":6980},{"word":"B","context":[["=item B<--man>",648],["=item B<--help>",799],["1*B>=0,",535],["verifier_error(A,B,C) :-",508],["1*A+ -1*B=0,",484],["B=1,",460],["1*B=0,",452],["=item B<-help>",403],["1*B=1,",359],["B=0,",460]],"useCount":49775},{"word":"BAMUM","context":[["16912\tBAMUM LETTER PHASE-D GHAA",11],["16911\tBAMUM LETTER PHASE-D TU",11],["16893\tBAMUM LETTER PHASE-C NGGEN",11],["16858\tBAMUM LETTER PHASE-B TU MAEMGBIEE",11],["0A6DB\tBAMUM LETTER NA",11],["16963\tBAMUM LETTER PHASE-D MBAA SEVEN",11],["16943\tBAMUM LETTER PHASE-D NGGAP",11],["0A6DD\tBAMUM LETTER PI",11],["169C5\tBAMUM LETTER PHASE-E NAE",11],["16A35\tBAMUM LETTER PHASE-F TET",11]],"useCount":7216},{"word":"BEGIN","context":[["#BEGIN {push @INC, '..'}",63],["BEGIN { use_ok( \"EPrints\" ); }",57],["BEGIN {",4278],["BEGIN DSSUBRECORD",916],["BEGIN",884],["BEGIN=REGISTER",512],["BEGIN { push(@INC, \"..\"); };",350],["BEGIN{",264],["BEGIN { $| = 1; print \"1..1\\n\"; }",109],["BEGIN DSRECORD",86]],"useCount":8970},{"word":"BOLD","context":[["1D6B1\tMATHEMATICAL BOLD CAPITAL KAPPA",11],["print( BOLD, GREEN, \"\\n--\\n\", RESET );",16],["print BOLD, WHITE \"[*] Critical\\n\", RESET;",14],["1D41E\tMATHEMATICAL BOLD SMALL E",11],["1D56D\tMATHEMATICAL BOLD FRAKTUR CAPITAL B",11],["1D488\tMATHEMATICAL BOLD ITALIC SMALL G",11],["1D401\tMATHEMATICAL BOLD CAPITAL B",11],["1D591\tMATHEMATICAL BOLD FRAKTUR SMALL L",11],["1D4F0\tMATHEMATICAL BOLD SCRIPT SMALL G",11],["1D7C7\tMATHEMATICAL SANS-SERIF BOLD ITALIC PHI SYMBOL",11]],"useCount":6267},{"word":"BUILDROOT","context":[["chdir(\"$BUILDROOT\");",106],["print \"Copy $BUILDROOT/$PROJECT to $BUILDROOT/$PROJECT.tmp\\n\";",70],["$cmd=\"cp -pr \\\"$BUILDROOT/$PROJECT\\\" \\\"$BUILDROOT/$PROJECT.tmp\\\"\";",70],["$cmd=\"cp -pr \\\"$BUILDROOT/$PROJECT\\\" \\\"$BUILDROOT/$PROJECT.tmp\\\"\";",70],["print \"Copy $BUILDROOT/$PROJECT to $BUILDROOT/$PROJECT.tmp\\n\";",70],["$ret=`rm -fr $BUILDROOT/$PROJECT.tmp`;",70],["print \"Go to directory $BUILDROOT\\n\";",69],["mkdir \"$BUILDROOT\";",58],["print \"Delete directory $BUILDROOT\\n\";",51],["print \"Clean $BUILDROOT\\n\";",50]],"useCount":10059},{"word":"Basename","context":[["use File::Basename ();",43],["use File::Basename qw(dirname basename);",37],["use File::Basename qw(fileparse);",52],["my $script_dir = &File::Basename::dirname($0);",53],["use File::Basename qw( dirname );",64],["use File::Basename qw(basename dirname);",67],["use File::Basename qw( fileparse );",93],["use File::Basename qw(basename);",181],["use File::Basename qw(dirname);",218],["use File::Basename;",7899]],"useCount":9169},{"word":"Bin","context":[["use lib \"$FindBin::Bin/../lib\";",854],["use lib \"$Bin\";",189],["use lib $FindBin::Bin;",205],["use lib (\"$FindBin::Bin/../PerlLib\");",225],["use FindBin qw( $Bin );",256],["eval { require \"$FindBin::Bin/../kohalib.pl\" };",306],["use lib \"$FindBin::Bin\";",367],["if (!$::Driver) { use FindBin; exec(\"$FindBin::Bin/bootstrap.pl\", @ARGV, $0); die; }",594],["use FindBin qw($Bin);",1473],["use lib \"$Bin/../lib\";",182]],"useCount":8096},{"word":"Bio","context":[["my $registry = 'Bio::EnsEMBL::Registry';",186],["use Bio::SeqIO;",1291],["use Bio::EnsEMBL::Registry;",899],["use Bio::EnsEMBL::DBSQL::DBAdaptor;",773],["use Bio::KBase::CDMI::CDMIClient;",649],["use Bio::KBase::Utilities::ScriptThing;",483],["while (my @tuples = Bio::KBase::Utilities::ScriptThing::GetBatch($ih, undef, $column)) {",453],["my $geO = Bio::KBase::CDMI::CDMIClient->new_get_entity_for_script(\"c=i\"\t\t=> \\$column,",306],["use Bio::Seq;",249],["use Bio::AlignIO;",180]],"useCount":13054},{"word":"Bug","context":[["#use warnings; FIXME - Bug 2505",1565],["print \"Upgrade to $DBversion done (Bug 5811: Add sysprefs controlling overriding fines)\\n\";",34],["print \"Upgrade to $DBversion done (Bug 5186: allow GST rate to be set to 0)\\n\";",34],["# Bug#27636 tests fails if LC_* variables set to *_*.UTF-8",149],["# Remove this if/when Bug #58421 fixes this in the server",117],["# Workaround for Bug #50627: drop any debug opt",114],["# $dbh->do(\"DELETE FROM `systempreferences` WHERE variable='HomeOrHoldingBranch'\"); # Bug #2752",39],["print \"Upgrade to $DBversion done (Bug 1172 : Add OPACPatronDetails syspref)\\n\";",38],["of the bugs and their resolution. Bug reports can be submitted via the",38],["print \"Upgrade to $DBversion done (Bug 2576 : Add OPACFinesTab syspref)\\n\";",38]],"useCount":6852},{"word":"C","context":[["[ 'call_regexp_common'  , 'C'      ],",397],["##print \"C<$c>L<$level><$open$close>O<$off>\\n\";",302],["[C],",329],["@ENV{qw(LANGUAGE LANG LC_ALL)} = ('C') x 3;",341],["$type = 'C';",369],["-1*C>= -1,",451],["1*C=0,",457],["verifier_error(A,B,C) :-",508],["C=1.",557],["1*C>=0,",647]],"useCount":61006},{"word":"C4","context":[["if (C4::Context->preference(\"Version\") < TransformToNum($DBversion)) {",11887],["use C4::Output;",5752],["use C4::Context;",5685],["use C4::Auth;",5322],["my $dbh = C4::Context->dbh;",3666],["if ( C4::Context->preference(\"Version\") < TransformToNum($DBversion) ) {",2830],["use C4::Koha;",2199],["use C4::Biblio;",2109],["use C4::Members;",1624],["use C4::Items;",1347]],"useCount":95966},{"word":"CANADIAN","context":[["01413\tCANADIAN SYLLABICS WEST-CREE WO",11],["01637\tCANADIAN SYLLABICS CARRIER TLHEE",11],["018CF\tCANADIAN SYLLABICS RWI",11],["014E1\tCANADIAN SYLLABICS WEST-CREE LWII",11],["014DC\tCANADIAN SYLLABICS LWE",11],["0156F\tCANADIAN SYLLABICS TTH",11],["01624\tCANADIAN SYLLABICS CARRIER LE",11],["0147C\tCANADIAN SYLLABICS KWOO",11],["01635\tCANADIAN SYLLABICS CARRIER TLHO",11],["01484\tCANADIAN SYLLABICS KW",11]],"useCount":7799},{"word":"CAPITAL","context":[["01DB      ; [.1833.0021.0008.00DC][.0000.0035.0002.0300] # LATIN CAPITAL LETTER U WITH DIAERESIS AND GRAVE",14],["01D9      ; [.1833.0021.0008.00DC][.0000.0041.0002.030C] # LATIN CAPITAL LETTER U WITH DIAERESIS AND CARON",14],["00DC      ; [.1833.0021.0008.00DC] # LATIN CAPITAL LETTER U WITH DIAERESIS",14],["01D7      ; [.1833.0021.0008.00DC][.0000.0032.0002.0301] # LATIN CAPITAL LETTER U WITH DIAERESIS AND ACUTE",14],["0055 0308 ; [.1833.0021.0008.00DC] # LATIN CAPITAL LETTER U WITH DIAERESIS",14],["01D5      ; [.1833.0021.0008.00DC][.0000.005B.0002.0304] # LATIN CAPITAL LETTER U WITH DIAERESIS AND MACRON",14],["0110      ; [.15E4.0021.0008.0110] # LATIN CAPITAL LETTER D WITH STROKE",12],["0170      ; [.1833.0022.0008.0170] # LATIN CAPITAL LETTER U WITH DOUBLE ACUTE",12],["0044 0335 ; [.15E4.0021.0008.0110] # LATIN CAPITAL LETTER D WITH STROKE",12],["0055 030B ; [.1833.0022.0008.0170] # LATIN CAPITAL LETTER U WITH DOUBLE ACUTE",12]],"useCount":19195},{"word":"CGI","context":[["use CGI;",6556],["my $input = new CGI;",1973],["use CGI qw ( -utf8 );",1666],["my $query = new CGI;",1638],["my $cgi = new CGI;",740],["=head1 CGI PARAMETERS",343],["use CGI::Carp qw(fatalsToBrowser);",342],["use CGI qw(:standard);",304],["use CGI::Session;",196],["my $input=new CGI;",237]],"useCount":22529},{"word":"COLUMN","context":[["DROP COLUMN `lcsort`,",78],["$dbh->do(\"ALTER TABLE `deleteditems` MODIFY COLUMN `copynumber` VARCHAR(32) DEFAULT NULL\");",39],["$dbh->do(\"ALTER TABLE `subscription` ADD COLUMN `graceperiod` INT(11) NOT NULL default '0';\");",39],["$dbh->do(\"ALTER TABLE deletedbiblioitems MODIFY COLUMN isbn VARCHAR(30) DEFAULT NULL\");",39],["$dbh->do(\"ALTER TABLE `borrowers` ADD COLUMN `altcontactfirstname` varchar(255)\");",39],["ADD COLUMN copynumber SMALLINT(6) DEFAULT NULL AFTER enumchron;\");",76],["DROP COLUMN `subclass`,",78],["ADD COLUMN holdallowed tinyint(1) NULL",78],["DROP COLUMN `dewey`,",78],["COLUMN `returnbranch` varchar(15) default NULL AFTER `holdallowed`\");",124]],"useCount":5776},{"word":"CUNEIFORM","context":[["12429\tCUNEIFORM NUMERIC SIGN SEVEN SHAR2",11],["1244B\tCUNEIFORM NUMERIC SIGN THREE ASH TENU",11],["12174\tCUNEIFORM SIGN KA TIMES ME",11],["1203A\tCUNEIFORM SIGN ASH KABA TENU",11],["120FD\tCUNEIFORM SIGN GASHAN",11],["12082\tCUNEIFORM SIGN DUGUD",11],["12246\tCUNEIFORM SIGN NAM",11],["12293\tCUNEIFORM SIGN SA",11],["121CC\tCUNEIFORM SIGN LAGAB TIMES IM",11],["120AF\tCUNEIFORM SIGN EZEN TIMES LA",11]],"useCount":10802},{"word":"Can","context":[["or warn \"$P: Can't find a readable $configuration_file file $!\\n\";",193],["or mtr_error(\"Can't read experimental file: $exp_file\");",118],["mtr_error(\"Can't use --mem and --vardir at the same time \")",147],["mtr_error(\"Can't use --extern with --embedded-server\");",147],["mtr_error(\"Can't use --extern when using debugger\");",147],["or mtr_error(\"Can't write to $path_config_file: $!\");",119],["build-thread=#        Can be set in environment variable MTR_BUILD_THREAD.",119],["GetOptions(%options) or usage(\"Can't read options\");",126],["or die \"Can't open $filename ($!).\\n\";",135],["mtr_error(\"Can't use --mem and --tmpdir at the same time \")",147]],"useCount":11349},{"word":"Check","context":[["# Check the pre-context.",299],["# Check the post-context.",299],["# Check for bitwise tests written as boolean",299],["# Check for any sort of function declaration.",300],["# Check for potential 'bare' types",300],["# Check for wrappage within a valid hunk of the file",303],["# Check for switch () and associated case and default",303],["# Check operator spacing.",303],["# Check for }<nl>else {, these must be at the same",303],["#  1 Check failed",387]],"useCount":17798},{"word":"CommonObject","context":[["$CommonObject{MainObject} = Kernel::System::Main->new(%CommonObject);",251],["$CommonObject{LogObject}->Log(",777],["%CommonObject,",587],["$CommonObject{EncodeObject} = Kernel::System::Encode->new(%CommonObject);",517],["$CommonObject{EncodeObject} = Kernel::System::Encode->new(%CommonObject);",517],["$CommonObject{LogObject}    = Kernel::System::Log->new(",509],["$CommonObject{ConfigObject} = Kernel::Config->new();",464],["my %CommonObject = ();",279],["my %CommonObject;",270],["$CommonObject{MainObject} = Kernel::System::Main->new(%CommonObject);",251]],"useCount":11594},{"word":"Config","context":[["use Config::IniFiles;",192],["# Config file to use as template for all tests",119],["my $config = new Vyatta::Config;",310],["use OpenBib::Config;",253],["use Vyatta::Config;",208],["use Config::Simple;",203],["$CommonObject{ConfigObject} = Kernel::Config->new();",464],["use Config;",566],["use Kernel::Config;",576],["use Config::Tiny;",129]],"useCount":8198},{"word":"Context","context":[["my $userenv = C4::Context->userenv;",283],["if (C4::Context->preference('ExtendedPatronAttributes')) {",307],["if ( C4::Context->preference('Version') < TransformToNum($DBversion) ) {",467],["if (C4::Context->preference('Version') < TransformToNum($DBversion)){",517],["if ( C4::Context->preference(\"Version\") < TransformToNum($DBversion) ) {",2830],["my $dbh = C4::Context->dbh;",3666],["authnotrequired => ( C4::Context->preference(\"OpacPublic\") ? 1 : 0 ),",279],["my $dbh = C4::Context->dbh();",282],["use C4::Context;",5685],["if (C4::Context->preference(\"Version\") < TransformToNum($DBversion)) {",11887]],"useCount":49726},{"word":"Could","context":[["print STDERR \"Error: Could not open $file\\n\";",194],["or mtr_error(\"Could not get [embedded] section\");",238],["mtr_error(\"Could not connect to server at port $server_port: $!\")",119],["\"Could not install system database from $bootstrap_sql_file\\n\" .",145],["mtr_error(\"Could not create testcase server port: $!\") unless $server;",119],["$tinfo->{logfile}= \"Could not open test tool report '$logfile'\";",119],["or mtr_error(\"Could not open file '$log_file' for reading: $!\");",119],["\"Could not find the lib/ directory \\n\";",119],["mtr_error(\"Could not understand server, '$line'\");",119],["mtr_error(\"Could not find version of MySQL\") unless $mysql_version_id;",227]],"useCount":5896},{"word":"Create","context":[["# Create var and the directories needed in var",149],["view-protocol         Create a view to execute all non updating queries",147],["# Create an environment variable to make it possible",149],["# Create the bootstrap.sql file",147],["# Create selector.",133],["Create a new Catalyst Component.",122],["# Create operation.",160],["# Create minimalistic \"test\" for the reporting",176],["# Create the RenderWindow, Renderer and both Actors",183],["sp-protocol           Create a stored procedure to execute all queries",147]],"useCount":5897},{"word":"Cwd","context":[["use Cwd 'realpath';",70],["#use Cwd;",60],["use Cwd ;",51],["use Cwd qw(getcwd);",38],["use Cwd qw(abs_path cwd);",32],["use Cwd qw(abs_path getcwd);",79],["use Cwd qw(realpath);",84],["use Cwd qw(abs_path);",795],["use Cwd 'abs_path';",1123],["use Cwd;",3202]],"useCount":6035},{"word":"D","context":[["mov\t$D,12($ctx)",180],["1*D=2,",241],["'CHRvar'(D),",281],["possible($1, \"D:\" . $s);",297],["1*D=0,",337],["close(D);",172],["add\t12($ctx),$D",180],["# -D Ruth Bavousett",398],["1*D>=0,",497],["1*D+ -1*E=0,",527]],"useCount":20527},{"word":"DATA","context":[["pod2usage(-verbose => 1,  -input=>\\*DATA);",180],["# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS",150],["DATA",559],["print <<DATA;",544],["# LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE",182],["while(<DATA>){",87],["close(DATA);",114],["# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN",118],["while (<DATA>) {",361],["close DATA;",131]],"useCount":6113},{"word":"DB","context":[["out('Loading DB');",185],["use Kernel::System::DB;",532],["my $reader = getObject('Slash::DB', { db_type => 'reader' });",290],["# called by default form, used to confirm deletion of data in DB",262],["# called by delete_confirm, used to effectively confirm deletion of data in DB",262],["# called by add_form, used to insert/modify data in DB",258],["use Bio::DB::Fasta;",157],["my $db = MediaWords::DB::connect_to_db;",162],["use MediaWords::DB;",225],["use Lacuna::DB;",222]],"useCount":10707},{"word":"DBI","context":[["use DBI;",5022],["{ PrintError => 0}) || die $DBI::errstr;",571],["die \"DBI error with prepare:\", $sth->errstr unless $sth;",104],["$sth->execute || die $DBI::errstr;",112],["$dbh = DBI->connect(\"DBI:mysql:$opt_db:$opt_host\",",487],["$dbh = DBI->connect(\"DBI:mysql:$opt_db:$opt_host\",",487],["my $dbh = DBI->connect(",223],["use DBI qw(:sql_types);",152],["or die $DBI::errstr;",141],["or die \"Couldn't connect to database: \" . DBI->errstr;",125]],"useCount":12157},{"word":"DBversion","context":[["if (CheckVersion($DBversion)) {",273],["SetVersion ($DBversion);",13328],["if (C4::Context->preference(\"Version\") < TransformToNum($DBversion)) {",11887],["SetVersion($DBversion);",7872],["if ( CheckVersion($DBversion) ) {",4790],["if ( C4::Context->preference(\"Version\") < TransformToNum($DBversion) ) {",2830],["if (C4::Context->preference('Version') < TransformToNum($DBversion)){",517],["if ( C4::Context->preference('Version') < TransformToNum($DBversion) ) {",467],["if(CheckVersion($DBversion)) {",405],["if(C4::Context->preference(\"Version\") < TransformToNum($DBversion) ) {",97]],"useCount":81010},{"word":"DEBUG","context":[["print STDERR \"DEBUG: $file: found tag $1 = -1\\n\" if $debug;",87],["if ($DEBUG) {",448],["my $DEBUG = 0;",395],["my $save_temps = $ENV{DEBUG};",277],["use constant DEBUG => 0;",95],["if DEBUG;",99],["$DEBUG = 1;",101],["$debug = $ENV{DEBUG} || 0;",123],["#DEBUG",124],["if($DEBUG < -99);",249]],"useCount":5961},{"word":"DEFAULT","context":[["} #---- END $OP eq DEFAULT",167],["} else { # DEFAULT",169],[") ENGINE=InnoDB DEFAULT CHARSET=utf8",632],[") ENGINE=InnoDB DEFAULT CHARSET=utf8;\");",321],["################## DEFAULT ##################################",201],[") ENGINE=InnoDB DEFAULT CHARSET=utf8 \");",157],[") ENGINE=InnoDB  DEFAULT CHARSET=utf8;",165],[") ENGINE=InnoDB DEFAULT CHARSET=utf8;",757],["use C4::Auth qw/:DEFAULT get_session/;",145],[") ENGINE=InnoDB DEFAULT CHARSET=utf8\");",1057]],"useCount":14546},{"word":"DESCRIPTION","context":[["# DESCRIPTION:                                              |",174],["DESCRIPTION:",85],["#  DESCRIPTION:",112],["#   DESCRIPTION",133],["# DESCRIPTION",142],["DESCRIPTION",164],["=head2 DESCRIPTION",66],["# DESCRIPTION: Verilator: Verilog Test driver/expect definition",589],["=head1 DESCRIPTION",9185],["%%% DESCRIPTION",71]],"useCount":11884},{"word":"DIGIT","context":[["017E5\tKHMER DIGIT FIVE",11],["0A8E1\tCOMBINING DEVANAGARI DIGIT ONE",11],["00038\tDIGIT EIGHT",11],["01813\tMONGOLIAN DIGIT THREE",11],["1D7EE\tMATHEMATICAL SANS-SERIF BOLD DIGIT TWO",11],["0194F\tLIMBU DIGIT NINE",11],["0194D\tLIMBU DIGIT SEVEN",11],["print \"NON DIGIT VALUE FOUND AT $value\\n\";",21],["1D36F\tCOUNTING ROD TENS DIGIT SEVEN",11],["1D7DF\tMATHEMATICAL DOUBLE-STRUCK DIGIT SEVEN",11]],"useCount":7061},{"word":"DIR","context":[["variable MTR_MEM=[DIR]",147],["my @files = readdir(DIR);",143],["tmpdir=DIR            The directory where temporary files are stored",149],["closedir(DIR);",1828],["closedir DIR;",1153],["closedir( DIR );",212],["closedir (DIR);",208],["close DIR;",166],["vardir=DIR            The directory where files generated from the test run",149],["close(DIR);",128]],"useCount":8532},{"word":"DO","context":[["# EXTREME NETWORKS. PLEASE CONTACT EXTREME NETWORKS IF YOU DO NOT HAVE A COPY OF THE",54],["# !!!!!!!   DO NOT EDIT THIS FILE   !!!!!!!",12534],["close(DO);",122],["#* Upper this line, this part is controlled by PVCS VM. DO NOT MODIFY!!",95],["#* Below this line, this part is controlled by PVCS VM. DO NOT MODIFY!!",87],["// MACHINE GENERATED BY THE COMMAND ABOVE; DO NOT EDIT",52],["while (<DO>) {",71],["=head1 TO DO",52],["print OUT \"/* This file is automatically generated.  DO NOT EDIT!\\n\";",53],["## II. DO THE SEARCH AND GET THE RESULTS",57]],"useCount":14370},{"word":"DWP","context":[["&mov\t(&DWP(4,$acc),$s1);",164],["&xor\t($s2,&DWP(8,$key));",282],["&xor\t($s3,&DWP(12,$key));",282],["&xor\t($s1,&DWP(4,$key));",282],["&mov\t(&DWP(8,$key),$s2);",204],["&mov\t(&DWP(12,$key),$s3);",204],["&mov\t(&DWP(4,$key),$s1);",204],["&mov\t(&DWP(8,$acc),$s2);",164],["&mov\t($s1,&DWP(4,$acc));",164],["&mov\t($s3,&DWP(12,$acc));",164]],"useCount":28297},{"word":"Data","context":[["use autouse 'Data::Dumper' => qw(Dumper);",109],["require Data::Dumper;",108],["use Data::Uniqid qw(uniqid);",170],["use Data::Printer;",148],["use Data::Dumper;",11488],["#use Data::Dumper;",459],["# use Data::Dumper;",191],["use Data::Dumper qw(Dumper);",182],["item(X, I, K, Data),",123],["$Data::Dumper::Indent = 1;",161]],"useCount":20270},{"word":"Don","context":[["# Don't delete anything if starting dirty",143],["# name or existence of this file are subject to change without notice.  Don't",6892],["# Don't use it directly.",3636],["# Don't run the example if the file is being included.",449],["# Don't force email to have quotes",192],["# Don't allow that to happen",119],["$tests= {}; # Don't need the tests list in child",119],["return \"\"; # Don't care about mysqlslap",118],["# Don't repeat if test was skipped",119],["print-testcases       Don't run the tests but print details about all the",119]],"useCount":14422},{"word":"Dumper","context":[["require Data::Dumper;",108],["# use Data::Dumper;",191],["use Data::Dumper qw(Dumper);",182],["use Data::Dumper qw(Dumper);",182],["$Data::Dumper::Indent = 1;",161],["use autouse 'Data::Dumper' => qw(Dumper);",109],["use autouse 'Data::Dumper' => qw(Dumper);",109],["#use Data::Dumper;",459],["use Data::Dumper;",11488],["$Data::Dumper::Sortkeys = 1;",105]],"useCount":16303},{"word":"E","context":[["E: 1",316],["1*E=0,",315],["$c = 'E';",303],["my $prev_values = 'E';",299],["1*E>=0,",361],["E-mail:        J.Wielemaker@vu.nl",495],["1*E=1,",502],["1*D+ -1*E=0,",527],["E-mail:        jan@swi.psy.uva.nl",798],["$type = 'E';",1783]],"useCount":65397},{"word":"EDIT","context":[["// MACHINE GENERATED BY THE ABOVE COMMAND; DO NOT EDIT",46],["// MACHINE GENERATED BY THE COMMAND ABOVE; DO NOT EDIT",52],["\"# DO NOT EDIT THIS FILE DIRECTLY; edit Recipe or mkfiles.pl instead.\\n\";",35],["print OUT \"/* This file is automatically generated.  DO NOT EDIT!\\n\";",53],["# !!!!!!!   DO NOT EDIT THIS FILE   !!!!!!!",12534],["* !!!!!!!   DO NOT EDIT THIS FILE   !!!!!!!",32],["$text .= \"// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT\\n\\n\";",25],["=head1 EDIT HISTORY",25],["\"/* Automatically generated by subst.pl --- DO NOT EDIT!!! */\\n\\n\",",25],["* THIS FILE WAS AUTOMATICALLY GENERATED, DO NOT EDIT.",23]],"useCount":13012},{"word":"EGYPTIAN","context":[["13414\tEGYPTIAN HIEROGLYPH AA007A",11],["13131\tEGYPTIAN HIEROGLYPH F045A",11],["130DA\tEGYPTIAN HIEROGLYPH E008A",11],["13409\tEGYPTIAN HIEROGLYPH Z016E",11],["13208\tEGYPTIAN HIEROGLYPH N024",11],["130C6\tEGYPTIAN HIEROGLYPH D064",11],["13165\tEGYPTIAN HIEROGLYPH G033",11],["13356\tEGYPTIAN HIEROGLYPH U032",11],["13337\tEGYPTIAN HIEROGLYPH U005",11],["13228\tEGYPTIAN HIEROGLYPH NL008",11]],"useCount":11781},{"word":"END","context":[["our $usage = <<'END';",546],["END=REGISTER",512],["inputText => <<'END',",382],["END=MCU",338],["END",18269],["return <<'END';",12483],["END DSSUBRECORD",916],["print F <<END",654],["END {",548],["print <<END;",527]],"useCount":42384},{"word":"ENV","context":[["my $verbose = $ENV{VERBOSE};",346],["@ENV{qw(LANGUAGE LANG LC_ALL)} = ('C') x 3;",341],["my $save_temps = $ENV{DEBUG};",277],["foreach my $path (split(/:/, \".:$ENV{HOME}:.scripts\")) {",235],["$ENV{'LC_CTYPE'}=           \"C\";",149],["$ENV{'UMASK_DIR'}=          \"0770\"; # The octal *string*",149],["split(':', $ENV{'DYLD_LIBRARY_PATH'}) : ());",149],["$ENV{'VALGRIND_TEST'}= $opt_valgrind;",149],["$ENV{'DYLD_LIBRARY_PATH'} ?",149],["$VTK_DATA = $ENV{VTK_DATA};",486]],"useCount":39847},{"word":"EOF","context":[["print OUT <<\"EOF\";",333],["EOF",20802],["print <<EOF;",4245],["rules           => <<EOF",2150],["rules\t\t=> <<EOF",1490],["description => <<EOF,",354],["print FC <<EOF;",728],["print <<EOF",693],["print <<\"EOF\";",606],["print FH <<\"EOF\";",355]],"useCount":39639},{"word":"ERROR","context":[["print \"**** ERROR **** \",",238],["if (ERROR(\"OPEN_BRACE\",",218],["ERROR(\"trailing statements should be on next line\\n\" . $herecurr);",218],["if ($name ne 'EOF' && $name ne 'ERROR') {",250],["sub ERROR {",305],["die \"ERROR: unknown $section state: $state. Stopped\";",363],["ERROR(\"OPEN_BRACE\",",551],["ERROR(\"TRAILING_STATEMENTS\",",772],["ERROR(\"SPACING\",",1817],["if (ERROR(\"SPACING\",",1920]],"useCount":29519},{"word":"EnsEMBL","context":[["use Bio::EnsEMBL::Variation::DBSQL::DBAdaptor;",139],["use Bio::EnsEMBL::Compara::DBSQL::DBAdaptor;",159],["Bio::EnsEMBL::Registry->load_all( $registry_file );",168],["my $registry = 'Bio::EnsEMBL::Registry';",186],["use Bio::EnsEMBL::DBSQL::DBAdaptor;",773],["use Bio::EnsEMBL::Utils::Exception qw(throw warning);",137],["use Bio::EnsEMBL::Registry;",899],["use Bio::EnsEMBL::Analysis;",110],["my $reg = 'Bio::EnsEMBL::Registry';",108],["use Bio::EnsEMBL::Utils::Exception qw(warning throw verbose);",97]],"useCount":6446},{"word":"Error","context":[["print STDERR \"Error: Could not open $file\\n\";",194],["Error,",110],["use Error qw(:try);",108],["or die(\"Error in command line arguments\\n\");",91],["qr/^Error:|\\[ERROR\\]/,",119],["qr/InnoDB: Warning|InnoDB: Error/,",119],["|| die \"Error:\\n$command\\nerror\";",120],["mtr_error(\"Error executing mysqld --bootstrap\\n\" .",145],["die \"Error, cmd: $cmd died with ret $ret\";",151],["&Error(",184]],"useCount":11292},{"word":"F","context":[["while (<F>) {",1367],["'F',",471],["while(<F>) {",441],["1*F=1,",474],["-1*F>= -1,",581],["close(F);",2562],["print F \"\\n\";",603],["print F <<END",654],["1*F>=0,",658],["close F;",1856]],"useCount":34441},{"word":"FH","context":[["close FH;",1454],["open $FH, '>', $filename",135],["foreach my $line (<FH>) {",130],["local *FH;",308],["close $FH;",244],["print FH <<\"EOF\";",355],["close(FH);",1170],["while (<FH>) {",514],["# FH -> autoflush(1);",229],["close (FH);",176]],"useCount":8092},{"word":"FILE","context":[["while (<FILE>) {",1530],["close (FILE);",637],["print FILE pack (\"L\", hex (\"0\")) ;",923],["close FILE;",3666],["close(FILE);",3848],["# !!!!!!!   DO NOT EDIT THIS FILE   !!!!!!!",12534],["while(<FILE>) {",536],["close($FILE);",386],["my $FILE;",337],["fclose(FILE);",369]],"useCount":48220},{"word":"FIXME","context":[["# FIXME localized strings should never be in Perl code",60],[";    # FIXME... anything to do here?",149],["# FIXME Should not be needed",129],["#use warnings; FIXME - Bug 2505",1565],["# FIXME",86],["# COinS format FIXME: for books Only",71],["# FIXME check result code?!",68],["# FIXME: no_undef_params needs to be tested",61],["# FIXME rewrite those scripts to return 0 if successful",60],["#FIXME: Should return a error to the user, incorect date format specified",60]],"useCount":5982},{"word":"FOR","context":[["# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY FOR",23],["FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE",642],["# DISCLAIMED. IN NO EVENT SHALL APPLE OR ITS CONTRIBUTORS BE LIABLE FOR ANY",55],["# CHECK FOR SLASH IN DIR      |",54],["#   FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE",42],["#     FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE           #",38],["#FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE",37],["# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE",36],["# BUT A NEW CLEAN AQBUDGETS TABLE CREATE FOR NOW..",36],["printf $log_fh \"\\nRED FLAG FILES FOR MACHINE: %s, Lane: %s, Stage: %s:\\n\",",31]],"useCount":8145},{"word":"FORM","context":[["</FORM>",116],["$FORM = new CGI;",49],["$FORM{$name} .= $value;",48],["$FORM{$name} .= \"\\0\"\t\t\tif(defined($FORM{$name}));",48],["$FORM{$name} .= \"\\0\"\t\t\tif(defined($FORM{$name}));",48],["$sNewFolderName = $FORM{'NewFolderName'};",34],["if($FORM{'NewFolderName'} ne \"\") {",34],["$FORM{$name} = $value;",33],["cgi => $FORM,",32],["'55' => 'GENRE/FORM'",27]],"useCount":9632},{"word":"FROM","context":[["$dbh->do(\"DELETE FROM systempreferences WHERE variable='serialsadditems'\");",78],["FROM",1087],["FROM default_branch_circ_rules",100],["\"DELETE FROM mysql.user where user= '';\\n\");",118],["# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN",118],["#  RECEIVED FROM MEDIATEK AND/OR ITS REPRESENTATIVES ARE PROVIDED TO BUYER ON",158],["$dbh->do(\"DELETE FROM systempreferences WHERE variable='noOPACHolds'\");",78],["SELECT * FROM tables",85],["FROM aqorders",82],["FROM subscription",80]],"useCount":11685},{"word":"File","context":[["#     printf $log_fh \"%d: File %s already exists\\n\", __LINE__, $outfnm if ( -e $outfnm);",510],["use File::Temp;",467],["use File::stat;",443],["use File::Slurp;",649],["use File::Path;",1599],["use IO::File;",1521],["use File::Find;",1678],["use File::Copy;",2259],["use File::Spec;",2865],["use File::Basename;",7899]],"useCount":42647},{"word":"Find","context":[["# Find the end of the macro and limit our statement",124],["# Find out default storage engine being used(if any)",149],["# Find out type of logging that are being used",147],["# Find the absolute path to the test directory",149],["'directory'     => $File::Find::dir,",188],["'full_path'     => $File::Find::name,",188],["# Find the real next line.",280],["# Find out how long the conditional actually is.",588],["# Find out what is on the end of the line after the",595],["use File::Find;",1678]],"useCount":7928},{"word":"FindBin","context":[["use FindBin qw($Bin);",1473],["use FindBin qw( $Bin );",256],["use FindBin qw($RealBin);",1101],["use lib \"$FindBin::Bin/../lib\";",854],["if (!$::Driver) { use FindBin; exec(\"$FindBin::Bin/bootstrap.pl\", @ARGV, $0); die; }",594],["if (!$::Driver) { use FindBin; exec(\"$FindBin::Bin/bootstrap.pl\", @ARGV, $0); die; }",594],["use lib \"$FindBin::Bin\";",367],["eval { require \"$FindBin::Bin/../kohalib.pl\" };",306],["use FindBin;",4826],["use lib (\"$FindBin::Bin/../PerlLib\");",225]],"useCount":13700},{"word":"For","context":[["# For each line in the input file",95],["mysql_install_db($mysqld); # For versional testing",118],["use IO::Scalar;                # For print_help subfunction",127],["# is the parent directory of the \"mysql-test\" directory. For source",145],["# For details, please see",149],["=head2 For more information:",176],["# For debugging purposes only",189],["For example:",243],["\"Use of CONFIG_EXPERIMENTAL is deprecated. For alternatives, see https://lkml.org/lkml/2012/10/23/580\\n\");",256],["# version.  For a full list including contact information of contributors,",164]],"useCount":9637},{"word":"Frame","context":[["% Frame number: 341",245],["% Frame number: 329",245],["% Frame number: 340",245],["% Frame number: 300",245],["% Frame number: 314",245],["% Frame number: 318",245],["% Frame number: 334",245],["% Frame number: 345",245],["% Frame number: 316",245],["% Frame number: 347",245]],"useCount":187019},{"word":"G","context":[["$line !~ /\\G(?:",294],["1*G=1,",273],["1*G=0,",155],["-1*G>= -1,",148],["close(G);",133],["mov\t$G,$SZ*6($ctx)",98],["add\t$SZ*6($ctx),$G",98],["1*G=2,",359],["1*G>=0,",363],["1*G+ -1*H=0,",404]],"useCount":10381},{"word":"GREEK","context":[["00374\tGREEK NUMERAL SIGN",11],["1D21A\tGREEK VOCAL NOTATION SYMBOL-52",11],["003AE\tGREEK SMALL LETTER ETA WITH TONOS",11],["01F41\tGREEK SMALL LETTER OMICRON WITH DASIA",11],["0039F\tGREEK CAPITAL LETTER OMICRON",11],["01FAE\tGREEK CAPITAL LETTER OMEGA WITH PSILI AND PERISPOMENI AND PROSGEGRAMMENI",11],["02129\tTURNED GREEK SMALL LETTER IOTA",11],["1D23A\tGREEK INSTRUMENTAL NOTATION SYMBOL-47",11],["003D6\tGREEK PI SYMBOL",11],["01F15\tGREEK SMALL LETTER EPSILON WITH DASIA AND OXIA",11]],"useCount":5687},{"word":"Get","context":[["# Get and check command line options",454],["# Get AdWords Client, credentials will be read from ~/adwords.properties.",448],["# Get the full operator variant.",296],["# Get options",291],["# Get the args needed for the embedded server",238],["help                  Get this help text",149],["$Kernel::OM->Get('Kernel::System::Log')->Log(",120],["# Get diff and check if dynamic switch is possible",119],["# Get log from server identified from its $proc object, from named test",119],["input => 'Get MySQL Stats',",88]],"useCount":8303},{"word":"GetOptions","context":[["GetOptions(%options) or usage(\"Can't read options\");",126],["Getopt::Long::GetOptions(",127],["&GetOptions ( 'h' => \\$help_flag,",153],["GetOptions(\\%opts,",176],["use Getopt::Long qw(GetOptions);",284],["GetOptions",310],["my $result = GetOptions(",392],["&GetOptions(",409],["GetOptions (",935],["GetOptions(",7171]],"useCount":13144},{"word":"Getopt","context":[["use Getopt::Long qw(:config no_ignore_case bundling);",225],["Getopt::Long::Configure(\"pass_through\");",197],["use Getopt::Long::Descriptive;",174],["Getopt::Long::Configure (\"bundling\");",192],["use Getopt::Long;",18087],["use Getopt::Std;",4065],["use Getopt::Long qw(:config no_ignore_case);",332],["use Getopt::Long qw(GetOptions);",284],["Getopt::Long::Configure('bundling');",273],["use Getopt::Long qw(:config no_auto_abbrev);",391]],"useCount":27043},{"word":"H","context":[["# Author: H. Carvey, keydet89@yahoo.com",219],["-1*H>= -3,",119],["1*H=0,",121],["-H, --hostname=HOST",129],["1*H>=0,",129],["'--format=\"GitCommit: %H%n' .",132],["arg(B, F, H),",144],["1*H=1,",211],["1*H=2,",367],["1*G+ -1*H=0,",404]],"useCount":16659},{"word":"H2","context":[["compare(Order, H1, H2),",101],["'H2',",28],["data(Pros2, Sem2, Prob2, H2, SetA1, SetB1, SetC1, SetD1),",28],["H = H2",28],["$val =~ s/\\\\((\\\\)|0x(..))/ $2 ? $2 : pack('H2', $3) /ge;",24],["vpaddq\t\t$D1,$H2,$H2\t\t# h1 -> h2",21],["vpaddq\t\t$D1,$H2,$H2\t\t# h1 -> h2",21],["vpaddq\t\t$H2,$D3,$D3\t\t# d3 += h0*r3",21],["$val =~ s/([\\0-\\37\\177\\200-\\377])/\"\\\\0x\" . unpack('H2',$1)/eg;",21],["vpsrlq\t\t\\$26,$H2,$D2",21]],"useCount":5831},{"word":"HANGUL","context":[["0A961\tHANGUL CHOSEONG TIKEUT-PIEUP",11],["01114\tHANGUL CHOSEONG SSANGNIEUN",11],["3135\t\tHANGUL LETTER NIEUN JIEUJ",11],["0D7E1\tHANGUL JONGSEONG MIEUM-PIEUP-SIOS",11],["03219\tPARENTHESIZED HANGUL THIEUTH A",11],["0316F\tHANGUL LETTER MIEUM-SIOS",11],["0314F\tHANGUL LETTER A",11],["0FFCA\tHALFWIDTH HANGUL LETTER YEO",11],["01175\tHANGUL JUNGSEONG I",11],["011BB\tHANGUL JONGSEONG SSANGSIOS",11]],"useCount":7744},{"word":"HIEROGLYPH","context":[["13141\tEGYPTIAN HIEROGLYPH G003",11],["1338D\tEGYPTIAN HIEROGLYPH V020G",11],["132E8\tEGYPTIAN HIEROGLYPH S019",11],["130A7\tEGYPTIAN HIEROGLYPH D046",11],["13378\tEGYPTIAN HIEROGLYPH V011",11],["131C9\tEGYPTIAN HIEROGLYPH M016",11],["132FF\tEGYPTIAN HIEROGLYPH S039",11],["13427\tEGYPTIAN HIEROGLYPH AA025",11],["1303D\tEGYPTIAN HIEROGLYPH A052",11],["13032\tEGYPTIAN HIEROGLYPH A043",11]],"useCount":11781},{"word":"HTML","context":[["</HTML>",214],["print <<\"(END ERROR HTML)\";",178],["(END ERROR HTML)",182],["[ 'call_regexp_common'  , 'HTML'   ], ],",132],["# Output:       HTML",184],["use HTML::TreeBuilder;",191],["use HTML::Template;",196],["HTML",203],["<HTML>",221],["use HTML::Entities;",402]],"useCount":7337},{"word":"HTTP","context":[["use HTTP::Request::Common qw(POST);",76],["use HTTP::Request;",255],["use HTTP::Request::Common;",222],["use HTTP::Cookies;",209],["use HTTP::OAI;",202],["return \"failed starting HTTP server\";",68],["use HTTP::Tiny;",116],["use HTTP::Response;",88],["use HTTP::Headers;",71],["&write_data(\"HTTP/1.0 302 Moved Temporarily\\r\\n\");",62]],"useCount":6409},{"word":"I","context":[["-1*I>= -1,",294],["1*I=2,",322],["1*I>=0,",322],["1*I=1,",259],["close I;",235],["1*I=0,",169],["I1 is I + 1,",160],["item(X, I, K, Data),",123],["I1 is I+1,",125],["I2 is I + 1,",135]],"useCount":33288},{"word":"ID","context":[["write_le64(0x00000000, 0x00000000);\t# ID",309],["# delete process ID lock",89],["write_le64(0x00000000, 0x00008000);\t# ID",54],["write_le64(0x00000000, 0x0000b700);\t# ID",62],["# @param sid string the *Session ID* you get from the [login](#login) call",66],["# return job ID as JSON",85],["# get the process ID",191],["'HEADER' => ['ID VARCHAR(128) NOT NULL DEFAULT \\'\\'',",99],["'PRIMARY KEY (ID)'",50],["# no process ID means that is not running",85]],"useCount":5894},{"word":"IN","context":[["while(<IN>) {",1121],["close IN;",4549],["close(IN);",3237],["while (<IN>) {",3399],["while(<IN>)",433],["while (<IN>){",451],["close (IN);",586],["FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE",642],["while (<IN>)",654],["while(<IN>){",860]],"useCount":30166},{"word":"INSERT","context":[["INSERT IGNORE INTO",145],["$dbh->do(\"INSERT INTO `letter` (module, code, name, title, content, is_html)",124],["$dbh->do(\"INSERT INTO `systempreferences` ( `variable` , `value` , `options` , `explanation` , `type` )",114],["INSERT INTO `letter`",174],["INSERT INTO `letter` (`module`, `code`, `name`, `title`, `content`) VALUES",101],["INSERT IGNORE INTO systempreferences (variable,value,explanation,options,type)",154],["INSERT INTO",92],["INSERT INTO systempreferences (variable,value,explanation,options,type)",80],["$dbh->do(\"INSERT INTO `systempreferences` (variable,value,options,explanation,type)",360],["$dbh->do(\"INSERT INTO language_descriptions(subtag, type, lang, description)",91]],"useCount":5981},{"word":"INTERNAL","context":[["'O|output-charset=s'\t\t=> \\$charset_out,\t# INTERNAL",13],["or ReportError(Ts('Cannot write %s', $file) . \": $!\", '500 INTERNAL SERVER ERROR');",11],["'disable-fuzzy'\t\t\t=> \\$disable_fuzzy_p,\t# INTERNAL",13],["'charset=s'\t=> sub { $charset_in = $charset_out = $_[1] },\t# INTERNAL",13],["'I|input-charset=s'\t\t\t=> \\$charset_in,\t# INTERNAL",13],["'po-mode'\t\t\t\t=> \\$po_mode_p,\t\t# INTERNAL",13],["=head3 IMPORTANT INTERNAL VARIABLES",22],["=head1 INTERNAL METHODS",54],["#### INTERNAL MODULES",94],["# !!!!!!!   INTERNAL PERL USE ONLY   !!!!!!!",9514]],"useCount":9760},{"word":"INTO","context":[["INSERT INTO `letter`",174],["$dbh->do(\"INSERT INTO `systempreferences` (variable,value,options,explanation,type)",360],["$dbh->do(\"INSERT INTO language_descriptions(subtag, type, lang, description)",91],["INSERT IGNORE INTO systempreferences (variable,value,explanation,options,type)",154],["INSERT IGNORE INTO",145],["$dbh->do(\"INSERT INTO `letter` (module, code, name, title, content, is_html)",124],["$dbh->do(\"INSERT INTO `systempreferences` ( `variable` , `value` , `options` , `explanation` , `type` )",114],["INSERT INTO `letter` (`module`, `code`, `name`, `title`, `content`) VALUES",101],["INSERT INTO",92],["INSERT INTO systempreferences (variable,value,explanation,options,type)",80]],"useCount":5820},{"word":"IO","context":[["use IO::Socket;",925],["use IO::File;",1521],["my $IN = new IO::File $file, \"r\";",148],["my $Ferr = IO::File->new($error_log)",155],["use IO::Handle;         #autoflush",236],["my $F= IO::File->new($path_current_testlog)",238],["my $server = new IO::Socket::INET",238],["use IO::Select;",487],["use IO::Socket::INET;",549],["use IO::Handle;",744]],"useCount":9463},{"word":"Ident","context":[["} elsif ($cur =~ /^($Ident|$Constant)/o) {",300],["qr{struct\\s+$Ident},",301],["our $Lval\t= qr{$Ident(?:$Member)*};",297],["$prevline =~ /^.\\s*(?:typedef\\s+)?(enum|union|struct)(?:\\s+$Ident)?\\s*$/) {",299],["qr{union\\s+$Ident},",301],["qr{${Ident}_handler},",301],["qr{enum\\s+$Ident},",301],["qr{${Ident}_handler_fn},",301],["while ($line =~ /($Ident)\\s+\\(/g) {",299],["qr{${Ident}_t},",301]],"useCount":19167},{"word":"If","context":[["# If there were whitespace errors which cleanpatch can fix",248],["line would contain the id. If some other column contains the id,",386],["# Guestimate if this is a continuing comment.  If this",303],["# the context looking for a comment \"edge\".  If this",300],["# If we are about to drop off the end, pull in more",300],["# If we have no input at all, then there is nothing to report on",299],["# If the condition carries leading newlines, then count those as offsets.",298],["# If this whole things ends with a type its most",298],["# If the statement carries leading newlines,",294],["# If we see an #else/#elif then the code",294]],"useCount":22415},{"word":"In","context":[["close(In)).",74],["# In mailback mode only produce a report in the negative, for",300],["# to try and find and validate the current printk.  In summary the current",285],["# In most cases, the base directory we find everything relative to,",149],["# In the RPM case, binaries and libraries are installed in the",149],["# In particular, this should not be used as an example of modern Perl",123],["user-args             In combination with start* and no test name, drops",118],["close(In),",111],["get_code(In, C1),",100],["close $In;",74]],"useCount":6832},{"word":"It","context":[["file.  It's your fault if there's no backup or git",93],["# This file is for internal use by core Perl only.  It is retained for",63],["# It is an effect of setting 'pass_through' in option processing",149],["# It's not mysqltest that has exited, kill it",236],["It shows the authority in a (nice) MARC format depending on authority MARC",62],["# It is, so see if the prefix is acceptable.",280],["# Circulation and User's Management. It's written in Perl, and uses Apache2",754],["# group below.  It could be that the tables will match the same set of code",145],["do a proper clean-up. It could also be caused by the previous test run",118],["# or should it be fixed width column parsing? It does not",111]],"useCount":7012},{"word":"J","context":[["1*J=0,",182],["E-mail:        J.Wielemaker@uva.nl",199],["1*J=1,",140],["E-mail:        J.Wielemaker@vu.nl",495],["E-mail:        J.Wielemaker@cs.vu.nl",217],["1*J+ -1*K=0,",394],["(   J=[K|_]",100],["1*J>=0,",108],["verify_wrap(I1, I0, J0, J1, I, J),",114],["1*J=2,",413]],"useCount":8740},{"word":"K","context":[["if($ishelf) {print CSH \"awk '{print \\$2,\\$1}' $shelf_file |psxy $J $R $Wshelf -K -O -P -V >> $psfile\\n\"}",94],["print CSH \"awk '\\$1 == \\\"R\\\" {print \\$2,\\$3}' $recfile |psxy -N $J $R -K -O -P -V $rec >> $psfile\\n\";",90],["print CSH \"awk '{print \\$1,\\$2}' $evefile |psxy -N $J $R -K -O -P -V $src >> $psfile\\n\";",94],["(   J=[K|_]",100],["item(X, I, K, Data),",123],["1*K=2,",166],["1*K=1,",222],["1*J+ -1*K=0,",394],["print CSH \"awk '\\$1 == \\\"R\\\" {print \\$2,\\$3}' $recfile |psxy -N $J $R -K -O -V $rec >> $psfile\\n\";",84],["1*K=0,",83]],"useCount":11363},{"word":"KEY","context":[["PRIMARY KEY (`id`),",82],["'KEY        testtest'",103],["PRIMARY KEY  (`id`)",105],["KEY `message_transport_type` (`message_transport_type`),",117],["KEY `borrowernumber` (`borrowernumber`),",124],["PRIMARY KEY (id),",126],["'vars' => {'KEY' => 'testtest', 'HMAC_KEY' => 'hmactest',",142],["--debug KEY=[0|1]          turn on/off debugging of KEY, where KEY is one of",280],["--debug KEY=[0|1]          turn on/off debugging of KEY, where KEY is one of",280],["--debug KEY=[0|1]          turn on/off debugging of KEY, where KEY is one of",280]],"useCount":13381},{"word":"Kernel","context":[["use lib dirname($RealBin) . '/Kernel/cpan-lib';",561],["use Kernel::Config;",576],["use Kernel::System::Time;",452],["$CommonObject{ConfigObject} = Kernel::Config->new();",464],["$CommonObject{LogObject}    = Kernel::System::Log->new(",509],["$CommonObject{EncodeObject} = Kernel::System::Encode->new(%CommonObject);",517],["use Kernel::System::DB;",532],["use Kernel::System::Log;",563],["use Kernel::System::Main;",562],["use Kernel::System::Encode;",551]],"useCount":13334},{"word":"Koha","context":[["# This file is part of Koha",72],["# This file is part of Koha.",6644],["use C4::Koha;",2199],["use Koha::DateUtils;",558],["# find Koha's Perl modules",442],["use Koha;",354],["# Koha modules used",189],["use Koha::Database;",130],["use Koha::Acquisition::Bookseller;",98],["This file is part of Koha.",81]],"useCount":14686},{"word":"L","context":[["1*L>=0,",373],["if ($string =~ /(?<!%)%L[udi]/) {",256],["L<The SEED Project|http://www.theseed.org>",662],["##print \"C<$c>L<$level><$open$close>O<$off>\\n\";",302],["$av_pend_colon = 'L';",296],["if ($av_pend_colon eq 'C' || $av_pend_colon eq 'L') {",296],["} elsif ($opv eq ':C' || $opv eq ':L') {",296],["-1*L>= -1,",276],["# check for %L{u,d,i} in strings",256],["print FILE pack (\"L\", hex (\"0\")) ;",923]],"useCount":19301},{"word":"LATIN","context":[["01D6      ; [.1833.0021.0002.00FC][.0000.005B.0002.0304] # LATIN SMALL LETTER U WITH DIAERESIS AND MACRON",14],["00DC      ; [.1833.0021.0008.00DC] # LATIN CAPITAL LETTER U WITH DIAERESIS",14],["01D5      ; [.1833.0021.0008.00DC][.0000.005B.0002.0304] # LATIN CAPITAL LETTER U WITH DIAERESIS AND MACRON",14],["01D7      ; [.1833.0021.0008.00DC][.0000.0032.0002.0301] # LATIN CAPITAL LETTER U WITH DIAERESIS AND ACUTE",14],["0055 0308 ; [.1833.0021.0008.00DC] # LATIN CAPITAL LETTER U WITH DIAERESIS",14],["01DC      ; [.1833.0021.0002.00FC][.0000.0035.0002.0300] # LATIN SMALL LETTER U WITH DIAERESIS AND GRAVE",14],["01DA      ; [.1833.0021.0002.00FC][.0000.0041.0002.030C] # LATIN SMALL LETTER U WITH DIAERESIS AND CARON",14],["0075 0308 ; [.1833.0021.0002.00FC] # LATIN SMALL LETTER U WITH DIAERESIS",14],["01D8      ; [.1833.0021.0002.00FC][.0000.0032.0002.0301] # LATIN SMALL LETTER U WITH DIAERESIS AND ACUTE",14],["01DB      ; [.1833.0021.0008.00DC][.0000.0035.0002.0300] # LATIN CAPITAL LETTER U WITH DIAERESIS AND GRAVE",14]],"useCount":16423},{"word":"LEFT","context":[["LEFT JOIN borrowers ON borrowers.borrowernumber=old_issues.borrowernumber",50],["LEFT JOIN",72],["LEFT JOIN aqbooksellers ON (aqbasket.booksellerid = aqbooksellers.id)",33],["LEFT JOIN issuingrules ON",34],["LEFT JOIN aqbudgets  ON (aqorders.budget_id = aqbudgets.budget_id )",37],["LEFT JOIN biblioitems USING (biblionumber)",38],["LEFT JOIN items ON items.biblionumber=reserves.biblionumber",40],["LEFT JOIN biblio ON reserves.biblionumber=biblio.biblionumber",40],["LEFT JOIN borrowers USING(borrowernumber)",79],["LEFT JOIN biblioitems ON (biblioitems.biblioitemnumber=items.biblioitemnumber)",73]],"useCount":6478},{"word":"LETTER","context":[["01DC      ; [.1833.0021.0002.00FC][.0000.0035.0002.0300] # LATIN SMALL LETTER U WITH DIAERESIS AND GRAVE",14],["01D6      ; [.1833.0021.0002.00FC][.0000.005B.0002.0304] # LATIN SMALL LETTER U WITH DIAERESIS AND MACRON",14],["00FC      ; [.1833.0021.0002.00FC] # LATIN SMALL LETTER U WITH DIAERESIS",14],["01D8      ; [.1833.0021.0002.00FC][.0000.0032.0002.0301] # LATIN SMALL LETTER U WITH DIAERESIS AND ACUTE",14],["01DA      ; [.1833.0021.0002.00FC][.0000.0041.0002.030C] # LATIN SMALL LETTER U WITH DIAERESIS AND CARON",14],["01DB      ; [.1833.0021.0008.00DC][.0000.0035.0002.0300] # LATIN CAPITAL LETTER U WITH DIAERESIS AND GRAVE",14],["00DC      ; [.1833.0021.0008.00DC] # LATIN CAPITAL LETTER U WITH DIAERESIS",14],["0075 0308 ; [.1833.0021.0002.00FC] # LATIN SMALL LETTER U WITH DIAERESIS",14],["0055 0308 ; [.1833.0021.0008.00DC] # LATIN CAPITAL LETTER U WITH DIAERESIS",14],["01D9      ; [.1833.0021.0008.00DC][.0000.0041.0002.030C] # LATIN CAPITAL LETTER U WITH DIAERESIS AND CARON",14]],"useCount":82863},{"word":"LIGATURE","context":[["0FDC0\tARABIC LIGATURE MEEM WITH JEEM WITH YEH FINAL FORM",11],["00133\tLATIN SMALL LIGATURE IJ",11],["0FC6C\tARABIC LIGATURE BEH WITH MEEM FINAL FORM",11],["0FC78\tARABIC LIGATURE THEH WITH MEEM FINAL FORM",11],["0FD9B\tARABIC LIGATURE NOON WITH MEEM WITH ALEF MAKSURA FINAL FORM",11],["0FDB8\tARABIC LIGATURE NOON WITH JEEM WITH HAH INITIAL FORM",11],["0FC92\tARABIC LIGATURE YEH WITH ZAIN FINAL FORM",11],["0FD13\tARABIC LIGATURE AIN WITH ALEF MAKSURA FINAL FORM",11],["0FCEC\tARABIC LIGATURE KAF WITH MEEM MEDIAL FORM",11],["0FC93\tARABIC LIGATURE YEH WITH MEEM FINAL FORM",11]],"useCount":5676},{"word":"LV","context":[["B204\t\tLV",22],["AFB8\t\tLV",22],["B62C\t\tLV",22],["AE14\t\tLV",22],["'LV',",52],["AC8C\t\tLV",22],["D264\t\tLV",22],["C3D8\t\tLV",22],["B808\t\tLV",22],["C410\t\tLV",22]],"useCount":8857},{"word":"LVT","context":[["'LVT',",52],["B7B5\tB7CF\tLVT",20],["C951\tC96B\tLVT",20],["CABD\tCAD7\tLVT",20],["CE59\tCE73\tLVT",20],["C641\tC65B\tLVT",20],["CE3D\tCE57\tLVT",20],["CE75\tCE8F\tLVT",20],["B195\tB1AF\tLVT",20],["BCA1\tBCBB\tLVT",20]],"useCount":8032},{"word":"List","context":[["use List::MoreUtils qw(uniq);",212],["use List::Util qw[min max];",161],["use List::Util qw(max);",126],["use List::Util qw(min max);",144],["use List::Util qw(first);",150],["--show-fields   List the available fields.",320],["--fields list   Choose a set of fields to return. List is a comma-separated list of strings.",320],["List the available fields.",306],["use List::Util qw(sum);",237],["use List::MoreUtils qw/uniq/;",225]],"useCount":9797},{"word":"Log","context":[["$CommonObject{LogObject}->Log(",777],["use Kernel::System::Log;",563],["$CommonObject{LogObject}    = Kernel::System::Log->new(",509],["# Log SOAP XML request, response and API errors.",446],["if ($rawline =~ /^\\+.*\\$(Revision|Log|Id)(?:\\$|)/) {",295],["use Log::Log4perl qw(get_logger :levels);",255],["log4perl.appender.Screen.layout=Log::Log4perl::Layout::PatternLayout",201],["use C4::Log;",216],["log4perl.appender.LOGFILE=Log::Log4perl::Appender::File",202],["Log::Log4perl::init(\\$log4Perl_config);",201]],"useCount":7648},{"word":"Long","context":[["use Getopt::Long qw(:config no_ignore_case bundling pass_through);",164],["Getopt::Long::Configure('bundling');",273],["use Getopt::Long qw(:config no_ignore_case bundling);",225],["Getopt::Long::Configure(\"pass_through\");",197],["Getopt::Long::Configure (\"bundling\");",192],["use Getopt::Long::Descriptive;",174],["use Getopt::Long;",18087],["use Getopt::Long qw(:config no_auto_abbrev);",391],["use Getopt::Long qw(:config no_ignore_case);",332],["use Getopt::Long qw(GetOptions);",284]],"useCount":22439},{"word":"M","context":[["-M --manager  specify alternate process manager",108],["M is N-1,",124],["1*M=1,",126],["get(M, caret, Caret),",101],["push @opcode,0xc0|($2&7)|(($3&7)<<3);\t\t# ModR/M",107],["1*M=2,",150],["1*M+ -1*N=0,",383],["input_module(M),",158],["get(M, text_buffer, TB),",226],["1*M=0,",234]],"useCount":12289},{"word":"MA","context":[["# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.",208],["#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA",146],["# MA 02110-1301, USA.",90],["#   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.",83],["# Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.",346],["#  MA 02139, USA.",391],["# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA",529],["Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA",1198],["# Suite 330, Boston, MA  02111-1307 USA",1248],["#    Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.",136]],"useCount":6937},{"word":"MATHEMATICAL","context":[["1D6EF\tMATHEMATICAL ITALIC CAPITAL XI",11],["1D457\tMATHEMATICAL ITALIC SMALL J",11],["1D635\tMATHEMATICAL SANS-SERIF ITALIC SMALL T",11],["1D420\tMATHEMATICAL BOLD SMALL G",11],["1D4AE\tMATHEMATICAL SCRIPT CAPITAL S",11],["1D552\tMATHEMATICAL DOUBLE-STRUCK SMALL A",11],["1D5A2\tMATHEMATICAL SANS-SERIF CAPITAL C",11],["1D633\tMATHEMATICAL SANS-SERIF ITALIC SMALL R",11],["1D658\tMATHEMATICAL SANS-SERIF BOLD ITALIC SMALL C",11],["1D61B\tMATHEMATICAL SANS-SERIF ITALIC CAPITAL T",11]],"useCount":11077},{"word":"MAXVERBOSE","context":[["max => MAXVERBOSE()",67],["printf $log_fh \"EXIT STATE: %s\\n\", $state if ($verbose >= MAXVERBOSE);",78],["printf $log_fh \"ENTRY STATE: %s\\n\", $state if ($verbose >= MAXVERBOSE);",102],["if ($verbose >= MAXVERBOSE);",3593],["#     if ($verbose >= MAXVERBOSE)",102],["use constant MAXVERBOSE => 3;",126],["#             if ($verbose >= MAXVERBOSE);",187],["#         if ($verbose >= MAXVERBOSE);",255],["#                 if ($verbose >= MAXVERBOSE);",340],["if ($verbose >= MAXVERBOSE)",430]],"useCount":5708},{"word":"My","context":[["use My::Find;",119],["my $proc= My::SafeProcess->new",594],["my @diff_opts= My::Options::diff($started_opts, $extra_opts);",119],["use My::SafeProcess;",122],["use My::Platform;",133],["My::SafeProcess::shutdown( $opt_shutdown_timeout,",166],["My::SafeProcess->run",214],["my $tinfo = My::Test->new",218],["my $res= My::SafeProcess->run",222],["my $proc= My::SafeProcess->wait_any_timeout($timeout);",357]],"useCount":6584},{"word":"N","context":[["'N' => 1.5,",668],["-c N",496],["where N is the column (from 1) that contains the id.",386],["mov\t%rdx,$N[0]",384],["'N' => 2.5,",676],["'N',",765],["'N' => 1,",2041],["'N' => 2,",2512],["add\t%rax,$N[1]",384],["$type = 'N';",3589]],"useCount":59246},{"word":"NAME","context":[["--dbname, db_name=NAME              database name NAME",96],["NAME",116],["KERNEL==\"ttyUSB0\", NAME=\"visor\"",52],["'NAME' => 'v',",60],["#       AUTHOR: YOUR NAME (),",68],["-C, --community=COMMUNITY NAME",89],["client-debugger=NAME  Start mysqltest in the selected debugger",145],["debugger=NAME         Start mysqld in the selected debugger",145],["=head1 NAME",10375],["--dbname, db_name=NAME              database name NAME",96]],"useCount":13246},{"word":"NOT","context":[["`timestamp` timestamp NOT NULL default CURRENT_TIMESTAMP on update CURRENT_TIMESTAMP,",168],["userid int(10) unsigned NOT NULL default '0',",159],["`id` int(11) NOT NULL auto_increment,",201],["borrowernumber int(11) NOT NULL,",209],["# it is NOT alive",305],["`borrowernumber` int(11) NOT NULL,",306],["null    => 'NOT NULL',",339],["#     Note that contrary to what you might expect, the above is NOT the same",512],["# !!!!!!!   DO NOT EDIT THIS FILE   !!!!!!!",12534],["`biblionumber` int(11) NOT NULL,",127]],"useCount":37916},{"word":"NULL","context":[["if ($line =~ /^.$Type\\s*$Ident\\s*(?:\\s+$Modifier)*\\s*=\\s*(0|NULL|false)\\s*;/) {",198],["if ($line =~ /\\bstatic\\s.*=\\s*(0|NULL|false)\\s*;/) {",193],["`branchcode` varchar(10) default NULL,",198],["null    => 'NULL',",826],["`id` int(11) NOT NULL auto_increment,",201],["null    => 'NOT NULL',",339],["mov\t%rcx,56(%rsp)\t\t# arg8, (NULL)",331],["`borrowernumber` int(11) NOT NULL,",306],["return NULL;",292],["borrowernumber int(11) NOT NULL,",209]],"useCount":47881},{"word":"Name","context":[["# Name beginning with core, not ending in .gz",103],["functor(Head, Name, Arity).",114],["Name => 'otrs.Scheduler',",110],["atom(Name),",109],["functor(Head, Name, Arity),",396],["functor(Term, Name, Arity),",90],["must_be(atom, Name),",84],["functor(Term, Name, Arity).",82],["print \"| $Structure{Name}->{Content}-$Structure{Version}->{Content}\\n\";",80],["=head1 Name",76]],"useCount":9002},{"word":"No","context":[["mtr_error(\"No, don't remove the vardir when running with --extern\")",147],["if ($line =~ /^\\+/ && defined $lines[$linenr] && $lines[$linenr] =~ /^\\\\ No newline at end of file/) {",300],["\"No #include in ...include/uapi/... should use a uapi/ path prefix\\n\" . $herecurr);",130],["mtr_verbose(\"No need to create '$opt_vardir' it already exists\");",146],["'No',",612],["#\t\t    print \"No studly caps, use _\\n\";",165],["pod2usage(\"$0: No files given.\") if ((@ARGV == 0) && (-t STDIN));",173],["resat:\"   No.\",",242],["# No spaces for:",297],["if ($realcnt != 0 && $line !~ m{^(?:\\+|-| |\\\\ No newline|$)}) {",300]],"useCount":12737},{"word":"O","context":[["1*O=0,",387],["$c = 'O' if ($elements[$n + 2] eq '');",303],["$a = 'O' if ($elements[$n] eq '');",303],["close O;",305],["-1*O>= -1,",330],["##print \"C<$c>L<$level><$open$close>O<$off>\\n\";",302],["1*O>=0,",293],["if (($opv eq ':O' && $ca =~ /\\?$/) ||",200],["if ($^O eq 'MSWin32') {",199],["$av_pend_colon = 'O';",888]],"useCount":15344},{"word":"OF","context":[["# OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR",182],["# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN",118],["use OF::Includes;",123],["# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS",150],["#  THE RULES OF THE INTERNATIONAL CHAMBER OF COMMERCE (ICC).",158],["#  THE RULES OF THE INTERNATIONAL CHAMBER OF COMMERCE (ICC).",158],["# LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE",182],["# LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE",182],["# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF",75],["close OF;",246]],"useCount":6219},{"word":"OK","context":[["#  0 OK",536],["exit $ERRORS{'OK'};",391],["print \"OK\\n\";",223],["if ($d->state() eq \"OK\") {",150],["exit $ERRORS{\"OK\"};",101],["-type => 'OK',",84],["$state = $ERRORS{'OK'};",83],["if ($row->[3] ne \"OK\")",83],["exit $ERRORS{OK};",65],["$state = 'OK';",71]],"useCount":5952},{"word":"ON","context":[["REFERENCES `import_records` (`import_record_id`) ON DELETE CASCADE ON UPDATE CASCADE,",117],["ON DELETE CASCADE ON UPDATE CASCADE",349],["#  RECEIVED FROM MEDIATEK AND/OR ITS REPRESENTATIVES ARE PROVIDED TO BUYER ON",158],["ON DELETE CASCADE ON UPDATE CASCADE,",147],["ON DELETE CASCADE ON UPDATE CASCADE,",147],["ON DELETE SET NULL ON UPDATE SET NULL,",118],["ON DELETE SET NULL ON UPDATE SET NULL,",118],["REFERENCES `matchpoints` (`matchpoint_id`) ON DELETE CASCADE ON UPDATE CASCADE",117],["REFERENCES `matchpoints` (`matchpoint_id`) ON DELETE CASCADE ON UPDATE CASCADE",117],["ON DELETE CASCADE ON UPDATE CASCADE",349]],"useCount":8530},{"word":"ONLY","context":[["# THIS FILE IS INTENDED FOR EXAMPLE/DOCUMENTATION PURPOSES ONLY.",12],["# !!!!!!!   INTERNAL PERL USE ONLY   !!!!!!!",9514],["print \"TESTING MODE ONLY\\n    DOING NOTHING\\n===============\\n\";",44],["\"VC-NT\",   \"Microsoft Visual C++ [4-6] - Windows NT ONLY\",",35],["\"VC-CE\",   \"Microsoft eMbedded Visual C++ 3.0 - Windows CE ONLY\",",35],["# NOTE: 'incremental' is the ONLY autoBarcode option available to those not using javascript",28],["=head2 STARTUP-ONLY OPTIONS",22],["READ-ONLY COMPATIBLE   yes",11]],"useCount":9701},{"word":"OPTIONS","context":[["my $out = $$self{OPTIONS}{TextOut};",94],["# ADDITIONAL OPTIONS",101],["podselect({-sections => [\"SYNOPSIS|ARGUMENTS|OPTIONS|MORE\"]}, $0);",128],["OPTIONS",139],["# COMMAND LINE OPTIONS        |",147],["$0 [ OPTIONS ] [ TESTCASE ]",149],["#      OPTIONS: ---",166],["=head1 OPTIONS",3597],["=head1 COMMAND-LINE OPTIONS",845],["OPTIONS:",221]],"useCount":7468},{"word":"OR","context":[["# OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR",182],["# LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE",182],["# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS",150],["# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS",150],["# OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR",182],["# OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR",182],["#  RECEIVED FROM MEDIATEK AND/OR ITS REPRESENTATIVES ARE PROVIDED TO BUYER ON",158],["#  SPECIFICATION OR TO CONFORM TO A PARTICULAR STANDARD OR OPEN FORUM.",158],["#  SPECIFICATION OR TO CONFORM TO A PARTICULAR STANDARD OR OPEN FORUM.",158],["# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS",150]],"useCount":6217},{"word":"OUT","context":[["open OUT,\"| \\\"$^X\\\" $xlate $flavour $output\";",345],["print $OUT",276],["print OUT;",295],["print OUT <<\"EOF\";",333],["print OUT $_;",356],["*STDOUT=*OUT;",407],["close (OUT);",514],["print OUT \"\\n\";",1089],["close(OUT);",2880],["close OUT;",3600]],"useCount":32375},{"word":"Options","context":[["# Options",150],["Options for debugging the product",149],["# Options:",244],["print \"Options:\\n\";",179],["=head2 Command-Line Options",167],["Options for test case authoring",149],["Options:",3307],["Options to run test on running server",149],["Options to control what test suites or cases to run",149],["Options that specify ports",149]],"useCount":10903},{"word":"Output","context":[["# Output:       HTML",184],["# Output:",325],["use C4::Output;",5752],["# Output:       None",240],["use C4::Output qw(output_html_with_http_headers);",209],["# Output:\t\tNone",197],["=head2 Output Format",95],["Output:",98],["# Output like:",99],["# Output",118]],"useCount":10038},{"word":"P","context":[["my $P = $0;",426],["1*P+ -1*Q=0,",339],["1*P=1,",322],["die \"$P: $filename: open failed - $!\\n\";",301],["<P>",902],["die \"$P: $filename: diff failed - $!\\n\";",300],["$P =~ s@.*/@@g;",299],["print \"$P: no input files\\n\";",270],["die \"$P: $root: --root does not point at a valid tree\\n\";",296],["Usage: $P [OPTION]... [FILE]...",282]],"useCount":17378},{"word":"PARTITION_FIELD","context":[["if($PARTITION_FIELD[$iter] eq \"MBR\"){",82],["for ($iter=0; $iter<@PARTITION_FIELD; $iter++) {",82],["$temp = lc($PARTITION_FIELD[$iter]);",94],["if($preloader_alias{$PARTITION_FIELD[$iter]}){",101],["if($PARTITION_FIELD[$row] eq \"BMTPOOL\" || $PARTITION_FIELD[$row] eq \"OTP\"){",112],["if($PARTITION_FIELD[$row] eq \"BMTPOOL\" || $PARTITION_FIELD[$row] eq \"OTP\"){",112],["last if($PARTITION_FIELD[$iter] eq \"BMTPOOL\" || $PARTITION_FIELD[$iter] eq \"OTP\");",161],["last if($PARTITION_FIELD[$iter] eq \"BMTPOOL\" || $PARTITION_FIELD[$iter] eq \"OTP\");",161],["if($uboot_alias{$PARTITION_FIELD[$iter]}){",166],["for($row=1;$row < @PARTITION_FIELD;$row++){",191]],"useCount":6195},{"word":"PERL","context":[["$cp='$(PERL) util/copy.pl';",34],["my @env = map { \"$_=\\\"$ENV{$_}\\\"\" } sort grep {/^PERL/} keys %ENV;",35],["# !!!!!!!   INTERNAL PERL USE ONLY   !!!!!!!",9514],["# PIPE WITHIN PERL            |",128],["$mkdir='$(PERL) util/mkdir-p.pl';",35],["(cd \\$(\\@D)/..; PERL=perl make -f Makefile asm/\\$(\\@F))",35],["#!%PERL%",38],["#PERL USE",41],["#!@PERL@ -w",77],["#!%PERL% -w",44]],"useCount":10398},{"word":"PHASE","context":[["16988\tBAMUM LETTER PHASE-E GHEUX",11],["1680B\tBAMUM LETTER PHASE-A MAEMBGBIEE",11],["16A0F\tBAMUM LETTER PHASE-F NDAA",11],["16920\tBAMUM LETTER PHASE-D MBAA",11],["*       PHASE 1 ASSERTIONS\t*",15],["16845\tBAMUM LETTER PHASE-A NGGEN",11],["169DD\tBAMUM LETTER PHASE-E NDAA MY HOUSE",11],["169A0\tBAMUM LETTER PHASE-E PU",11],["1697F\tBAMUM LETTER PHASE-E NGKEUX",11],["1698A\tBAMUM LETTER PHASE-E NJAEMLI",11]],"useCount":6263},{"word":"POSIX","context":[["print POSIX::strftime(",98],["use POSIX;",2507],["use POSIX qw(strftime);",783],["use POSIX qw/strftime/;",202],["use POSIX \":sys_wait_h\";",161],["use POSIX qw(ceil floor);",125],["use POSIX qw(ceil);",119],["POSIX::_exit(0);\t# exit hangs here in ActiveState Perl",118],["use POSIX qw(setsid);",84],["my $date = POSIX::strftime(\"%Y%m%d%H%M\",",99]],"useCount":6068},{"word":"PROJECT","context":[["$PROJECT = $ENV{PROJECT};",47],["my $PROJECT               = $ARGV[3];",53],["$cmd=\"cp -pr \\\"$BUILDROOT/$PROJECT\\\" \\\"$BUILDROOT/$PROJECT.tmp\\\"\";",70],["$ret=`rm -fr $BUILDROOT/$PROJECT.tmp`;",70],["print \"Copy $BUILDROOT/$PROJECT to $BUILDROOT/$PROJECT.tmp\\n\";",70],["print \"Copy $BUILDROOT/$PROJECT to $BUILDROOT/$PROJECT.tmp\\n\";",70],["my $CUSTOM_MEMORYDEVICE_H_NAME  = \"mediatek/custom/$PROJECT/preloader/inc/custom_MemoryDevice.h\";",63],["$cmd=\"cp -pr \\\"$BUILDROOT/$PROJECT\\\" \\\"$BUILDROOT/$PROJECT.tmp\\\"\";",70],["&write_tag($PROJECT);",50],["print \"PROJECT = $project, pre_bin = $pre_bin\\n\";",53]],"useCount":10129},{"word":"Path","context":[["use File::Path qw(make_path);",294],["use File::Path qw(mkpath);",179],["my $Path = $_[0];",154],["client-libdir=PATH    Path to the directory where client libraries are located",147],["use File::Path;",1599],["use Path::Tiny;",128],["client-bindir=PATH    Path to the directory where client binaries are located",147],["use My::File::Path; # Patched version of File::Path",119],["use My::File::Path; # Patched version of File::Path",119],["my $opt_tmpdir;                 # Path to use for tmp/ dir",119]],"useCount":6370},{"word":"Perl","context":[["# This file is for internal use by core Perl only.  The format and even the",5878],["# This file is for internal use by the Perl program only.  The format and even",4650],["use Modern::Perl;",1336],["under the same terms as Perl itself.",199],["# Circulation and User's Management. It's written in Perl, and uses Apache2",754],["it under the same terms as Perl itself.",663],["# find Koha's Perl modules",442],["# (especially, ctype_xxx.test). To avoid confusing Perl",149],["# Einladen der benoetigten Perl-Module",307],["# modify it under the same terms as Perl itself.",203]],"useCount":20786},{"word":"Print","context":[["use Pod::Text;                 # Print POD doc as formatted text file",127],["# Print the page",108],["timestamp             Print timestamp before each test report line",119],["use Pod::Select;               # Print subsections of POD documentation",127],["Print debugging information.",203],["Print a brief help message and exits.",484],["# Print desc wrapped",68],["# Print out.",83],["Print a brief help message and exit.",267],["Print this script's manual page and exit.",227]],"useCount":6483},{"word":"Q","context":[["^.DECLARE_$Ident\\(\\Q$name\\E\\)|",276],["1*P+ -1*Q=0,",339],["^.DEFINE_$Ident\\(\\Q$name\\E\\)|",276],["^.LIST_HEAD\\(\\Q$name\\E\\)|",276],["\\b\\Q$name\\E(?:\\s+$Attribute)*\\s*(?:;|=|\\[|\\()",262],["^.(?:$Storage\\s+)?$Type\\s*\\(\\s*\\*\\s*\\Q$name\\E\\s*\\)\\s*\\(|",262],["if ($line =~ /\\bkfree\\(\\Q$expr\\E\\);/) {",155],["1*Q=0,",159],["s@\\Q$sub_from\\E@$sub_to@;",204],["$sub_to =~ s/\\Q$from\\E/$to/;",204]],"useCount":8321},{"word":"QWP","context":[["&movups\t(&QWP(0x10,$out),$inout1);",252],["&movups\t(&QWP(0,$out),$inout0);",312],["&movups\t(&QWP(0x20,$out),$inout2);",204],["&movups\t(&QWP(0x30,$out),$inout3);",156],["&movups\t(&QWP(16*0,$out),$inout0);\t# write output",144],["&movups\t(&QWP(16*1,$out),$inout1);",120],["&movdqa\t\t($T3,&QWP(0,$const));",114],["&movups\t(&QWP(0x40,$out),$inout4);",108],["&$movekey\t($rndkey0,&QWP(0,$key));",96],["&movups\t(&QWP(16*2,$out),$inout2);",96]],"useCount":11195},{"word":"R","context":[["use Statistics::R;",513],["-1*R>= -1,",220],["1*R>=0,",247],["$R->run(q` library(ggplot2) `,",293],["1*R=0,",297],["$R->run(q` data = data.frame() `);",220],["$R->set('mechanism', $mechanism);",200],["$R->stop();",345],["my $R = Statistics::R->new();",457],["my $R = Statistics::R->new();",457]],"useCount":19076},{"word":"Remove","context":[["## \t\t\t# Remove any bracketed sections to ensure we do not",278],["$opt_tmpdir =~ s,/+$,,;       # Remove ending slash if any",149],["# Remove the directory which the link points at",149],["# Remove the \"var\" symlink",149],["# Remove old log files",149],["# Remove the .result file the check generated",238],["# Remove the .err file the check generated",274],["# Remove the old gdbinit file",300],["# Remove C99 comments.",301],["$s =~ s/$;//g; \t# Remove any comments",582]],"useCount":8485},{"word":"Run","context":[["# Run test on running server",149],["mem                   Run testsuite in \"memory\" using tmpfs or ramdisk",149],["# Run include/check-testcase.test",149],["# Guestimate if this is a continuing comment.  Run",300],["Run test cases which name are prefixed with PREFIX",149],["valgrind              Run the \"mysqltest\" and \"mysqld\" executables using",145],["valgrind-mysqltest    Run the \"mysqltest\" and \"mysql_client_test\" executable",145],["valgrind-mysqld       Run the \"mysqld\" executable with valgrind",145],["Run the program with minimal output.",139],["with-ndbcluster-only  Run only tests that include \"ndb\" in the filename",129]],"useCount":6398},{"word":"S","context":[["'S' => 1",2768],["$cc =~ /^\\S+\\@\\S+>/) ||",296],["$cc =~ /^\\S+\\@\\S+>/) ||",296],["} elsif ($rawline =~ /^\\+.*\\S\\s+$/ || $rawline =~ /^\\+\\s+$/) {",299],["'S' => 0.5",1292],["'S' => 0",2136],["$to =~ s/^(\\S)/ $1/;",584],["'S' => 0 # 0",328],["1*S+ -1*T=0,",305],["if ($line =~ /}(?!(?:,|;|\\)))\\S/) {",302]],"useCount":44234},{"word":"SELECT","context":[["my $sth2 = $dbh->prepare(\"SELECT * FROM reserves WHERE borrowernumber=? AND itemnumber=? AND found='W'\");",49],[") SELECT",57],["SELECT DISTINCT",66],["# If we received artists from the SELECT, print them out",80],["SELECT * FROM tables",85],["SELECT COUNT(*)",126],["SELECT *",170],["my $sth_search = $dbh->prepare(\"SELECT count(*) AS total",242],["SELECT",1192],["elsif ($sql !~ /^(SELECT)/i) {",54]],"useCount":8445},{"word":"SET","context":[["ON DELETE SET NULL ON UPDATE SET NULL,",118],["ON DELETE SET NULL ON UPDATE SET NULL,",118],["SET",140],["foreach $set (@SET) {",52],["SET value = ''",60],["SET maxissueqty = ?",64],["$dbh->do('SET FOREIGN_KEY_CHECKS=1 ');",68],["$dbh->do('SET FOREIGN_KEY_CHECKS=0 ');",68],["ON DELETE SET NULL ON UPDATE SET NULL",79],["ON DELETE SET NULL ON UPDATE SET NULL",79]],"useCount":8556},{"word":"SIGN","context":[["12402\tCUNEIFORM NUMERIC SIGN FOUR ASH",11],["12252\tCUNEIFORM SIGN NINDA2",11],["01A1B\tBUGINESE VOWEL SIGN AE",11],["00FCF\tTIBETAN SIGN RDEL NAG GSUM",11],["120E9\tCUNEIFORM SIGN GA2 TIMES TAK4",11],["12083\tCUNEIFORM SIGN DUH",11],["my $SIGN = \"\";",14],["00A82\tGUJARATI SIGN ANUSVARA",11],["1219D\tCUNEIFORM SIGN KASKAL LAGAB TIMES U OVER LAGAB TIMES U",11],["121CD\tCUNEIFORM SIGN LAGAB TIMES IM PLUS HA",11]],"useCount":23169},{"word":"SMALL","context":[["01D6      ; [.1833.0021.0002.00FC][.0000.005B.0002.0304] # LATIN SMALL LETTER U WITH DIAERESIS AND MACRON",14],["01DA      ; [.1833.0021.0002.00FC][.0000.0041.0002.030C] # LATIN SMALL LETTER U WITH DIAERESIS AND CARON",14],["0075 0308 ; [.1833.0021.0002.00FC] # LATIN SMALL LETTER U WITH DIAERESIS",14],["01DC      ; [.1833.0021.0002.00FC][.0000.0035.0002.0300] # LATIN SMALL LETTER U WITH DIAERESIS AND GRAVE",14],["00FC      ; [.1833.0021.0002.00FC] # LATIN SMALL LETTER U WITH DIAERESIS",14],["01D8      ; [.1833.0021.0002.00FC][.0000.0032.0002.0301] # LATIN SMALL LETTER U WITH DIAERESIS AND ACUTE",14],["0111      ; [.15E4.0021.0002.0111] # LATIN SMALL LETTER D WITH STROKE",12],["0064 0335 ; [.15E4.0021.0002.0111] # LATIN SMALL LETTER D WITH STROKE",12],["0171      ; [.1833.0022.0002.0171] # LATIN SMALL LETTER U WITH DOUBLE ACUTE",12],["0075 030B ; [.1833.0022.0002.0171] # LATIN SMALL LETTER U WITH DOUBLE ACUTE",12]],"useCount":24519},{"word":"SPACING","context":[["if (CHK(\"SPACING\",",209],["if (WARN(\"SPACING\",",309],["#\t\t\t\tWARN(\"SPACING\",",80],["if (ERROR(\"SPACING\",",1920],["ERROR(\"SPACING\",",1817],["WARN(\"SPACING\",",684],["ERROR(\"SPACING\", \"space required before the open parenthesis '('\\n\" . $herecurr);",90],["if (show_type(\"SPACING\") && $fix) {",93],["if (&{$msg_type}(\"SPACING\",",96],["##\t\t\tWARN(\"SPACING\",",98]],"useCount":5929},{"word":"START","context":[["# file is: START\\tSTOP\\tMAPPING where START is the starting code point of the",36],["# one code point; MAPPING is what each code point between START and STOP maps",36],["START => undef,",40],["# CDDL HEADER START",50],["START",103],["\"----------SERVER LOG START-----------\\n\". join (\"\", @srv_lines) .",118],["elsif ($line eq 'START'){",119],["print $server \"START\\n\";",119],["# The format of the lines of this file is: START\\tSTOP\\twhere START is the",2478],["# The format of the lines of this file is: START\\tSTOP\\twhere START is the",2478]],"useCount":6544},{"word":"STDERR","context":[["print STDERR \"Error: Could not open $file\\n\";",194],["binmode STDERR, \":utf8\";",184],["print STDERR \"$message\\n\";",178],["close STDERR;",195],["print STDERR \"debug = 1\\n\\n\";",281],["print STDERR <<EOF;",308],["print STDERR",963],["print STDERR \"\\n\\n\";",163],["print STDERR \"CMD: $cmd\\n\";",164],["print STDERR \"\\n\";",1598]],"useCount":32712},{"word":"STDIN","context":[["my $input = <STDIN>;",191],["$ih = \\*STDIN;",480],["while(<STDIN>) {",502],["while (<STDIN>) {",937],["open($FILE, '<&STDIN');",293],["while(<STDIN>){",166],["<STDIN>;",231],["binmode STDIN, \":utf8\";",170],["pod2usage(\"$0: No files given.\") if ((@ARGV == 0) && (-t STDIN));",173],["$rc = <STDIN>; chomp($rc); if ($rc eq \"ERROR\") { exit; }",175]],"useCount":9891},{"word":"STDOUT","context":[["binmode(STDOUT, \":utf8\");",341],["select(STDOUT);",353],["print STDOUT \"\\n\";",292],["select STDOUT;",324],["close(STDOUT);",238],["binmode STDOUT, ':utf8';",236],["*STDOUT=*OUT;",407],["close STDOUT;",1277],["open STDOUT,\">$output\";",509],["binmode STDOUT, \":utf8\";",414]],"useCount":12683},{"word":"SYLLABICS","context":[["0147C\tCANADIAN SYLLABICS KWOO",11],["01637\tCANADIAN SYLLABICS CARRIER TLHEE",11],["01530\tCANADIAN SYLLABICS WEST-CREE YWE",11],["0142C\tCANADIAN SYLLABICS IN",11],["01605\tCANADIAN SYLLABICS CARRIER NEE",11],["01500\tCANADIAN SYLLABICS SWA",11],["018C6\tCANADIAN SYLLABICS NWI",11],["01520\tCANADIAN SYLLABICS WEST-CREE SHWOO",11],["014D6\tCANADIAN SYLLABICS LII",11],["015B0\tCANADIAN SYLLABICS BLACKFOOT E",11]],"useCount":7799},{"word":"SYLLABLE","context":[["1080D\tCYPRIOT SYLLABLE KO",11],["0A0F6\tYI SYLLABLE VU",11],["0A122\tYI SYLLABLE TAX",11],["10837\tCYPRIOT SYLLABLE XA",11],["0A157\tYI SYLLABLE NDAT",11],["0A604\tVAI SYLLABLE NGGE",11],["0A22C\tYI SYLLABLE GGU",11],["0A5D5\tVAI SYLLABLE ZO",11],["0A419\tYI SYLLABLE JJIX",11],["02DDB\tETHIOPIC SYLLABLE GYAA",11]],"useCount":25179},{"word":"SYMBOL","context":[["1D152\tMUSICAL SYMBOL MOON NOTEHEAD WHITE",11],["1D0D5\tBYZANTINE MUSICAL SYMBOL YFESIS MONOGRAMMOS TESSERA DODEKATA",11],["1D181\tMUSICAL SYMBOL COMBINING ACCENT-STACCATO",11],["02675\tRECYCLING SYMBOL FOR TYPE-3 PLASTICS",11],["1F735\tALCHEMICAL SYMBOL FOR REGULUS-4",11],["1D0C2\tBYZANTINE MUSICAL SYMBOL FTHORA DIATONIKI NI ANO",11],["--sym=SYMBOL      Unique symbol to use for RTCD initialization function",13],["01B7C\tBALINESE MUSICAL SYMBOL LEFT-HAND OPEN PING",11],["1D23F\tGREEK INSTRUMENTAL NOTATION SYMBOL-52",11],["1D1AA\tMUSICAL SYMBOL COMBINING DOWN BOW",11]],"useCount":12938},{"word":"SYNOPSIS","context":[["# SYNOPSIS",55],["=head1 SYNOPSIS",8183],["podselect({-sections => [\"SYNOPSIS|ARGUMENTS|OPTIONS|MORE\"]}, $0);",128],["podselect({-sections => [\"SYNOPSIS|MORE\"]}, $0);",128],["SYNOPSIS",109],["#* SYNOPSIS",62],["# print SYNOPSIS",54],["=head2 SYNOPSIS",34],["##  SYNOPSIS",34],["for $sect (qw(NAME SYNOPSIS DESCRIPTION OPTIONS ENVIRONMENT FILES",30]],"useCount":9017},{"word":"SZ","context":[["mov\t$D,$SZ*3($ctx)",98],["mov\t$G,$SZ*6($ctx)",98],["add\t$SZ*0($ctx),$A",98],["mov\t$B,$SZ*1($ctx)",98],["mov\t$C,$SZ*2($ctx)",98],["add\t$SZ*3($ctx),$D",98],["add\t$SZ*7($ctx),$H",98],["add\t$SZ*4($ctx),$E",98],["$SZ=4;",108],["$SZ=8;",99]],"useCount":8156},{"word":"Set","context":[["# Set special valgrind options unless options passed on command line",149],["# Set exe to debuggername",296],["# Set dummy worker id to align report with normal tests",176],["# Set defaults",171],["# Set default message",149],["# Set valgrind_options to default unless already defined",143],["debug-sync-timeout=NUM Set default timeout for WAIT_FOR debug sync",119],["$opt_max_save_datadir, set to 0 for no limit. Set",119],["# Set different ports per thread",119],["# Set one week timeout (check-testcase timeout will be 1/10th)",119]],"useCount":8838},{"word":"SetVersion","context":[["SetVersion ($DBversion);",13328],["SetVersion($DBversion);",7872],["SetVersion($DBversion)",26],["=head2 SetVersion",34],["SetVersion($NewDBversion);",43],["sub SetVersion {",47]],"useCount":21350},{"word":"Spec","context":[["my $input = File::Spec->catfile($indir, $file);",88],["use File::Spec;                # Convert a relative path to an abosolute path",122],["#    print_help (\"help\",  File::Spec->rel2abs($0) );",126],["#    print_help (\"usage\", File::Spec->rel2abs($0) );",126],["#my $outFile_ge9 = File::Spec->catfile($outDir, join(\".\", @parts) . \"_ge9.\" . $ext);",217],["#use File::Spec;",224],["use File::Spec::Functions;",295],["use File::Spec;",2865],["use File::Spec::Functions qw/splitdir/;",83],["use File::Spec::Functions qw(rel2abs);",82]],"useCount":6977},{"word":"System","context":[["use Kernel::System::Encode;",551],["use Kernel::System::ObjectManager;",249],["$CommonObject{MainObject} = Kernel::System::Main->new(%CommonObject);",251],["# Meran - MERAN UNLP is a ILS (Integrated Library System) wich provides Catalog,",754],["use Kernel::System::Time;",452],["$CommonObject{LogObject}    = Kernel::System::Log->new(",509],["use Kernel::System::Log;",563],["use Kernel::System::Main;",562],["use Kernel::System::DB;",532],["$CommonObject{EncodeObject} = Kernel::System::Encode->new(%CommonObject);",517]],"useCount":11935},{"word":"T","context":[["$type = 'T';",596],["and\t@T[1],@T[0]",124],["and\t@T[1],@T[0]",124],["vswp\t\t`&Dhi(\"@T[0]\")`,`&Dlo(\"@T[0]\")`",156],["vswp\t\t`&Dhi(\"@T[0]\")`,`&Dlo(\"@T[0]\")`",156],["mov\t@T[0],4($ctx)",160],["add\t4($ctx),@T[0]",160],["if (defined $2 && $type eq 'C' || $type eq 'T') {",292],["1*S+ -1*T=0,",305],["'T',",496]],"useCount":19214},{"word":"T1","context":[["vpxor\t\t$Ij,$T1,$T1",204],["vpunpckhqdq\t$Ij,$Ij,$T1",238],["vpxor\t\t$Ij,$T1,$T1",204],["vpclmulqdq\t\\$0x00,$HK,$T1,$Xmi",119],["pxor\t\t$T1,$Xhi",105],["pxor\t\t$Xi,$T1\t\t\t#",97],["&pshufb\t\t($T1,$T3);",81],["&movdqu\t\t($T1,&QWP(0,$inp));\t# Ii",81],["pshufd\t\t\\$0b01001110,$Xi,$T1",77],["pshufb\t\t$T3,$T1",77]],"useCount":9744},{"word":"T2","context":[["vpxor\t\t$Ii,$T2,$T2",136],["vpxor\t\t$T1,$T2,$T2",56],["vpxor\t\t$T2,$Xi,$Xi",62],["pxor\t\t$Xi,$T2",68],["pxor\t\t$T2,$Xi",68],["&pxor\t\t($Xi,$T2);\t\t#",69],["pxor\t\t$T2,$Xhi\t\t#",74],["pxor\t\t$T2,$Xi\t\t\t#",108],["vpunpckhqdq\t$Ii,$Ii,$T2",136],["vpxor\t\t$Ii,$T2,$T2",136]],"useCount":5762},{"word":"TABLE","context":[["ALTER TABLE `aqbudgets`",108],["lea\t$TABLE(%rip),$Tbl",110],["$dbh->do(\"ALTER TABLE items",114],["vmovdqa\t$TABLE+`$SZ*2*$rounds`(%rip),$t3",97],["ALTER TABLE aqorders",116],["$dbh->do(\"ALTER TABLE import_batches",141],["$dbh->do(\"ALTER TABLE deleteditems",152],["print TABLE \"",153],["$dbh->do(\"ALTER TABLE aqbooksellers CHANGE name name mediumtext NOT NULL\");",78],["</TABLE>",193]],"useCount":20062},{"word":"THIS","context":[["\"# DO NOT EDIT THIS FILE DIRECTLY; edit Recipe or mkfiles.pl instead.\\n\";",35],["# !!!!!!!   IT IS DEPRECATED TO USE THIS FILE   !!!!!!!",63],["* BY OPENING THIS FILE, RECEIVER HEREBY UNEQUIVOCALLY ACKNOWLEDGES AND AGREES",37],["print $out \"/* THIS IS A GENERATED FILE. CHANGES WILL BE OVERWRITTEN. */\\n\";",38],["# !!!!!!!   DO NOT EDIT THIS FILE   !!!!!!!",12534],["#  BY OPENING THIS FILE, BUYER HEREBY UNEQUIVOCALLY ACKNOWLEDGES AND AGREES",158],["# BY OPENING THIS FILE, RECEIVER HEREBY UNEQUIVOCALLY ACKNOWLEDGES AND AGREES",41],["#NOTICE.    ALL INFORMATION AND SPECIFICATIONS IN THIS DEVELOPER KIT ARE PRESENTED WITHOUT",54],["#THE INFORMATION AND SPECIFICATIONS IN THIS DEVELOPER KIT ARE SUBJECT TO CHANGE WITHOUT",54],["# THIS PROGRAM IS PROVIDED \"AS IS\" AND WITHOUT ANY EXPRESS OR IMPLIED",34]],"useCount":13422},{"word":"TRUE","context":[["#         if ($first_time == TRUE)",136],["if ($first_time == TRUE)",473],["$first_time = TRUE;",405],["return TRUE;",269],["$report_precision{$section}{set} = TRUE;",255],["TRUE);",208],["#     $first_time = TRUE;",204],["elsif ($use_neg_delta == TRUE)",179],["#                                TRUE);",170],["use constant TRUE => 1;",155]],"useCount":5728},{"word":"Term","context":[["use Term::ANSIColor qw(:constants);",519],["functor(Term, Name, Arity),",90],["nonvar(Term),",92],["$Term::ANSIColor::AUTORESET = 1;",93],["(\tvar(Term) ->",80],["functor(Term, Name, Arity).",82],["use Term::ReadLine;",97],["compound(Term),",122],["use Term::ReadKey;",221],["use Term::ANSIColor;",365]],"useCount":5956},{"word":"Test","context":[["# Test case failure reported by mysqltest",145],["# Test case was ok and called \"skip\"",119],["use Test::More;",735],["# Test has failed, force is off",119],["# Test should be run one more time unless it has failed",119],["# DESCRIPTION: Verilator: Verilog Test driver/expect definition",589],["my $tinfo = My::Test->new",218],["use Test;",142],["# Test case authoring",149],["#  See the \"MySQL Test framework manual\" for more information",145]],"useCount":8105},{"word":"The","context":[["L<The SEED Project|http://www.theseed.org>",662],["strings. The following fields are available:",1078],["# The format of the lines of this file is: START\\tSTOP\\twhere START is the",2478],["# This file is for internal use by the Perl program only.  The format and even",4650],["# This file is for internal use by core Perl only.  The format and even the",5878],["entity to return. Field-list is a comma-separated list of strings. The",612],["This is a pipe command. The input is taken from the standard input, and the",493],["The standard input should be a tab-separated table (i.e., each line",492],["Part of XPCE --- The SWI-Prolog GUI toolkit",482],["# The name this swash is to be known by, with the format of the mappings in",413]],"useCount":46908},{"word":"This","context":[["# This file is for internal use by core Perl only.  The format and even the",5878],["# This file is machine-generated by lib/unicore/mktables from the Unicode",5126],["# This file is for internal use by the Perl program only.  The format and even",4650],["This is a pipe command. The input is taken from the standard input, and the",493],["# This file is part of Koha.",6644],["# This file is machine-generated by mktables from the Unicode",4479],["# This file is built by mktables from e.g. UnicodeData.txt.",2362],["# This file supports:",1898],["# This is a SAS Component",818],["# This file is part of Meran.",754]],"useCount":62891},{"word":"Time","context":[["use Kernel::System::Time;",452],["$CommonObject{TimeObject} = Kernel::System::Time->new(%CommonObject);",168],["use Time::HiRes;",337],["use Time::Local;",671],["$timevrfyend{$testnum} = Time::HiRes::time() if($timestats);",329],["::rptMsg(\"LastWrite Time \".gmtime($key->get_timestamp()).\" (UTC)\");",313],["use Time::HiRes qw(gettimeofday);",283],["use Time::HiRes qw(time);",193],["use Time::Piece;",177],["use Time::localtime;",166]],"useCount":7682},{"word":"TransformToNum","context":[["if ( C4::Context->preference(\"Version\") < TransformToNum($DBversion) ) {",2830],["if (C4::Context->preference('Version') < TransformToNum($DBversion)){",517],["if ( C4::Context->preference('Version') < TransformToNum($DBversion) ) {",467],["if (C4::Context->preference(\"Version\") < TransformToNum($DBversion)) {",11887],["if(C4::Context->preference(\"Version\") < TransformToNum($DBversion) ) {",97],["sub TransformToNum {",48],["if (C4::Context->preference(\"Version\") == TransformToNum($DBversion)){",43],["my $version_number = TransformToNum($proposed_version);",25],["my $kohaversion = TransformToNum($_[0]);",31],["=head2 TransformToNum",34]],"useCount":16059},{"word":"Type","context":[["$stat =~ /^.\\s*(?:extern\\s+)?$Type\\s+($Ident)(\\s*)\\(/s)",290],["$Type|",294],["if ($prefix !~ /$Type\\s+$/ &&",296],["$Type\t= qr{",297],["$possible =~ s/\\s*$Type\\s*//g;",297],["} elsif ($ctx =~ /$Type$/) {",298],["our $Type;",300],["if ($line =~ /\\b$Type\\s+$Inline\\b/ ||",300],["<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">",321],["## \t\t    $line !~ /^.\\s*$Type\\s+$Ident(?:\\s*=[^,{]*)?\\s*,\\s*$Type\\s*$Ident.*/) {",278]],"useCount":12008},{"word":"U","context":[["$variant = 'U';",296],["my $sign = \"\"; $sign = \"U\" if ($1);",116],["1*U=0,",122],["-1*U>= -1,",180],["1*U>=0,",186],["$opv eq '*U' || $opv eq '-U' ||",295],["rrdMax => U,",499],["$opv eq '&U' || $opv eq '&&U') {",294],["$opv eq '&U' || $opv eq '&&U') {",294],["$opv eq '*U' || $opv eq '-U' ||",295]],"useCount":86417},{"word":"UPDATE","context":[["ON DELETE CASCADE ON UPDATE CASCADE",349],["ON DELETE CASCADE ON UPDATE CASCADE,",147],["ON DELETE SET NULL ON UPDATE SET NULL,",118],["REFERENCES `matchpoints` (`matchpoint_id`) ON DELETE CASCADE ON UPDATE CASCADE",117],["REFERENCES `import_records` (`import_record_id`) ON DELETE CASCADE ON UPDATE CASCADE,",117],["UPDATE",115],["UPDATE systempreferences",299],["`timestamp` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,",104],["UPDATE letter",80],["REPLACE, UPDATE and DELETE queries.",96]],"useCount":9343},{"word":"USA","context":[["#  MA 02139, USA.",391],["# USA",103],["#    Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.",136],["#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA",146],["USA.",185],["# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.",208],["# Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.",346],["# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA",529],["Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA",1198],["# Suite 330, Boston, MA  02111-1307 USA",1248]],"useCount":6590},{"word":"USE","context":[["#  @PRIVACY & USE : PUBLIC, Must be used as an object instance function",77],["# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN",118],["# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS",150],["# LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE",182],["# OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR",182],["# !!!!!!!   INTERNAL PERL USE ONLY   !!!!!!!",9514],["# !!!!!!!   IT IS DEPRECATED TO USE THIS FILE   !!!!!!!",63],["#PERL USE",41],["#KBASE USE",41],["#### USE LIBRARY",39]],"useCount":11172},{"word":"Unicode","context":[["# This file is built by mktables.PL from e.g. Unicode.301.",239],["# This file is machine-generated by mktables from the Unicode",4479],["# This file is machine-generated by lib/unicore/mktables from the Unicode",5126],["# use it directly.  Use Unicode::UCD to access the Unicode character data",1538],["# use it directly.  Use Unicode::UCD to access the Unicode character data",1538],["# This file returns the single code point in Unicode Version 6.1.0 that",133],["# this version of Unicode uses this file.  Each one is listed in a separate",145],["# points in other Unicode releases, or it could be purely coincidence that",145],["# Use Unicode::UCD::prop_invlist() to access the contents of this file.",826],["# This file returns the single code point in Unicode Version 5.2.0 that",272]],"useCount":15893},{"word":"Upgrade","context":[["print \"Upgrade to $DBversion done (updating 4 fields in message_queue table)\\n\";",39],["print \"Upgrade to $DBversion done (adding matcher_id to import_batches)\\n\";",39],["print \"Upgrade to $DBversion done (added ceilingDueDate system preference)\\n\";",39],["print \"Upgrade to $DBversion done (Add system preference OpacBrowseResults ))\\n\";",57],["print \"Upgrade to $DBversion done (Atomic update for OAI-PMH sets management)\\n\";",60],["print \"Upgrade to $DBversion done (adding ReservesNeedReturns systempref, in circulation)\\n\";",75],["print \"Upgrade to $DBversion done (add browser table if not already present)\\n\";",78],["print \"Upgrade to $DBversion done (added 2 new 'AutoEmailOpacUser' sysprefs)\\n\";",78],["print \"Upgrade to $DBversion done (userid index added)\\n\";",78],["print \"Upgrade to $DBversion done (saved_sql and saved_reports added)\\n\";",39]],"useCount":17600},{"word":"Upper","context":[["'upper' => 'Upper/Y',",14],["#* Upper this line, this part is controlled by PVCS VM. DO NOT MODIFY!!",95],["# variants.  Upper/lower case distinctions never matter.",2480],["'Upper',",71],["'upper=t' => 'Upper/Y',",14],["* Upper this line, this part is controlled by PVCS VM. DO NOT MODIFY!!",49],["'uppercase' => 'Upper/Y',",14],["'upper=true' => 'Upper/Y',",14],["'upper=y' => 'Upper/Y',",14],["'isupper' => 'Upper/Y',",14]],"useCount":5966},{"word":"Usage","context":[["Usage:",1037],["sub Usage",117],["# Usage:",730],["=head2 Usage",138],["print \"Usage:\\n\";",168],["# Usage",238],["sub Usage {",188],["use Pod::Usage;",3815],["Usage();",423],["Usage: $P [OPTION]... [FILE]...",282]],"useCount":10508},{"word":"Use","context":[["compress              Use the compressed protocol between client and server",149],["# use it directly.  Use Unicode::UCD to access the Unicode character data",1538],["# Use --mem=<dir> as first location to look.",149],["\"Use of $flag is deprecated, please use \\`$replacement->{$flag} instead.\\n\" . $herecurr) if ($replacement->{$flag});",167],["\"Use of volatile is usually wrong: see Documentation/volatile-considered-harmful.txt\\n\" . $herecurr);",182],["\"Use #include <linux/$file> instead of <asm/$file>\\n\" . $herecurr);",185],["\"Use of CONFIG_EXPERIMENTAL is deprecated. For alternatives, see https://lkml.org/lkml/2012/10/23/580\\n\");",256],["# Use Unicode::UCD::prop_invlist() to access the contents of this file.",826],["ps-protocol           Use the binary protocol between client and server",147],["die(\"--valgrind-options=s is deprecated. Use \",",148]],"useCount":11479},{"word":"V","context":[["if ($^V && $^V ge 5.10.0 &&",2030],["$c = 'V' if ($elements[$n + 2] ne '');",303],["if ($^V && $^V ge 5.10.0 &&",2030],["$av_pending = 'V';",598],["V: 0",368],["$a = 'V' if ($elements[$n] ne '');",303],["Version: $V",283],["if ($op_type ne 'V' &&",299],["if ($type eq 'V') {",296],["$type = 'V';",892]],"useCount":21191},{"word":"VERSION","context":[["use vars qw($VERSION);",513],["=head1 VERSION HISTORY",97],["=head1 VERSION",851],["my $VERSION = getVersion();",686],["\"Version: $VERSION\\n\\n\";",112],["use vars qw($VERSION %IRSSI);",362],["use version; our $VERSION = qv('v0.1.0');",201],["#      VERSION: 1.0",198],["This is $progname, from the Debian devscripts package, version ###VERSION###",113],["VERSION: $Rev$",115]],"useCount":7584},{"word":"Version","context":[["if (C4::Context->preference(\"Version\") < TransformToNum($DBversion)) {",11887],["# database, Version 5.2.0.  Any changes made here will be lost!",1670],["if ( C4::Context->preference('Version') < TransformToNum($DBversion) ) {",467],["if (C4::Context->preference('Version') < TransformToNum($DBversion)){",517],["# Version 2.0.",597],["# database, Version 6.3.0.  Any changes made here will be lost!",1161],["# database, Version 6.0.0.  Any changes made here will be lost!",1994],["# database, Version 6.1.0.  Any changes made here will be lost!",2613],["if ( C4::Context->preference(\"Version\") < TransformToNum($DBversion) ) {",2830],["# database, Version 6.2.0.  Any changes made here will be lost!",1762]],"useCount":33994},{"word":"W","context":[["if ($ctx !~ /[WEOBC]x[^W]/ && $ctx !~ /[^W]x[WOBEC]/) {",299],["close(W);",104],["#!/usr/bin/perl -W",173],["if ($line =~ /^.\\s*sema_init.+,\\W?0\\W?\\)/) {",214],["if ($ctx !~ /[WEOBC]x[^W]/ && $ctx !~ /[^W]x[WOBEC]/) {",299],["if ($line =~ /^.\\s*sema_init.+,\\W?0\\W?\\)/) {",214],["$c = 'W' if ($elements[$n + 2] =~ /^\\s/);",303],["$a = 'W' if ($elements[$n] =~ /\\s$/);",303],["1*V+ -1*W=0,",224],["W :->",256]],"useCount":9645},{"word":"WARN","context":[["WARN(\"BRACES\",",381],["WARN(\"BAD_SIGN_OFF\",",710],["WARN(\"SPACING\",",684],["WARN(\"STATIC_CONST_CHAR_ARRAY\",",469],["WARN(\"AVOID_EXTERNS\",",374],["if (WARN(\"SPACING\",",309],["sub WARN {",304],["if (WARN(\"BAD_SIGN_OFF\",",303],["WARN(\"NETWORKING_BLOCK_COMMENT_STYLE\",",280],["WARN(\"LINE_CONTINUATIONS\",",326]],"useCount":25193},{"word":"WHERE","context":[["WHERE branchcode = ?\");",194],["$dbh->do(\"DELETE FROM systempreferences WHERE variable='serialsadditems'\");",78],["WHERE itemtype = ?\");",71],["my  ( $catcodes, $labels ) =  GetborCatFromCatType( 'A', 'WHERE category_type = ?' );",177],["$dbh->do(\"DELETE FROM systempreferences WHERE variable='noOPACHolds'\");",78],["WHERE 1\";",87],["WHERE categorycode = ?\");",71],["WHERE",1205],["WHERE branchcode = ?",175],["WHERE items.itemnumber=issues.itemnumber",69]],"useCount":14148},{"word":"WITH","context":[["tidycat WITH clause, which is not valid SQL.",18],["special WITH clause for implementation-specific features of the",18],["WITH (",19],["# TO WORK WITH APOLLO         |",31],["# OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR",182],["0089\t\tCHARACTER TABULATION WITH JUSTIFICATION",16],["# NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE",26],["# !!!IMPORTANT!!!!: UPDATE THIS MATRIX WITH THE APPROPRIATE G OR H MATRIX",24],["# TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE",22],["#  WITHDRAWAL OF THE CODE CAPABILITY TO THE EXTENT NEEDED TO COMPLY WITH",24]],"useCount":28198},{"word":"We","context":[["# We have looked at and allowed this specific line.",298],["# We want to check the first line inside the block",296],["# We are truly at the end, so shuffle to the next line.",296],["######################### We start with some black magic to print on failure.",164],["# We do this here, since we do not want to Valgrind the nested invocations",149],["# We make the path absolute, as the server will do a chdir() before usage",147],["# We need \\b after 'init' otherwise 'initconst' will cause a false positive in a check",258],["# We don't need this any more",117],["$url =~ s! \\* !$g_escape_table{'*'}!gx;\t\t# We've got to encode these to avoid",108],["The operators supported are as follows. We provide text based",80]],"useCount":9664},{"word":"X","context":[["substr($res, $off, 1, 'X');",299],["open OUT,\"| \\\"$^X\\\" $xlate $flavour $output\";",345],["while ($line =~ /(?:^|\")([X\\t]*)(?:\"|$)/g) {",297],["var(X),",246],["$Xi++;\tpush(@X,shift(@X));\t# \"rotate\" X[]",212],["$Xi++;\tpush(@X,shift(@X));\t# \"rotate\" X[]",212],["$Xi++;\tpush(@X,shift(@X));\t# \"rotate\" X[]",212],["get_attr(X,itf,Att),",352],["# 'X' below means that this form is discouraged.  Consult perluniprops.pod",370],["my $clean = 'X' x length($1);",598]],"useCount":50831},{"word":"XML","context":[["use XML::Parser;",171],["my $parser = XML::LibXML->new();",181],["} elsif ($mode eq \"XML-DOC\") {",198],["} elsif ($mode eq \"XML-WEB\") {",231],["use MARC::File::XML;",233],["# Log SOAP XML request, response and API errors.",446],["use XML::Twig;",177],["my $xml = new XML::Simple;",99],["use XML::LibXML;",609],["use XML::Simple;",842]],"useCount":7642},{"word":"XMM","context":[["movdqu\t@XMM[1], 0x10($out)",478],["veor\t\t@XMM[1], @XMM[1], @XMM[ 9]",364],["veor\t\t@XMM[0], @XMM[0], @XMM[ 8]",364],["vst1.8\t\t{@XMM[0]-@XMM[1]}, [$out]!",364],["movdqu\t@XMM[0], 0x00($out)\t# write output",514],["vst1.8\t\t{@XMM[0]-@XMM[1]}, [$out]!",364],["veor\t\t@XMM[0], @XMM[0], @XMM[ 8]",364],["veor\t\t@XMM[0], @XMM[0], @XMM[ 8]",364],["vld1.64\t\t{@XMM[8]}, [r0,:128]\t\t@ next round tweak",364],["veor\t\t@XMM[1], @XMM[1], @XMM[ 9]",364]],"useCount":44855},{"word":"Xi","context":[["&reduction_alg9\t($Xhi,$Xi);",157],["$Xi++;\tpush(@X,shift(@X));\t# \"rotate\" X[]",212],["add\t\t$Xi,$e,$e",77],["pshufd\t\t\\$0b01001110,$Xi,$T1",77],["pshufb\t\t$T3,$Xi",80],["&pshufb\t\t($Xi,$T3);",90],["pxor\t\t$Xi,$T1\t\t\t#",97],["$Xi=0;",106],["pxor\t\t$T2,$Xi\t\t\t#",108],["$Xi++;",136]],"useCount":13062},{"word":"Y","context":[["1*Y+ -1*Z=0,",149],["# with -ndb-Y.Y.Y[-status]",90],["wrappable(X, Y).",98],["\"%Y-%m-%d %H:%M:%S => \", localtime",98],["my $date = POSIX::strftime(\"%Y%m%d%H%M\",",99],["get(Y,YL,YU,YExp),",100],["},$self,$mc,$top,$X,$Y]);",106],["my ($self,$mc,$top,$X,$Y) = @_;",106],["'Y',",712],["$callback .= \"&l_$item=Y\";",116]],"useCount":16330},{"word":"YI","context":[["0A29B\tYI SYLLABLE ZOT",11],["0A42F\tYI SYLLABLE JJY",11],["0A036\tYI SYLLABLE BYRX",11],["0A43B\tYI SYLLABLE NJOT",11],["0A231\tYI SYLLABLE MGIE",11],["0A30C\tYI SYLLABLE SIP",11],["0A03E\tYI SYLLABLE PIEP",11],["0A276\tYI SYLLABLE HUOX",11],["0A0F1\tYI SYLLABLE VOP",11],["0A01E\tYI SYLLABLE BAT",11]],"useCount":13607},{"word":"Z","context":[["if ($line =~ /\\bprintk\\s*\\(\\s*KERN_([A-Z]+)/) {",135],["\"XO:i:0\" => 1, \"XG:i:0\" => 1, \"NM:i:0\"   => 1, \"MD:Z:28\" => 1,",153],["if ($line =~ /^.\\s*return\\s*(E[A-Z]*)\\s*;/) {",199],["$word =~ tr/[a-z]/[A-Z]/;",193],["($line =~ /\\+(EXTRA_[A-Z]+FLAGS).*/)) {",167],["#\t\tif (($line=~/[\\w_][a-z\\d]+[A-Z]/) and !($line=~/print/)) {",166],["$var =~ /[A-Z][a-z]|[a-z][A-Z]/ &&",104],["\"YM:i:1\" => 1, \"YP:i:1\" => 1, \"YT:Z:CP\"  => 1, \"YS:i:0\"  => 1 },",114],["if ($line =~ /\\bdev_printk\\s*\\(\\s*KERN_([A-Z]+)/) {",126],["1*Y+ -1*Z=0,",149]],"useCount":10991},{"word":"Zend","context":[["\"Zend/tests/bug34137.phpt\",",23],["\"Zend/tests/bug34786.phpt\",",23],["\"Zend/tests/access_modifiers_009.phpt\",",23],["\"Zend/tests/access_modifiers_012.phpt\",",23],["\"Zend/tests/bug30707.phpt\",",23],["\"Zend/tests/class_alias_006.phpt\",",23],["\"Zend/tests/magic_by_ref_004.phpt\",",23],["\"Zend/tests/call_user_func_004.phpt\",",23],["\"Zend/tests/bug34358.phpt\",",23],["\"Zend/tests/ns_003.phpt\",",23]],"useCount":27175},{"word":"_","context":[["my ($input) = @_;",1000],["my $line = $_;",2145],["my ($self) = @_;",2072],["chomp $_;",1006],["my ($line) = @_;",1169],["my ($linenr, $remain, $off) = @_;",1201],["chomp($_);",1277],["my ($tinfo)= @_;",1309],["my ($file) = @_;",1607],["print $_;",1604]],"useCount":328656},{"word":"__END__","context":[["# __END__ C4::OAI::ListRecords",20],["__END__",5773],["# __END__ C4::OAI::ListMetadataFormats",20],["# __END__ C4::OAI::ListIdentifiers",20],["# __END__ C4::OAI::Record",20],["# __END__ C4::OAI::ResumptionToken",20],["# __END__ Main Prog",21],["use Pod::Usage;                       #Print a usage man page from the POD comments after __END__",52],["my $help;    #Same again but this time should we output the POD man page defined after __END__",53],["# __END__ C4::OAI::Identify",20]],"useCount":6165},{"word":"__LINE__","context":[["#             printf $log_fh \"%d: ENTRY STATE: %s\\n\", __LINE__,",187],["($result, $rows) = &do_multi_result_sql_query2($global_var_href, $sql, \\@sql_parameters, $sr_name . \"-\" . __LINE__ );",204],["printf $log_fh \"%d: File %s already exists\\n\", __LINE__, $outfnm if ( -e $outfnm);",234],["printf $log_fh \"%d: ENTRY STATE: %s\\n\", __LINE__,",247],["&errorMessage(__LINE__, \"Cannot open \\\"$filename\\\".\");",128],["__LINE__, $prod_file;",157],["$result = SQLQuery($sqlstring, __FILE__, __LINE__);",156],["printf \"if (err) exit(__LINE__);\\n\";",151],["#     printf $log_fh \"%d: File %s already exists\\n\", __LINE__, $outfnm if ( -e $outfnm);",510],["printf \"exit(__LINE__);\\n\";",144]],"useCount":10039},{"word":"___","context":[["___",25992],["$code=<<___;",558],["$code.=<<___ if ($win64);",1569],["$code.=<<___ if ($addx);",334],["$code.=<<___\tif ($win64);",320],["$code.=<<___ if ($flavour =~ /nubi/i);",291],["$code.=<<___;",17202],["$code.=<<___ if ($avx);",246],["$code.=<<___ if ($avx>1);",223],["$code.=<<___\tif ($addx);",195]],"useCount":52649},{"word":"a","context":[["my ($a,$b,$c,$d,$e);",563],["As a special exception, if you link this library with other files,",1585],["# This is a SAS Component",818],["my $a;",777],["# Meran - MERAN UNLP is a ILS (Integrated Library System) wich provides Catalog,",754],["entity to return. Field-list is a comma-separated list of strings. The",612],["Choose a set of fields from the relationship to return. Field-list is a comma-separated list of",612],["Choose a set of fields from the relationship to return. Field-list is a comma-separated list of",612],["# Should not end with a space.",584],["# Should start with a space.",584]],"useCount":243331},{"word":"a1","context":[["$r2 = $a1;",77],["mov\t$a1, $t1",218],["mul\t$a1\t\t\t# a[3]*a[1]",72],["if ($a1 =~ /^sizeof\\s*\\S/) {",77],["my $a1 = $4;",77],["my $r1 = $a1;",77],["mov\t$a1, 8*1($r_ptr)",205],["cmovz\t$t1, $a1",155],["$LD\t$t0,0($a1)",110],["mov\t$A,$a1",88]],"useCount":5854},{"word":"about","context":[["http://www.ensembl.org/info/about/code_licence.html",68],["# whine mightly about in_atomic",273],["return \"\"; # Don't care about mysqlslap",118],["# warn about unexpectedly long msleep's",237],["# warn about #if 0",304],["# warn about spacing in #ifdefs",303],["# If we are about to drop off the end, pull in more",300],["# warn about #ifdefs in C files",298],["# about what failed has been saved to file. Save the report",119],["print-testcases       Don't run the tests but print details about all the",119]],"useCount":5988},{"word":"acc","context":[["&lea\t($acc,&DWP(-2,$acc,$acc));",134],["&mov\t(&DWP(4,$acc),$s1);",164],["&lea\t($acc,&DWP(-2,$acc,$acc));",134],["&mov\t($s3,&DWP(12,$acc));",164],["&mov\t($_inp,$acc);\t\t# save inp",138],["&mov\t(&DWP(12,$acc),$s3);",164],["&mov\t(&DWP(8,$acc),$s2);",164],["&mov\t($s1,&DWP(4,$acc));",164],["&mov\t($s2,&DWP(8,$acc));",164],["&mov\t($acc,$_inp);\t\t# load inp",138]],"useCount":9391},{"word":"acc0","context":[["xor\t$acc0,$t2",80],["mov\t$acc0, %rax",85],["movzb\t`&lo(\"$s2\")`,$acc0",80],["and\t$car0,$mask,$acc0",76],["my $tmp0=$acc0;",80],["movzb\t`&lo(\"$s0\")`,$acc0",80],["movzb\t`&hi(\"$s3\")`,$acc0",152],["adc\t\\$0, $acc0",85],["mov\t$acc0, $t0",85],["movzb\t`&hi(\"$s1\")`,$acc0",132]],"useCount":6055},{"word":"action","context":[["<form method=post action=$form->{script}>",934],["name => 'action',",178],["my $action = shift;",146],["delete $form->{action};",94],["action =>           q{",99],["# parse_webmin_log(user, script, action, type, object, &params)",108],["<button class=\"submit\" type=\"submit\" name=\"action\" value=\"continue\">|",110],["#---- if primkey exists, it's a modify action, so read values to modify...",196],["Run a Catalyst action from the command line.",121],["<form method=post action=\"$form->{script}\">",117]],"useCount":10751},{"word":"adc","context":[["adc\t\\$0,$A1[0]",116],["adc\t\\$0,$N[1]",125],["adc\t\\$0,$A1[1]",144],["adc\t\\$0,$A0[0]",216],["adc\t\\$0,$A0[1]",264],["&adc\t(\"edx\",0);",397],["adc\t\\$0, %rdx",840],["adc\t8*6($tptr),%r14",114],["adc\t\\$0,%rdx",3839],["adc\t8*5($tptr),%r13",114]],"useCount":13078},{"word":"add","context":[["add\t%rax,$N[1]",384],["add\t%rax,$A[1]",384],["add\t\tr4, $key, #248\t\t\t@ pass key schedule",364],["add\t\tr4, sp, #0x90\t\t\t@ pass key schedule",364],["add\t\\$64,%rsp",322],["would read in a file of ids and add a column for each field in the relationship.",306],["add\t%rax,$N[0]",288],["add\t%rax,$A[0]",288],["sub add {",263],["# called by default. Used to create form to add or  modify a record",256]],"useCount":48776},{"word":"add_person","context":[["add_person(\"Eugene Sandulenko\", \"sev\", \"\");",324],["add_person(\"Paul Gilbert\", \"dreammaster\", \"\");",307],["add_person(\"Filippos Karapetis\", \"[md5]\", \"\");",283],["add_person(\"Arnaud Boutonn&eacute;\", \"Strangerke\", \"\");",213],["add_person(\"Torbj&ouml;rn Andersson\", \"eriktorbjorn\", \"\");",204],["add_person(\"Gregory Montoir\", \"cyx\", \"(retired)\");",140],["add_person(\"Joost Peters\", \"joostp\", \"\");",103],["add_person(\"Johannes Schickel\", \"LordHoto\", \"\");",116],["add_person(\"Jordi Vilalta Prat\", \"jvprat\", \"\");",118],["add_person(\"Max Horn\", \"Fingolfin\", \"(retired)\");",126]],"useCount":8323},{"word":"add_proto","context":[["add_proto qw/void vp9_iht4x4_16_add/, \"const tran_low_t *input, uint8_t *dest, int dest_stride, int tx_type\";",101],["add_proto qw/void vp9_idct4x4_16_add/, \"const tran_low_t *input, uint8_t *dest, int dest_stride\";",70],["add_proto qw/void vp9_idct4x4_1_add/, \"const tran_low_t *input, uint8_t *dest, int dest_stride\";",70],["add_proto qw/void vp9_idct16x16_1_add/, \"const tran_low_t *input, uint8_t *dest, int dest_stride\";",70],["add_proto qw/void vp9_idct8x8_12_add/, \"const tran_low_t *input, uint8_t *dest, int dest_stride\";",70],["add_proto qw/void vp9_iwht4x4_1_add/, \"const tran_low_t *input, uint8_t *dest, int dest_stride\";",70],["add_proto qw/void vp9_idct32x32_1_add/, \"const tran_low_t *input, uint8_t *dest, int dest_stride\";",70],["add_proto qw/void vp9_idct16x16_256_add/, \"const tran_low_t *input, uint8_t *dest, int dest_stride\";",70],["add_proto qw/void vp9_iht16x16_256_add/, \"const tran_low_t *input, uint8_t *output, int pitch, int tx_type\";",101],["add_proto qw/void vp9_iht8x8_64_add/, \"const tran_low_t *input, uint8_t *dest, int dest_stride, int tx_type\";",101]],"useCount":6247},{"word":"added","context":[["print \"Upgrade to $DBversion done (userid index added)\\n\";",78],["# Plugin settings should no longer be added here, instead",70],["print \"Upgrade to $DBversion done (added 2 new 'AutoEmailOpacUser' sysprefs)\\n\";",78],["# Note as optimized versions of these functions are added we need to add a check to ensure",106],["Other parameters added when the plugin is called by the dopop function",145],["# is available, it should be added to",149],["# Checks which are anchored on the added line.",303],["#ignore lines not being added",303],["plugin_parameters : other parameters added when the plugin is called by the dopop function",456],["# Track the 'values' across context and added lines.",300]],"useCount":7426},{"word":"address","context":[["$address = trim($address);",213],["$address = trim($address);",213],["- address: 0.0.1.1",231],["$formatted_email = \"$name <$address>\";",247],["$formatted_email = \"$address\";",251],["my ($name, $address) = @_;",255],["my $address = \"\";",274],["$address =~ s/^\\s+|\\s+$//g;",296],["$address = $2;",299],["$address = $1;",514]],"useCount":15564},{"word":"after","context":[["mtr_add_arg($args, \"--defaults-group-suffix=%s\", $mysqld->after('mysqld'));",590],["# Need a space before open parenthesis after if, while etc",304],["#extract the line range in the file after the patch is applied",303],["# ; should have either the end of line or a space or \\ after it",303],["# if and else should not have general statements after it",303],["#no spaces allowed after \\ in define",303],["# statements after the conditional.",296],["# case and default should not have general statements after them",294],["# We need \\b after 'init' otherwise 'initconst' will cause a false positive in a check",258],["# Find out what is on the end of the line after the",595]],"useCount":19463},{"word":"align","context":[[".align\t6",185],["<td align=right>",203],["&align\t(4);",306],[".align\t2",385],[".align\t8",518],[".align\t64",854],[".align\t5",1462],[".align\t16",6071],[".align\t32",4047],[".align\t4",3284]],"useCount":27427},{"word":"all","context":[["-a\t\t    Return all available fields.",400],["use warnings FATAL => 'all';",426],["# printk includes all preceding printk's which have no newline on the end.",210],["my $all = \"(?x:  \\n\" . join(\"|\\n  \", @typeList) . \"\\n)\";",249],["is all off)",282],["# and end, all to $;.",299],["# If we have no input at all, then there is nothing to report on",299],["# Assume all arms of the conditional end as this",299],["(?:${all}\\b)",349],["# the main body of the table, and what all code points missing from this file",413]],"useCount":39407},{"word":"allow","context":[["$allowed[$allow] = 1;",462],["} elsif ($sum_allowed != $allow &&",153],["$seen != $allow) {",153],["$allow++;",154],["$allowed[$allow] = 0;",158],["#print \"cond<$cond> block<$block> allowed<$allowed[$allow]>\\n\";",158],["my $allow = 0;",159],["#goto labels aren't indented, allow a single space however",282],["# TEST: allow direct testing of the attribute matcher.",294],["# TEST: allow direct testing of the type matcher.",303]],"useCount":5934},{"word":"allowed","context":[["#print \"cond<$cond> block<$block> allowed<$allowed[$allow]>\\n\";",158],["$allowed = 1;",1904],["$allowed[$allow] = 1;",462],["my $allowed = 0;",443],["#no spaces allowed after \\ in define",303],["# unary ++ and unary -- are allowed no space on one side.",303],["# We have looked at and allowed this specific line.",298],["# check for spacing round square brackets; allowed:",296],["if ($level == 0 && $block =~ /^\\s*\\{/ && !$allowed) {",267],["#print \"cond<$cond> block<$block> allowed<$allowed[$allow]>\\n\";",158]],"useCount":7742},{"word":"already","context":[["# '*' as part of a type definition -- reported already.",300],["# check if the ref image has this relation with this family already",265],["printf $log_fh \"%d: File %s already exists\\n\", __LINE__, $outfnm if ( -e $outfnm);",234],["# Running against an already started server, if the specified",149],["# vardir does not already exist it should be created",149],["mtr_verbose(\"No need to create '$opt_vardir' it already exists\");",146],["# Set valgrind_options to default unless already defined",143],["to be created already exist the file will be written with a '.new' suffix.",122],["# Some port was not free(which one has already been printed)",119],["#     printf $log_fh \"%d: File %s already exists\\n\", __LINE__, $outfnm if ( -e $outfnm);",510]],"useCount":7931},{"word":"also","context":[["The option can also be set using environment",149],["do a proper clean-up. It could also be caused by the previous test run",118],["mtr_warning(\"Check-testcase failed, this could also be caused by the\" .",118],["timediff              With --timestamp, also print time passed since",119],["# If --wait-all is also given, do the same, but don't die if one",119],["enable-disabled       Run also tests marked as disabled",119],["# test will also be at $i -> redo",119],["# also makes it possible to wait for any process to exit during the check",357],["See also:",379],["# is also valid.",2401]],"useCount":8640},{"word":"an","context":[["# won't point at an old directory",149],["# Create an environment variable to make it possible",149],["# Running against an already started server, if the specified",149],["# It is an effect of setting 'pass_through' in option processing",149],["# Allow just an angle bracketed address",192],["# Return of what appears to be an errno should normally be -'ve",199],["# If we see an #else/#elif then the code",294],["# an environment variable can be used to control all ports. A small",149],["\"return of an errno should typically be -ve (return -$1)\\n\" . $herecurr);",142],["# configuration used to build them.  To make life easier, an environment",147]],"useCount":21713},{"word":"and","context":[["Author:        Jan Wielemaker and Anjo Anjewierden",788],["# Circulation and User's Management. It's written in Perl, and uses Apache2",754],["# Web-Server, MySQL database and Sphinx 2 indexing.",754],["# Redistribution and use in source and binary forms, with or without",921],["# Redistribution and use in source and binary forms, with or without",921],["# A colon can be substituted for the equals sign, and anything to the left of",2251],["# including if adding or subtracting white space, underscore, and hyphen",2480],["# This file is for internal use by the Perl program only.  The format and even",4650],["# Circulation and User's Management. It's written in Perl, and uses Apache2",754],["# This file is for internal use by core Perl only.  The format and even the",5878]],"useCount":213576},{"word":"any","context":[["invalidate any other reasons why the executable file might be covered by",1583],["#make up the handle for any error we report on this line",303],["# match any of the following regular expression constructs:",313],["# Kill any check processes still running",357],["# also makes it possible to wait for any process to exit during the check",357],["# matches any of the following regular expression constructs:",405],["# By default examples are set to die on any server returned fault.",446],["$s =~ s/$;//g; \t# Remove any comments",582],["# any of the following regular expression constructs:",1459],["# perluniprops.pod should be consulted for the syntax rules for any of these,",2468]],"useCount":26934},{"word":"anything","context":[["# anything to the right.  Thus, for example,",150],[";    # FIXME... anything to do here?",149],["# Don't delete anything if starting dirty",143],["# or anything beginning with -- (the latter comes from --combination)",119],["Do not insert anything into the database. I.e. read-only mode.",36],["# A colon can be substituted for the equals sign, and anything to the left of",2251],["# the equals (or colon) can be combined with anything to the right.  Thus,",2251],["# closing brace should have a space following it when it has anything",303],["# at the beginning of a line any tabs must come first and anything",278],["# above, anything to the left of the equals (or colon) can be combined with",150]],"useCount":7409},{"word":"ap","context":[["mov\t($ap),%rax\t\t# ap[0]",149],["add\t$A[0],$N[0]\t\t# np[j]*m1+ap[j]*bp[0]",144],["add\t$A[1],$N[1]\t\t# np[j]*m1+ap[j]*bp[0]",144],["mov\t-8($ap,$j,8),%rax",116],["mov\t($ap),%rax\t\t# ap[0]",149],["mov\t8($ap),%rax",154],["mov\t($ap,$j,8),%rax",166],["mulq\t$m0\t\t\t# ap[j]*bp[0]",340],["mulq\t$m0\t\t\t# ap[j]*bp[i]",388],["mulq\t$m0\t\t\t# ap[0]*bp[0]",100]],"useCount":9780},{"word":"appearance","context":[["holdsAt( appearance( id0 )=visible,  680 ).",23],["holdsAt( appearance( id0 )=visible,  720 ).",24],["holdsAt( appearance( id0 )=visible,  1320 ).",23],["I<ornaments>     affects screen appearance of the command line.",44],["holdsAt( appearance( id0 )=visible,  1200 ).",23],["holdsAt( appearance( id0 )=visible,  840 ).",24],["holdsAt( appearance( id0 )=visible,  1040 ).",25],["holdsAt( appearance( id0 )=visible,  760 ).",24],["holdsAt( appearance( id0 )=visible,  880 ).",24],["holdsAt( appearance( id0 )=visible,  400 ).",24]],"useCount":14585},{"word":"arch","context":[["if ($arch eq \"x86_64\") {",66],["if ($realfile =~ m{^arch/}) {",275],["if ($realfile =~ m@arch/blackfin/.*\\.S$@) {",263],["\"README\", \"Documentation\", \"arch\", \"include\", \"drivers\",",248],["# force flags for this arch",187],["\"long udelay - prefer mdelay; see arch/arm/include/asm/delay.h\\n\" . $herecurr);",79],["my $arch;",81],[".arch\tarmv7-a",99],["if ($opts{arch} eq \"x86_64\") {",104],["$arch = 64;",153]],"useCount":5758},{"word":"are","context":[["following fields are available:",612],["return. Field-list is a comma-separated list of strings. The following fields are available:",306],["The following fields are available:",320],["# By default examples are set to die on any server returned fault.",446],["# are met:",455],["are met:",653],["strings. The following fields are available:",1078],["# [brackets] indicate how many code points are in the range.",2478],["# the name or existence of this file are subject to change without notice.",3636],["# name or existence of this file are subject to change without notice.  Don't",6892]],"useCount":62067},{"word":"arg","context":[["foreach my $arg (@ARGV) {",220],["mtr_add_arg($args, \"--server-arg=%s\", $_) for @$mysqld_args;",236],["'arg',",879],["if ($arg =~ /^(?:const\\s+)?($Ident)(?:\\s+$Sparse)*\\s*\\**\\s*(:?\\b$Ident)?$/s || $arg =~ /^($Ident)$/s) {",297],["my $arg = shift;",332],["foreach my $arg ( @opt_extra_mysqld_opt )",290],["# with --sever-arg=",238],["for my $arg (split(/\\s*,\\s*/, $ctx)) {",300],["arg(B, C, E),",264],["if ($arg =~ /^(?:const\\s+)?($Ident)(?:\\s+$Sparse)*\\s*\\**\\s*(:?\\b$Ident)?$/s || $arg =~ /^($Ident)$/s) {",297]],"useCount":21994},{"word":"args","context":[["my $args;",2755],["'args' => [",13765],["mtr_init_args(\\$args);",2803],["mtr_add_arg($args, \"--defaults-group-suffix=%s\", $mysqld->after('mysqld'));",590],["mtr_add_arg($args, \"--no-defaults\");",799],["mtr_add_arg($args, \"--defaults-file=%s\", $path_config_file);",1484],["args          => \\$args,",1366],["args          => \\$args,",1366],["my $args= shift;",912],["my %args = @_;",809]],"useCount":86540},{"word":"argument","context":[["# We can get an empty argument when  we set environment variables to \"\"",72],["my $narg = shift (@ARGV) || die \"$arg needs argument.\\n\";",176],["\"memset to 0's uses 0 as the 2nd argument, not the 3rd\\n\" . \"$here\\n$stat\\n\");",173],["\"single byte memset is suspicious. Swapped 2nd/3rd argument?\\n\" . \"$here\\n$stat\\n\");",173],["# Prefix the Valgrind options to the argument list.",149],["mtr_error(\"Unknown argument \\\"$debugger\\\" passed to --debugger\");",147],["# check for alloc argument mismatch",125],["die \"unhandled type for argument value: $args_member\";",87],["die \"malformed cast annotation for argument: $args_member\";",87],["# Ensure argument is not blank",81]],"useCount":6173},{"word":"arguments","context":[["Optional arguments:",213],["# check usleep_range arguments",134],["mysqld=ARGS           Specify additional arguments to \"mysqld\"",145],["# Add arguments that should not go into the MYSQL_TEST env var",145],["# that the lone '--' separating options from arguments survives,",149],["# Check timeout arguments",119],["# Check valgrind arguments",149],["\"arguments for function declarations should follow identifier\\n\" . $herecurr);",187],["Required arguments:",205],["#\targuments:",221]],"useCount":7288},{"word":"array","context":[["my $array = shift;",131],["foreach my $word (@array) {",100],["reset 'array';",103],["my @array = $sth->fetchrow_array () ;",108],["my @array = @_;",115],["my @array;",273],["\"static const char * array should probably be static const char * const\\n\" .",193],["\"static char array declaration should probably be static const char\\n\" .",193],["while(my @row = $recs->fetchrow_array) { # loop through array of result of sql..",132],["# Return as an array of lines",119]],"useCount":32806},{"word":"as","context":[["# An else is really a conditional as long as its not else if",299],["# one does, and continue as if the #endif was not here.",299],["# Assume all arms of the conditional end as this",299],["# Ignore operators passed as parameters.",299],["# Check for bitwise tests written as boolean",299],["# '*' as part of a type definition -- reported already.",300],["# extract the filename as it passes",300],["# track the line number as we move through the hunk, note that",303],["# Trace the real file/line as we go.",303],["it under the same terms as Perl itself.",663]],"useCount":39176},{"word":"asm","context":[["#warn if <asm/foo.h> is #included and <linux/foo.h> is available (uses RAW line)",235],["\"Use #include <linux/$file> instead of <asm/$file>\\n\" . $herecurr);",185],["if ($line =~ m@^.\\s*\\#\\s*if.*\\b(__i386__|__powerpc64__|__sun__|__s390x__)\\b@ && $realfile !~ m@include/asm-@) {",279],["if ($realfile =~ m@^include/asm/@) {",279],["if ($tree && $rawline =~ m{^.\\s*\\#\\s*include\\s*\\<asm\\/(.*)\\.h\\>}) {",279],["my $asm_volatile = qr{\\b(__asm__|asm)\\s+(__volatile__|volatile)\\b};",290],["asm|__asm__|",294],["asm|__asm__)$/x)",298],["$win64=0; $win64=1 if ($flavour =~ /[nm]asm|mingw64/ || $output =~ /\\.asm$/);",361],["$win64=0; $win64=1 if ($flavour =~ /[nm]asm|mingw64/ || $output =~ /\\.asm$/);",361]],"useCount":7322},{"word":"at","context":[["# Check for }<nl>else {, these must be at the same",303],["my $at = \"(ctx:$ctx)\";",303],["sltu\t$at,$c_2,$t_1",370],["sltu\t$at,$c_3,$t_1",355],["sltu\t$at,$c_1,$t_1",335],["# statements should be at the same indent.",303],["# UTF-8 regex found at http://www.w3.org/International/questions/qa-forms-utf-8.en.php",302],["if ($line =~ /^\\+/ && defined $lines[$linenr] && $lines[$linenr] =~ /^\\\\ No newline at end of file/) {",300],["$ADDU\t$t_2,$at",1020],["developers list at <http://lists.ensembl.org/mailman/listinfo/dev>.",512]],"useCount":37501},{"word":"att","context":[["if ($att{'L1'} eq '-') {",68],["if ($att{'R3'} eq 'E') {",69],["my $name = $elt->att('name');",220],["if ($att{'L2'} eq 'E') {",67],["if ($att{'L1'} eq 'R') {",70],["my $fieldname = $e->att('name');",100],["if ($att{'R3'} eq '-') {",109],["my $type = $e->att('type');",143],["if ($att{'L2'} eq '-') {",169],["if ($att{'L3'} eq '-') {",206]],"useCount":6076},{"word":"attr","context":[["\"$attr should be placed after $var\\n\" . $herecurr))) &&",97],["if ((($ptr =~ /\\b(union|struct)\\s+$attr\\b/ &&",97],["ERROR(\"TEST: is attr\\n\" . $herecurr);",101],["ERROR(\"TEST: is not attr ($1 is)\\n\". $herecurr);",101],["cf(1,eq(attr(var(0),'STMT-TYPE'),'decl')),",103],["\"TEST: is not attr ($1 is)\\n\". $herecurr);",193],["cf(1,eq(attr(var(0),'VFORM'),'fin')),",176],["\"TEST: is attr\\n\" . $herecurr);",193],["my $attr = $1;",316],["'values', 'possible', 'type', and 'attr' (default",281]],"useCount":9037},{"word":"authnotrequired","context":[["authnotrequired => $commandline,",18],["authnotrequired     => 0,",51],["my $authnotrequired = 0;",66],["authnotrequired => ( C4::Context->preference(\"OpacPublic\") ? 1 : 0 ),",279],["$authnotrequired,",294],["authnotrequired\t=> 0,",39],["my $authnotrequired= 0;",32],["authnotrequired => 1,",675],["authnotrequired => 0,",5796],["my $authnotrequired     = 0;",14]],"useCount":7264},{"word":"author","context":[["<cite class=\\\"comment-author\\\">",166],["<div class=\\\"comment-author vcard\\\">",166],["@author Wouter Beek",694],["@author\tJan Wielemaker",157],["push(@authors, $author);",138],["my $author = $1;",135],["$author = deduplicate_email($author);",106],["@author Jan Wielemaker",82],["\"HgAuthor: {author}\\\\n\" .",88],["$author = deduplicate_email($author);",106]],"useCount":8769},{"word":"available","context":[["The following fields are available:",320],["strings. The following fields are available:",1078],["Display a list of the fields available for use.",160],["available => 1, mode => \"user\", dist_req_build => [],",202],["#warn if <asm/foo.h> is #included and <linux/foo.h> is available (uses RAW line)",235],["List the available fields.",306],["return. Field-list is a comma-separated list of strings. The following fields are available:",306],["--show-fields   List the available fields.",320],["-a\t\t    Return all available fields.",400],["following fields are available:",612]],"useCount":8464},{"word":"b","context":[["(?:$typeTypedefs\\b)|",444],["(?:${all}\\b)",349],["my ($i,$a,$b,$c,$d,$e)=@_;",306],["$line =~ /\\b$Inline\\s+$Storage\\b/) {",300],["$line =~ /\\b$Inline\\s+$Storage\\b/) {",300],["if ($line =~ /\\b$Type\\s+$Inline\\b/ ||",300],["if ($block =~/\\b(?:if|for|while)\\b/) {",589],["if ($line =~ /\\b$Type\\s+$Inline\\b/ ||",300],["my ($a,$b,$c,$d,$e);",563],["if ($block =~/\\b(?:if|for|while)\\b/) {",589]],"useCount":92395},{"word":"back","context":[["# Step 7: Convert the local functions back into local symbols",63],["# Step 9: Move the result back to the original object.",63],["$_ = \"\\n=back\\n\";",78],["# Read back values",95],["# Pass request to the user agent and get a response back",100],["# Somewhat hacky code to convert numeric version back to dot notation",106],["=back",14282],[". p(a({-href=>\"javascript:back()\"}, \"go back and try again\"));",193],[". p(a({-href=>\"javascript:back()\"}, \"go back and try again\"));",193],["# Send it back, now with results set",119]],"useCount":20517},{"word":"barcode","context":[["Barcode: <<items.barcode>><br />",93],["if ($barcode) {",123],["# check for item barcode # being unique",55],["$reserve{'barcodenumber'}   = $item->{'barcode'};",55],["barcode => $item->{ 'barcode' },",57],["$barcode =~ s/^\\s*|\\s*$//g; # remove leading/trailing whitespace",57],["barcode => $item->{ 'barcode' },",57],["<li><<items.barcode>></li>",62],["my $itemnumber = GetItemnumberFromBarcode($barcode);",72],["my ($tagfield,$tagsubfield) = &GetMarcFromKohaField(\"items.barcode\",$frameworkcode);",87]],"useCount":6165},{"word":"base","context":[["mtr_warning (\"Port base $opt_port_base rounded down to multiple of 10\");",119],["base            => \"1000\",",127],["my $base;",128],["mtr_add_arg($args, \"--base=$opt_vardir/log\");",141],["# more directory relative to \"mysql-test\" gives us a usable base",145],["# In most cases, the base directory we find everything relative to,",149],["my $base = \"/local/home/coates/MECCA\";",151],["$realfile !~ m@^drivers/base/core@) {",248],["# base.",1538],["# default system locations, instead of having our own private base",149]],"useCount":11419},{"word":"basedir","context":[["if ( ! $source_dist and ! -d \"$basedir/bin\" )",155],["basedir         => $basedir,",238],["basedir         => $basedir,",238],["my $exe_mysqld= find_mysqld($basedir);",190],["$basedir= dirname($basedir);",155],["$basedir= dirname($basedir);",155],["$bindir=$ENV{MTR_BINDIR}||$basedir;",144],["our $basedir;",126],["\"$basedir/zlib/.libs/\");",119],["mtr_add_arg($args, \"--basedir=%s\", $install_basedir);",119]],"useCount":8237},{"word":"be","context":[["# Any changes made here will be lost!",2921],["# database, Version 6.1.0.  Any changes made here will be lost!",2613],["# perluniprops.pod should be consulted for the syntax rules for any of these,",2468],["# the equals (or colon) can be combined with anything to the right.  Thus,",2251],["# A colon can be substituted for the equals sign, and anything to the left of",2251],["# database, Version 6.0.0.  Any changes made here will be lost!",1994],["# database, Version 6.2.0.  Any changes made here will be lost!",1762],["# database, Version 5.2.0.  Any changes made here will be lost!",1670],["invalidate any other reasons why the executable file might be covered by",1583],["library does not by itself cause the resulting executable to be covered",1583]],"useCount":95282},{"word":"because","context":[["# skipped later, because of the test case itself in cooperation",149],["p(because,",62],["# processing because otherwise the regexp will choke on formatting",62],["$line =~ s/\\r//g;               # Remove CR because chomp on CYGWIN won't",69],["# This test is not currently implemented because these declarations are",82],["my $comp = $4;\t#Not $1 because of $LvalOrFunc",90],["# Some code points require special handling because their mappings are each to",101],["'TAA' => { # altered because STOP",128],["'TGA' => { # altered because STOP",128],["'TAG' => { # altered because STOP",128]],"useCount":5911},{"word":"been","context":[["# Also, always restart if server had been restarted with additional",118],["report-times          Report how much time has been spent on different",108],["# resources have been setup",119],["# The test failure has been detected by mysql-test-run.pl",132],["# Default to not wait until pid file has been created",149],["print \"$filepath has been updated.\\n\";",253],["# Use second best choice if no other test has been found",119],["# Some port was not free(which one has already been printed)",119],["# about what failed has been saved to file. Save the report",119],["# Skip if server has been restarted with additional options",118]],"useCount":5853},{"word":"before","context":[["\"space prohibited before that '$op' $at\\n\" . $hereptr)) {",268],["# check for spaces before a quoted newline",268],["# A colon needs no spaces before when it is",296],["# unary operators should have a space before and",300],["#need space before brace following if, while, etc",303],["# Need a space before open parenthesis after if, while etc",304],["# test carefully before changing this",441],["# check for space before tabs.",243],["ERROR(\"space required before the open parenthesis '('\\n\" . $herecurr);",210],["ERROR(\"space prohibited before that '$op' $at\\n\" . $hereptr);",209]],"useCount":16892},{"word":"between","context":[["# Init variables that can change between each test case",149],["compress              Use the compressed protocol between client and server",149],["ssl                   Use ssl protocol between client and server",147],["# differs between operating systems and configuration, see",149],["#studly caps, commented out until figure out how to distinguish between use of existing and adding new",166],["\"inline keyword should sit between storage class and type\\n\" . $herecurr);",193],["# if there is a space between the name and the open",298],["# check for spaces between functions and their parentheses.",301],["# check the location of the inline attribute, that it is between",302],["# '*'s should not have spaces between.",584]],"useCount":6517},{"word":"biblio","context":[["$biblio->{'itemtype'} = C4::Context->preference('item-level_itypes') ? $biblio->{'itype'} : $biblio->{'itemtype'};",59],["biblio.author,",60],["<h5><<biblio.author>></h5>",62],["<h4><<biblio.title>></h4>",62],["biblio.title,",65],["SetImportRecordStatus( $biblio->{'import_record_id'}, 'imported' );",65],["the items attached to the biblio",71],["The first 10 tabs present the biblio, the 11th one presents",71],["my $biblio = GetBiblioData($biblionumber);",84],["<<biblio.title>> <br />",93]],"useCount":6778},{"word":"biblionumber","context":[["my $biblionumber = $query->param('biblionumber');",319],["biblionumber        => $biblionumber,",131],["my $biblionumber = $input->param('biblionumber');",135],["my $biblionumber = $input->param('biblionumber');",135],["my $subscriptionsnumber = CountSubscriptionFromBiblionumber($biblionumber);",136],["my $record = GetMarcBiblio($biblionumber);",148],["biblionumber => $biblionumber,",228],["biblionumber => $biblionumber,",228],["my $biblionumber = $query->param('biblionumber');",319],["biblionumber        => $biblionumber,",131]],"useCount":19385},{"word":"bin","context":[["#!/usr/local/bin/perl -w",1188],["#!/usr/bin/perl",48452],["#!/usr/bin/perl -w",21528],["#!/usr/bin/env perl",18216],["#! /usr/bin/perl",2356],["#!/usr/local/bin/perl",2068],["#! /usr/bin/perl -w",1796],["#! /usr/bin/env perl",1585],["#!/bin/perl",385],["#!/bin/env perl",353]],"useCount":117986},{"word":"binary","context":[["# Redistribution and use in source and binary forms, with or without",921],["\"Avoid gcc v4.3+ binary constant extension: <$var>\\n\" . $herecurr) &&",99],["#gcc binary extension",104],["mtr_error(\"Could not find the mysqlslap binary\");",118],["* Redistribution and use in source and binary forms, with or without",136],["ps-protocol           Use the binary protocol between client and server",147],["# distributions, TAR binary distributions and some other packages.",149],["# we need it when valgrinding or debugging non installed binary",149],["moveq\tpc,lr\t\t\t@ be binary compatible with V4, yet",262],["Redistribution and use in source and binary forms, with or without",745]],"useCount":7000},{"word":"bit","context":[["# (c) 2005, Joel Schopp <jschopp@austin.ibm.com> (the ugly bit)",302],["my $bit;",74],["# (c) 2001, Dave Jones. (the file handling bit)",269],["\"8-bit UTF-8 used in possible commit log\\n\" . $herecurr);",176],["# Wait a bit and see if a server died, if so report that instead",119],["mov\t%rdx,(%rsp,$num,8)\t# store upmost overflow bit",104],["goodprint \"Operating on 64-bit architecture\\n\";",97],["# The module implements \"4-bit\" GCM GHASH function and underlying",93],["foreach $bit (32) {",78],["sub AUTOLOAD()\t\t# thunk [simplified] 32-bit style perlasm",75]],"useCount":9492},{"word":"blank","context":[["# blank context lines so we need to count that too.",303],["# check for unnecessary blank lines around braces",133],["print \"<img src='img/blank.gif' alt='' width='250' height='1'><br>\";",140],["#  1) blank lines, they should be at 0,",294],["#  1) any blank line termination",296],["my $ptr = substr($blank, 0, length($utf8_prefix)) . \"^\";",297],["my $blank = copy_spacing($rawline);",297],["# Strip the diff line prefixes and rip blank lines at start and end.",299],["my $blank = copy_spacing($opline);",300],["my $ptr = substr($blank, 0, $off) . \"^\";",300]],"useCount":6762},{"word":"block","context":[["devpath         => \"/devices/pci0000:00/0000:00:1f.2/host0/target0:0:0/0:0:0:0/block/sda/sda1\",",385],["devpath         => \"/devices/pci0000:00/0000:00:1f.2/host0/target0:0:0/0:0:0:0/block/sda\",",776],["if ($block =~/\\b(?:if|for|while)\\b/) {",589],["if (statement_block_size($block) > 1) {",589],["#print \"APW: ALLOWED: lines block<$block>\\n\";",557],["#print \"APW: ALLOWED: lines block<$block>\\n\";",557],["#print \"APW: ALLOWED: block<$block>\\n\";",557],["#print \"APW: ALLOWED: block<$block>\\n\";",557],["substr($block, 0, length($cond), '');",896],["subsys\t\t=> \"block\",",1013]],"useCount":19883},{"word":"body","context":[["</body>",2724],["my @insns = (&$body,&$body,&$body,&$body);\t# 32 instructions",282],["<body>",1897],["my $body = shift;",805],["# the main body of the table, and what all code points missing from this file",413],["'body' => {",335],["my ( $body ) = @_;",308],["my $body;",287],["<body lang=\"en\" bgcolor=\"#FFFFFF\" text=\"#000000\" link=\"#0000FF\" vlink=\"#800080\" alink=\"#FF0000\">",282],["my @insns = (&$body,&$body,&$body,&$body);\t# 32 instructions",282]],"useCount":16224},{"word":"borrower","context":[["# get borrower information ....",154],["# \t# the foot (totals by borrower type)",107],["#get borrower details",103],["# Computes full borrower address",82],["borrowernumber => $borrower->{'borrowernumber'},",75],["# setting some borrower info into this hash",71],["$borrower = GetMemberDetails( $borrowernumber, 0 );",69],["my $borrower;",69],["# get borrower details",62],["# show all reserves of this borrower, and the position of the reservation ....",61]],"useCount":7639},{"word":"borrowernumber","context":[["my ($template, $borrowernumber, $cookie)",224],["borrowernumber int(11) NOT NULL,",209],["my ( $template, $borrowernumber, $cookie ) = get_template_and_user (",164],["if ($borrowernumber) {",199],["my ( $template, $borrowernumber, $cookie ) = get_template_and_user(",802],["borrowernumber => $borrowernumber,",456],["borrowernumber => $borrowernumber,",456],["`borrowernumber` int(11) NOT NULL,",306],["my $borrowernumber = $input->param('borrowernumber');",286],["my $borrowernumber = $input->param('borrowernumber');",286]],"useCount":20178},{"word":"borrowers","context":[["Checked out to <<borrowers.title>> <<borrowers.firstname>> <<borrowers.initials>> <<borrowers.surname>> <br />",62],["flagsrequired   => { borrowers => 1 },",136],["(<<borrowers.cardnumber>>) <br />",62],["ALTER TABLE borrowers",64],["FROM borrowers",67],["$dbh->do(\"ALTER TABLE `borrowers` ADD `privacy` INTEGER NOT NULL DEFAULT 1;\");",70],["REFERENCES `borrowers` (`borrowernumber`) ON DELETE CASCADE ON UPDATE CASCADE,",78],["LEFT JOIN borrowers USING(borrowernumber)",79],["plugin that shows a stats on borrowers",126],["flagsrequired => {borrowers => 1},",179]],"useCount":6029},{"word":"br","context":[["$g->{CGI}->br(),",155],["print \"<br>\\n\";",156],["<br>",1431],["$option .= \"\\n<br>\" if ($option);",560],["<br />",522],["br\t$ra",273],["$option .= \"\\n<br>\" if $option;",169],["<br><br>",249],["<br><br>",249],["print \"<br>\";",214]],"useCount":10033},{"word":"brace","context":[["# function brace can't be on same line, except for #defines of do while,",302],["# or if that brace on the next line is for something else",303],["# closing brace should have a space following it when it has anything",303],["# if/while/etc brace do not go on next line, unless defining a do while loop,",303],["#need space before brace following if, while, etc",303],["# check for initialisation to aggregates open brace on the next line",302],["#  2) any opening brace { on end of the line",296],["#  3. inside a curly brace -- = { [0...10] = 5 }",294],["# if should not continue a brace",292],["\"that open brace { should be on the previous line\\n\" .",190]],"useCount":5998},{"word":"branch","context":[["if ($branch) {",61],["if ($branch eq \"*\") {",198],["$sth_search->execute($branch);",98],["my $branch = $query->param('branch');",82],["my $branch = $query->param('branch');",82],["C4::Context->userenv->{branch};",74],["&& C4::Context->userenv->{branch};",61],["my $branch = $input->param('branch');",61],["my $branch = $input->param('branch');",61],["## Get branch info for borrowers home library.",60]],"useCount":10794},{"word":"branchcode","context":[["branchcode => $branchcode,",121],["KEY `branchcode` (`branchcode`)",78],["`branchcode` VARCHAR(10) NOT NULL,",78],["$cell{branchcode}        = $subscription->{branchcode};",93],["$cell{branchcode}        = $subscription->{branchcode};",93],["constrainttype, branchcode, notificationdate,",108],["`branchcode` varchar(10) default NULL,",198],["WHERE branchcode = ?\");",194],["WHERE branchcode = ?",175],["branchcode => $branchcode,",121]],"useCount":10197},{"word":"branches","context":[["for my $thisbranch (sort { $branches->{$a}->{branchname} cmp $branches->{$b}->{branchname} } keys %$branches) {",64],["for my $thisbranch (sort { $branches->{$a}->{branchname} cmp $branches->{$b}->{branchname} } keys %$branches) {",64],["for my $thisbranch (sort { $branches->{$a}->{branchname} cmp $branches->{$b}->{branchname} } keys %$branches) {",64],["branchname => $branches->{$_}->{branchname},",89],["# load the branches",91],["my $branches = GetBranches($onlymine);",99],["foreach my $thisbranch (@$branches) {",75],["my $branches = GetBranches;",157],["branchname => $branches->{$thisbranch}->{'branchname'},",213],["my $branches = GetBranches();",517]],"useCount":7099},{"word":"buffer","context":[["my $buffer;",315],["and not exists $hotlist{$buffer->{\"pointer\"}}",62],["my $buffer = shift;",63],["my $buffer = '';",65],["print_buffered($buffer);",68],["$| = 1; # Do not buffer output",71],["my $buffer = \"\";",71],["read(STDIN, $buffer, $ENV{'CONTENT_LENGTH'});",97],["@pairs = split(/&/, $buffer);",97],["undef $$segDataPt;  # free the old buffer",98]],"useCount":7758},{"word":"build","context":[["mtr-build-thread=#    Specify unique number to calculate port number(s) from.",119],["build-thread=#        Can be set in environment variable MTR_BUILD_THREAD.",119],["# This is needed for test log evaluation in \"gen-build-status-page\"",149],["mtr_error(\"Could not get a unique build thread id\");",119],["'build-thread|mtr-build-thread=i' => \\$opt_build_thread,",119],["set and is not \"auto\", it overrides build-thread.",119],["'build-thread|mtr-build-thread=i' => \\$opt_build_thread,",119],["# configuration used to build them.  To make life easier, an environment",147],["# build directory in out-of-source builds.",144],["#\t\tdone in the build",140]],"useCount":12100},{"word":"but","context":[["# - allow it, but remove all files in it",149],["# although mode was set to 0000, but in that case a stat on",149],["start-and-exit        Same as --start, but mysql-test-run terminates and",117],["# but will be replaced by a real fill_help_tables.sql when",135],["# Should use exec() here on *nix but this appears not to work on Windows",119],["print-testcases       Don't run the tests but print details about all the",119],["# If --wait-all is also given, do the same, but don't die if one",119],["# Test case suceeded, but it has produced unexpected",119],["# but with a space as separator",119],["$tinfo->{comment}.= \"mysqltest failed but provided no output\\n\";",118]],"useCount":14303},{"word":"by","context":[["# The name this swash is to be known by, with the format of the mappings in",413],["plugin_parameters : other parameters added when the plugin is called by the dopop function",456],["# Written by Andy Polyakov <appro@openssl.org> for the OpenSSL",647],["library does not by itself cause the resulting executable to be covered",1583],["invalidate any other reasons why the executable file might be covered by",1583],["# This file is built by mktables from e.g. UnicodeData.txt.",2362],["# This file is machine-generated by mktables from the Unicode",4479],["# This file is for internal use by the Perl program only.  The format and even",4650],["# This file is machine-generated by lib/unicore/mktables from the Unicode",5126],["# This file is for internal use by core Perl only.  The format and even the",5878]],"useCount":72528},{"word":"byte","context":[[".byte\t9,0,0,0",1225],[".byte\t0x67",573],["| [\\xE1-\\xEC\\xEE\\xEF][\\x80-\\xBF]{2}  # straight 3-byte",304],[".byte\t0,12,0x14,0,0,0,0,0",192],["[\\xC2-\\xDF][\\x80-\\xBF]               # non-overlong 2-byte",176],[".byte\t0x67,0x67",175],["\"single byte memset is suspicious. Swapped 2nd/3rd argument?\\n\" . \"$here\\n$stat\\n\");",173],["return \".byte\\t\".join(',',@opcode);",161],[".byte\t0x66",151],["| [\\xC2-\\xDF][\\x80-\\xBF]             # non-overlong 2-byte",128]],"useCount":18658},{"word":"c","context":[["my $c = shift;",457],["my $c;",996],["substr($s, 0, length($c), '');",890],["$c++;",725],["substr($res, $off, 1, $c);",598],["'index_prefix' => 'c',",506],["my ($a,$b,$c,$d,$e);",563],["my @newlines = ($c =~ /\\n/gs);",588],["-c N",496],["my ($s, $c) = ($stat, $cond);",593]],"useCount":59260},{"word":"cache","context":[["if ( ! exists($pdb->{$section}->{$machine}{$lane}{$stage}{cache}{$nhadd}{$ncadd}{data}))",75],["$pdb->{$section}->{$machine}{$lane}{$stage}{cache}{$nhadd}{$ncadd}{data}{$col} = $prow->{$col};",75],["delete $pdb->{$section}->{$machine}{$lane}{$stage}{cache};",718],["$pdb->{$section}->{$machine}{$lane}{$stage}{cache}{$key};",111],["$pdb->{$section}->{$machine}{$lane}{$stage}{cache}{$nhadd}{$ncadd}{state} = $state;",75],["my $cache = shift;",79],["$pdb->{$section}->{$machine}{$lane}{$stage}{cache}{$key} =",81],["if (exists($pdb->{$section}->{$machine}{$lane}{$stage}{cache}{$key}))",82],["#             delete $pdb->{$section}->{$machine}{$lane}{$stage}{cache};",85],["my %cache;",89]],"useCount":6736},{"word":"call","context":[["call\t*__imp_RtlVirtualUnwind(%rip)",331],["\"$call() should probably be ${call}_t($cast, $arg1, $arg2)\\n\" . \"$here\\n$stat\\n\");",169],["&call\t(&label(\"pic_point\"));",176],["my $call = $1;",190],["call\t_bsaes_encrypt8",201],["system($call);",212],["if ($call->{streamflag} ne \"none\") {",232],["call\t_bsaes_decrypt8",276],["call\tavx2_normalize_n_store",150],["\"$call() should probably be ${call}_t($cast, $arg1, $arg2)\\n\" . \"$here\\n$stat\\n\");",169]],"useCount":17831},{"word":"can","context":[["die \"can't locate x86_64-xlate.pl\";",402],["# the equals (or colon) can be combined with anything to the right.  Thus,",2251],["# A colon can be substituted for the equals sign, and anything to the left of",2251],["# function brace can't be on same line, except for #defines of do while,",302],["# definitions in global scope can only start with types",300],["# If there were whitespace errors which cleanpatch can fix",248],["# Server is up. Verify that we can speak to it.",216],["# Save this test case information, so next can examine it",179],["# A colon can be substituted for the equals sign, and within each group",150],["# above, anything to the left of the equals (or colon) can be combined with",150]],"useCount":32589},{"word":"carry","context":[["neg\t$carry\t\t\t# mov $carry,cf",192],["neg\t$carry\t\t\t# mov $carry,cf",192],["pand\t$twmask, $twres\t\t# isolate carry and residue",84],["&add\t($carry,\"eax\");",104],["&pand\t($twres,$twmask);\t\t# isolate carry and residue",108],["sbb\t$carry,$carry\t\t# mov cf,$carry",168],["sbb\t$carry,$carry\t\t# mov cf,$carry",168],["sbb\t$carry,$carry\t\t# mov cf,$carry",168],["&mov\t($carry,\"edx\");",169],["pand\t$twmask,$twres\t\t\t# isolate carry and residue",68]],"useCount":5679},{"word":"case","context":[["if ($ctx =~ /^\\+\\s*(case\\s+|default:)/ &&",297],["--mailback                 only produce a report in case of warnings/errors",280],["case|",294],["# case and default should not have general statements after them",294],["if ($line =~ /^.\\s*(?:case\\s*.*|default\\s*):/g &&",296],["# terminating a case value or a label.",296],["} elsif ($cur =~/^(case)/o) {",296],["if|for|while|switch|return|case|",298],["# Check for switch () and associated case and default",303],["# variants.  Upper/lower case distinctions never matter.",2480]],"useCount":18533},{"word":"category","context":[["category    => \"Resource Management\"",158],["'category'  => 'operations',",167],["category => 'console',",232],["category => 'x11',",240],["category => 'installation',",246],["'category' => 'Rijndael+HMAC',",365],["'category' => {},",441],["'category',",458],["'category' => 'Rijndael',",257],["'category' => 'basic operations',",1090]],"useCount":9001},{"word":"cc","context":[["$cc = substr($opline, $off + length($elements[$n + 1]));",303],["$cc !~ /^\\\\/ && $cc !~ /^;/) {",298],["($ctx =~ /Wx./ && $cc =~ /^;/)) {",299],["my $cb = \"$ca$;$cc\";",302],["my $cc = '';",303],["$cc !~ /^\\\\/ && $cc !~ /^;/) {",298],["$cc =~ /^\\S+\\@\\S+>/) ||",296],["if ($op eq '*' && $cc =~/\\s*$Modifier\\b/) {",291],["$ca =~ /\\s$/ && $cc =~ /^\\s*,/) {",247],["if ($ctx !~ /.x[WEC]/ && $cc !~ /^}/) {",270]],"useCount":5774},{"word":"cf","context":[["cf(1,eq(attr(var(0),'VTYPE'),'main')),",90],["'fwknopd_cmdline' => \"$fwknopdCmd -c $cf{'disable_aging'} -a $cf{'hmac_access'} \" .",92],["'fwknopd_cmdline' => \"$fwknopdCmd -c $cf{'disable_aging'} -a $cf{'hmac_access'} \" .",92],["xor\t$zero,$zero\t\t# cf=0, of=0",94],["cf(1,eq(attr(var(0),'STMT-TYPE'),'decl')),",103],["adcx\t$zero,%r14\t\t# cf=0",130],["sbb\t$carry,$carry\t\t# mov cf,$carry",168],["cf(1,eq(attr(var(0),'VFORM'),'fin')),",176],["neg\t$carry\t\t\t# mov $carry,cf",192],["'key_file' => $cf{'rc_hmac_b64_key'},",196]],"useCount":9185},{"word":"cgi","context":[["print $query->redirect(\"/cgi-bin/koha/errors/404.pl\");",119],["print $query->redirect(\"/cgi-bin/koha/serials/subscription-detail.pl?subscriptionid=$subscriptionid\");",112],["query => $cgi,",110],["my $cgi = CGI->new;",106],["use lib '/tmapp/tmsrc/cgi-bin/';",139],["# bug 399035, http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=399035),",149],["# bug 399035, http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=399035),",149],["query           => $cgi,",502],["output_html_with_http_headers $cgi, $cookie, $template->output;",590],["my $cgi = new CGI;",740]],"useCount":13533},{"word":"change","context":[["# feel free to change them in the below if statements.",61],["# name or existence of this file are subject to change without notice.  Don't",6892],["# the name or existence of this file are subject to change without notice.",3636],["# Init variables that can change between each test case",149],["# so don't change LD_LIBRARY_PATH on that platform.",149],["if ($in_commit_log && $line =~ /^\\s*change-id:/i) {",71],["print STDERR \"y to accept these or type the letter for one to change!\\n\";",69],["# change 'tests => 1' to 'tests => last_test_to_print';",66],["# but its format and even its name or existence are subject to change without",63],["# If it was a CSV export we change the format after the export so the file extension is fine",60]],"useCount":15953},{"word":"changes","context":[["# database, Version 6.1.0.  Any changes made here will be lost!",2613],["# biblioitems changes",65],["# Any changes made here will be lost!",2921],["# no changes",76],["Do _NOT_ submit these changes without inspecting them for correctness.",103],["# database, Version 7.0.0.  Any changes made here will be lost!",405],["# database, Version 6.3.0.  Any changes made here will be lost!",1161],["# database, Version 5.2.0.  Any changes made here will be lost!",1670],["# database, Version 6.2.0.  Any changes made here will be lost!",1762],["# database, Version 6.0.0.  Any changes made here will be lost!",1994]],"useCount":15571},{"word":"char","context":[["\"static const char * array should probably be static const char * const\\n\" .",193],["# (char*[ const])",292],["# check for static char foo[] = \"bar\" declarations.",225],["if ($line =~ /\\bstatic\\s+char\\s+(\\w+)\\s*\\[\\s*\\]\\s*=\\s*\"/) {",225],["qr{(?:unsigned\\s+)?char},",224],["if ($line =~ /\\bstatic\\s+const\\s+char\\s*\\*\\s*(\\w+)\\s*\\[\\s*\\]\\s*=\\s*/) {",215],["# check for static const char * arrays.",215],["\"static const char * array should probably be static const char * const\\n\" .",193],["\"static char array declaration should probably be static const char\\n\" .",193],["\"static char array declaration should probably be static const char\\n\" .",193]],"useCount":10341},{"word":"chdir","context":[["# We make the path absolute, as the server will do a chdir() before usage",147],["chdir $temp_folder_for_building_project;",136],["# --datadir must exist, mysqld will chdir into it",144],["chdir($cwd);",145],["chdir(\"..\");",156],["chdir(\"$olddir\");",184],["chdir('SNPGenie_Results');",211],["chdir($olddir);",213],["chdir('..');",255],["chdir \"..\";",322]],"useCount":5893},{"word":"check","context":[["$check = 0;",979],["# check we are in a valid source file if not then ignore this hunk",303],["my $check = 0;",674],["$check = 1;",472],["# Get and check command line options",454],["# also makes it possible to wait for any process to exit during the check",357],["# Return immediately if no check proceess was started",357],["# Kill any check processes still running",357],["# check for malformed paths in #include statements (uses RAW line)",303],["# check spacing on square brackets",303]],"useCount":45404},{"word":"chomp","context":[["chomp;",19197],["chomp $line;",5330],["chomp($line);",4703],["chomp($_);",1277],["chomp $_;",1006],["chomp();",647],["chomp($current_comment);",303],["while (<$fh>) { chomp;",287],["chomp $l;",273],["chomp $verein[$y];",260]],"useCount":50705},{"word":"chr","context":[["#chr     pos     strand  type    num_C   depth   percentage      isMeth",69],["'chr sbag_member'(B, A),",169],["'chr sbag_member'(E, D),",94],["my $chr;",91],["print chr($t[$mptr]);",90],["'chr sbag_member'(D, C),",86],["chr(hex '00').",79],["(   'chr newvia_1'(A, B)",74],["foreach my $chr(sort keys %chr_len){",70],["my $chr = $a[0];",69]],"useCount":7263},{"word":"class","context":[["my $class = shift;",1383],["<th class=listtop>$form->{title}</th>",547],["class=\\\"input_marceditor\\\"",192],["<table class=\"menu\" border=\"0\" cellspacing=\"0\">",224],["# Check that the storage class is at the beginning of a declaration",266],["# storage class and type.",302],["bless $self, $class;",316],["<tr class=listheading>",470],["\"inline keyword should sit between storage class and type\\n\" . $herecurr);",193],["<div class=\"header\">",492]],"useCount":24157},{"word":"classes","context":[["my @classes = uniq( map {$_->{class}} @$attributes );",44],["my %classes;",36],["@classes = sort @classes;",58],["for my $class (@classes) {",36],["foreach my $class (@classes) {",36],["my @classes;",49],["$classes = parse_code_tree(\\$src);",49],["send(@classes, for_all,",25],["get(@classes, member, ClassName, Class),",27],["@classes = sort @classes;",58]],"useCount":7070},{"word":"clean","context":[["return $clean;",312],["my $clean = 'X' x length($1);",598],["our $clean = 0;",892],["our $clean = 1;",302],["if ($summary && !($clean == 1 && $quiet == 1)) {",299],["$res =~ s@\\<.*\\>@<$clean>@;",299],["#\t\t\t$clean = 0;",300],["if ($mailback && ($clean == 1 || !$is_patch)) {",299],["$res =~ s@(\\#\\s*(?:error|warning)\\s+).*@$1$clean@;",297],["if ($clean == 1 && $quiet == 0) {",257]],"useCount":7456},{"word":"client","context":[["'subcategory' => 'client save rc file',",317],["client => {",273],["# write init file for mysqld or client",272],["'subcategory' => 'client+server',",545],["'subcategory' => 'client',",320],["debugger_arguments(\\$args, \\$exe, \"client\");",149],["gdb_arguments(\\$args, \\$exe, \"client\");",149],["compress              Use the compressed protocol between client and server",149],["my $client = shift;",360],["$client->set_die_on_faults(1);",454]],"useCount":14315},{"word":"close","context":[["close F;",1856],["close FILE;",3666],["close(OUT);",2880],["close($fh);",2246],["close(F);",2562],["close IN;",4549],["close(FILE);",3848],["close OUT;",3600],["close $fh;",3555],["close(IN);",3237]],"useCount":109177},{"word":"cluster","context":[["foreach my $cluster (@{$clusters})",130],["foreach my $ndbd ( in_cluster($cluster, ndbds()) )",337],["foreach my $cluster ( clusters() )",296],["foreach my $ndb_mgmd ( in_cluster($cluster, ndb_mgmds()) )",254],["mtr_add_arg($args, \"--defaults-group-suffix=%s\", $cluster->suffix());",356],["my $cluster= shift;",371],["my $cluster_dir= \"$opt_vardir/\".$cluster->{name};",166],["if (ndbcluster_wait_started($cluster, \"\"))",135],["my ($cluster)= @_;",177],["# if script decided to run mysqltest cluster _is_ installed ok",214]],"useCount":11037},{"word":"cmd","context":[["$ret=`$cmd`;",941],["$cmd->finish();",339],["my $cmd = shift;",507],["`$cmd`;",554],["print \"$cmd\\n\";",649],["&process_cmd($cmd);",657],["usage($cmd);",698],["my ($cmd) = @_;",846],["system($cmd);",1475],["my $cmd;",918]],"useCount":34250},{"word":"cmdname","context":[["'cmdname' => 'section',",372],["'cmdname' => 'code',",767],["'cmdname' => 'cindex',",511],["'cmdname' => 'menu',",737],["'cmdname' => '@',",664],["'cmdname' => 'top',",836],["'cmdname' => 'chapter',",853],["'cmdname' => 'item',",991],["'cmdname' => 'end',",2507],["'cmdname' => 'node',",3964]],"useCount":22968},{"word":"cmp","context":[["foreach my $name (sort {uc($a) cmp uc($b)} keys %package) {",170],["&cmp\t($key,$__end);",124],["@{$pmpr} = sort { $a->{file_name} cmp $b->{file_name} } @{$pmpr};",188],["@{$pu03} = sort { $a->{file_name} cmp $b->{file_name} } @{$pu03};",188],["@{$pu01} = sort { $a->{file_name} cmp $b->{file_name} } @{$pu01};",188],["cmp\t%r10,%rbx\t\t# context->Rip<prologue label",226],["cmp\t%r10,%rbx\t\t# context->Rip>=epilogue label",306],["cmp\t%r11,%r10",113],["cmp\t%r10,%rbx\t\t# context->Rip>=.Lepilogue",123],["cmp\t$num,$j",162]],"useCount":11826},{"word":"cnt","context":[["for (my $n = 0; $n < $cnt; $n++) {",872],["$cnt--;",731],["my $cnt = 0;",706],["my $cnt = statement_rawlines($ctx);",446],["($dstat, $dcond, $ln, $cnt, $off) =",431],["my $cnt = $realcnt;",924],["$cnt++;",1183],["$cnt-- if ($lines[$ln - 1] !~ /^-/);",344],["while ($cnt) {",295],["my ($linenr, $cnt) = @_;",294]],"useCount":12483},{"word":"code","context":[["$code =~ s/\\`([^\\`]*)\\`/eval $1/gem;",351],["# the main body of the table, and what all code points missing from this file",413],["$code=<<___;",558],["print $code;",761],["'cmdname' => 'code',",767],["$code.=<<___ if ($win64);",1569],["# [brackets] indicate how many code points are in the range.",2478],["# omitted, the range has just one code point.  Numbers in comments in",2478],["# starting code point of the range, in hex; STOP is the ending point, or if",2478],["$code.=<<___;",17202]],"useCount":77570},{"word":"col","context":[["foreach my $col ( @loopcol ) {",197],["$pdb->{$section}->{$machine}{$lane}{$stage}{delta}{$fadd}{$fsadd}{data}{$col} = $prow->{$col};",219],["$pdb->{$section}->{$machine}{$lane}{$stage}{delta}{$fadd}{$fsadd}{data}{$col} = $prow->{$col};",219],["foreach my $col (@nozzle_count_cols)",1375],["foreach my $col (@feeder_count_cols)",1315],["foreach my $col (@{$pcols})",923],["#                 foreach my $col (@nozzle_count_cols)",306],["#                 foreach my $col (@feeder_count_cols)",221],["$pdb->{$section}->{$machine}{$lane}{$stage}{delta}{$nhadd}{$ncadd}{data}{$col} = $prow->{$col};",225],["$pdb->{$section}->{$machine}{$lane}{$stage}{delta}{$nhadd}{$ncadd}{data}{$col} = $prow->{$col};",225]],"useCount":14925},{"word":"colon","context":[["Don't forget to quote the portion after the colon if necessary.",33],["# A colon can be substituted for the equals sign, and within each group",150],["# above, anything to the left of the equals (or colon) can be combined with",150],["# Anything other than 'wait' or 'restart:' (with a colon) will",118],["# colon immediately before or after",51],["# ignore a colon with another",51],["# map colon-flags to print decorations",46],["# the equals (or colon) can be combined with anything to the right.  Thus,",2251],["# A colon can be substituted for the equals sign, and anything to the left of",2251],["# A colon needs no spaces before when it is",296]],"useCount":5948},{"word":"color","context":[["color: black;",75],["weechat::color($color).",112],["weechat::color($color).",112],["\"git log --no-color \" .",88],["color           => \"#FF0000\",",85],["color           => \"#0000FF\",",83],["my $color;",126],["my $output = `git log --no-color --format='%H %s' -1 $commit 2>&1`;",71],["color\t\t=> 'colored',",118],["print color 'reset';",368]],"useCount":8699},{"word":"column","context":[[")->grid(-row=>$$row,-column=>0,-sticky=>'ewns');",226],["my $geO = Bio::KBase::CDMI::CDMIClient->new_get_entity_for_script(\"c=i\"\t\t=> \\$column,",306],["would read in a file of ids and add a column for each field in the relationship.",306],["#   fill-column: 100",376],["#80 column limit",157],["where N is the column (from 1) that contains the id.",386],["line would contain the id. If some other column contains the id,",386],["while (my @tuples = Bio::KBase::Utilities::ScriptThing::GetBatch($ih, undef, $column)) {",453],["my $column;",542],["Select the identifier from column num",612]],"useCount":14791},{"word":"com","context":[["#   \"joe smith joe@smith.com\" bad",194],["# and COPYING for more information, or see http://slashcode.com/.",374],["# (c) 2007,2008, Andy Whitcroft <apw@uk.ibm.com> (new conditions, test suite)",291],["# Website: https://github.com/trizen",254],["# (c) 2008-2010 Andy Whitcroft <apw@canonical.com>",250],["# Author: H. Carvey, keydet89@yahoo.com",219],["# (c) 2005, Joel Schopp <jschopp@austin.ibm.com> (the ugly bit)",302],["# http://www.ncftp.com/ncftpd/doc/misc/ephemeral_ports.html",149],["# Author: David Torres <api.davidtorres@gmail.com>",153],["#   \"joe smith <joe@smith.com\" bad",194]],"useCount":11449},{"word":"command","context":[["print \"$command\\n\";",187],["$command = '",222],["'command' => {}",9856],["-command => sub {",305],["my $command = shift;",313],["system($command);",423],["# Get and check command line options",454],["'command' => {},",3596],["This is a pipe command. The input is taken from the standard input, and the",493],["my $command;",269]],"useCount":42716},{"word":"comment","context":[["$tinfo->{comment}=",905],["# edge is a close comment then we must be in a comment",300],["# Catch a comment on the end of the line itself.",303],["# // is a comment",303],["# Guestimate if this is a continuing comment.  If this",303],["# ' *' then it is very likely a comment.",303],["$tinfo->{comment}.=",598],["&comment(\"\");",440],["$comment = $2 if defined $2;",388],["# comment.",304]],"useCount":21224},{"word":"comments","context":[["Please email comments or questions to the public Ensembl",593],["# Remove C99 comments.",301],["#\t\t\t\t# Ignore comments",296],["# remove comments (# foo) at the beginning of the line, or after a",119],["# ignore comments",138],["#  1) within comments",224],["\"networking block comments don't use an empty /* line, use /* Comment...\\n\" . $hereprev);",131],["# no C99 // comments",301],["$s =~ s/$;//g; \t# Remove any comments",582],["# omitted, the range has just one code point.  Numbers in comments in",2478]],"useCount":10169},{"word":"compat","context":[["\"DT compatible string \\\"$compat\\\" appears un-documented -- check $dt_path\\n\" . $herecurr);",89],["next if $compat !~ /^([a-zA-Z0-9\\-]+)\\,/;",81],["`grep -Erq \"$compat|$compat2|$compat3\" $dt_path`;",80],["% @compat RFC 3987",39],["my $compat2 = $compat;",89],["my $compat3 = $compat;",80],["%\t@compat sicstus",54],["foreach my $compat (@compats) {",89],["# definition found. No need for compat",113],["# definition not found. This means that we need compat",113]],"useCount":14773},{"word":"cond","context":[["my ($cond, $block) = @{$chunks[0]};",299],["if (defined $cond) {",889],["($stat, $cond, $line_nr_next, $remain_next, $off_next) =",640],["substr($block, 0, length($cond), '');",896],["my ($cond, $block) = @{$chunks[1]};",299],["my ($cond, $block) = @{$chunk};",298],["my ($s, $c) = ($stat, $cond);",593],["if (statement_lines($cond) > 1) {",589],["#print \"APW: ALLOWED: cond<$cond>\\n\";",557],["#print \"APW: ALLOWED: cond<$cond>\\n\";",557]],"useCount":9507},{"word":"condition","context":[["#warn \"CONDITION<$condition>\\n\";",300],["push(@chunks, [ $condition, $statement ]);",598],["($statement, $condition, $linenr, $remain, $off, $level) =",598],["condition(true, [",438],["my $condition = substr($blk, $soff, $coff - $soff + 1);",300],["#print \"C: c<$condition> s<$statement> remain<$remain>\\n\";",299],["if (!($remain > 0 && $condition =~ /^\\s*(?:\\n[+-])?\\s*(?:if|else|do)\\b/s)) {",299],["# Check the condition.",299],["my ($statement, $condition, $level);",299],["last if (!($remain > 0 && $condition =~ /^(?:\\s*\\n[+-])*\\s*(?:else|do)\\b/s));",299]],"useCount":8837},{"word":"conf","context":[["my ($conf) = @_;",255],["if (-e \"$path/$conf\") {",237],["open(my $conffile, '<', \"$conf\")",237],["my $configuration_file = \".checkpatch.conf\";",193],["my $conf = which_conf($configuration_file);",193],["local $conf = &get_config();",192],["my %conf;",145],["return \"$path/$conf\";",237],["if (-f $conf) {",241],["$conf =~ tr/\\.-/__/;",130]],"useCount":11459},{"word":"config","context":[["my %config = (hive          => \"NTUSER\\.DAT\",",285],["sub getHive {return $config{hive};}",684],["my $config = new Vyatta::Config;",310],["use Getopt::Long qw(:config no_ignore_case);",332],["sub getVersion {return $config{version};}",684],["sub getConfig{return %config}",646],["my $config;",311],["my $config = shift;",584],["my ($config) = @_;",418],["use Getopt::Long qw(:config no_auto_abbrev);",391]],"useCount":39941},{"word":"const","context":[["(?:\\s+$Modifier|\\s+const)*",468],["\"static char array declaration should probably be static const char\\n\" .",193],["} elsif ($s =~ /^.(?:$Storage\\s+)?(?:$Inline\\s+)?(?:const\\s+)?($Ident)\\b\\s*(?!:)/s) {",294],["if ($arg =~ /^(?:const\\s+)?($Ident)(?:\\s+$Sparse)*\\s*\\**\\s*(:?\\b$Ident)?$/s || $arg =~ /^($Ident)$/s) {",297],["const|",300],["(?:$Modifier\\s+|const\\s+)*",468],["# (char*[ const])",292],["# check for various ops structs, ensure they are const.",207],["if ($line =~ /\\bstatic\\s+const\\s+char\\s*\\*\\s*(\\w+)\\s*\\[\\s*\\]\\s*=\\s*/) {",215],["# check for static const char * arrays.",215]],"useCount":19904},{"word":"constant","context":[["use constant MIDVERBOSE => 2;",126],["use constant MINVERBOSE => 1;",126],["use constant MAXVERBOSE => 3;",126],["use constant NOVERBOSE => 0;",126],["use constant TRUE => 1;",155],["use constant FALSE => 0;",191],["use constant {",584],["# things that are constant during the whole lifetime of mysql-test-run",116],["use constant INDEX => '[Index]';",115],["use constant INFORMATION => '[Information]';",115]],"useCount":9621},{"word":"content","context":[["(module, code, name, title, content)",175],["$content = <<EOF;",307],["&loop_unroll_c($content, 'len', 4);",194],["content => {",226],["return $content;",266],["my $content;",285],["<meta name=\"resource-type\" content=\"document\">",290],["'content' => [",1308],["<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">",321],["<meta name=\"distribution\" content=\"global\">",290]],"useCount":15570},{"word":"contents","context":[["% The contents of this file are subject to the Cisco-style Mozilla Public",245],["'contents' => [",28228],["'contents' => [],",7455],["# Use Unicode::UCD::prop_invlist() to access the contents of this file.",826],["my $contents = \"\";",281],["$contents .= $line",255],["# contents are now retrievable through a stable API in the Unicode::UCD",63],["'cmdname' => 'contents',",68],["$contents = \"\";",82],["my $contents = shift;",102]],"useCount":40640},{"word":"context","context":[["mov\t248($context),%rbx\t# pull context->Rip",501],["mov\t%rdi,176($context)\t# restore context->Rdi",378],["mov\t%rsi,168($context)\t# restore context->Rsi",378],["mov\t%rbx,144($context)\t# restore context->Rbx",380],["mov\t%rbx,144($context)\t# restore context->Rbx",380],["mov\t120($context),%rax\t# pull context->Rax",492],["mov\t120($context),%rax\t# pull context->Rax",492],["mov\t152($context),%rax\t# pull context->Rsp",496],["mov\t152($context),%rax\t# pull context->Rsp",496],["mov\t248($context),%rbx\t# pull context->Rip",501]],"useCount":20602},{"word":"cookie","context":[["my ( $template, $borrowernumber, $cookie ) = get_template_and_user(",802],["output_html_with_http_headers $query, $cookie, $template->output;",1984],["($template, $loggedinuser, $cookie)",176],["output_html_with_http_headers $cgi, $cookie, $template->output;",590],["my ($template, $loggedinuser, $cookie)",1222],["output_html_with_http_headers $input, $cookie, $template->output;",3631],["( $template, $loggedinuser, $cookie ) = get_template_and_user(",325],["my ( $template, $loggedinuser, $cookie ) = get_template_and_user(",1858],["my ($template, $borrowernumber, $cookie)",224],["my ($template, $loggedinuser, $cookie) = get_template_and_user({",189]],"useCount":15329},{"word":"copy","context":[["copy($path_config_file, $save_dir);",83],["# Genomes at veronika@thefig.info or download a copy from",106],["my $sline = $line;\t#copy of $line",96],["mov\t%r11,$_rsp\t\t# save copy of %rsp",83],["+++ Makefile\t(working copy)",108],["mov\t%rsp,%r11\t\t# copy %rsp",110],["mtr_error(\"Failed to copy system db to '$datadir'\")",119],["# copy all files from std_data into var/std_data",119],["# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",291],["# Always copy over the diff marker.",299]],"useCount":8687},{"word":"core","context":[["# This file is for internal use by core Perl only.  The format and even the",5878],["max-save-core         Limit the number of core files saved (to avoid filling",149],["$realfile !~ m@^drivers/base/core@) {",248],["\"use of in_atomic() is incorrect outside core kernel code\\n\" . $herecurr);",184],["\"Using yield() is generally wrong. See yield() kernel-doc (sched/core.c)\\n\"  . $herecurr);",153],["# Allow --skip-core-file to be set in <testname>-[master|slave].opt file",149],["if ($arg eq \"--skip-core-file\")",149],["'max-save-core=i'          => \\$opt_max_save_core,",149],["my $num_saved_cores= 0;  # Number of core files saved in vardir/log/ so far.",149],["max-save-core         Limit the number of core files saved (to avoid filling",149]],"useCount":12365},{"word":"count","context":[["my $count = 0;",3335],["# increment relationship count or create relationship entry",349],["for (my $i = 0; $i < $count; $i++) {",370],["my $count = 1;",372],["return $count;",372],["$count=0;",457],["my $count;",660],["my $count=0;",697],["$count = 0;",1372],["$count++;",5479]],"useCount":37728},{"word":"counter","context":[["my $counter;",162],["last if((not $fullstats) && (not $counter--));",174],["sprintf(\"(%s)...\\n\\n\", (not $fullstats)?\"top $counter\":\"full\");",174],["$metricObject = $service->{metricArray}->[$counter];",207],["for ($counter=0; $counter < $arrayLength; $counter++)",297],["for ($counter=0; $counter < $arrayLength; $counter++)",297],["for ($counter=0; $counter < $arrayLength; $counter++)",297],["$counter = 0;",351],["my $counter = 0;",810],["$counter++;",1372]],"useCount":8616},{"word":"counts","context":[["-r value - red flag if counts decrease by more than this amount.",40],["my @counts;",46],["my %counts = ();",49],["$relations[$ctr][2]=$counts[$ref_index][1];# ref occurences",54],["$relations[$ctr][3]=$counts[$ref_index][2];# ref avg len",54],["$relations[$ctr][7]=$counts[$sub_index][1];# sub occurences",54],["# check for line continuations in quoted strings with odd counts of \"",209],["my %counts;",125],["printf $log_fh \"ERROR: [%s] %s key %s NOT found in cache. Taking counts (%d) as is.\\n\",",60],["$relations[$ctr][8]=$counts[$sub_index][2];# sub avg len",54]],"useCount":5878},{"word":"create","context":[["# create common objects",611],["# increment relationship count or create relationship entry",349],["POE::Session->create(",115],["mtr_error(\"Could not create testcase server port: $!\") unless $server;",119],["or die \"failed to create pipe: $!\";",128],["mtr_verbose(\"No need to create '$opt_vardir' it already exists\");",146],["vs-config             Visual Studio configuration used to create executables",147],["#add create new service",182],["# called by default. Used to create form to add or  modify a record",256],["# create history entry",346]],"useCount":12988},{"word":"csv","context":[["my $csv = Text::CSV->new();",217],["while (my $row = $csv->getline($mapfile)){",166],["my $csv = Text::CSV_XS->new();",157],["# Printing to a csv file",115],["-attachment=>\"$basename.csv\",",109],["my $outnm = $prod_dir . '/' . $csv_file . \".csv\";",70],["-filename=>\"$basename.csv\" );",88],["'/opt/zimbra/zmstat/proc.csv',",84],["$zip->addFile(csv_dump($dbh, $_), sprintf('%s.csv', $_->{name})) for",70],["-type       => 'text/csv',",82]],"useCount":7480},{"word":"ctx","context":[["$ctx = $dstat;",307],["if ($ctx =~ /Wx.|.xW/) {",303],["my $at = \"(ctx:$ctx)\";",303],["my $ctx = join(\"\\n\", @ctx);",308],["my $ctx = join(\"\\n\", @ctx);",308],["if ($ctx =~ /Wx./) {",357],["$ctx =~ s/\\n*$//;",386],["my $cnt = statement_rawlines($ctx);",446],["\"$here\\n$ctx\\n$rawlines[$ctx_ln - 1]\\n\");",498],["my $ctx = '';",565]],"useCount":26584},{"word":"cur","context":[["} elsif ($cur =~ /^(sizeof)\\s*(\\()?/o) {",300],["} elsif ($cur =~ /^($Ident|$Constant)/o) {",300],["} elsif ($cur =~ /^(\\))/o) {",300],["if ($cur =~ /^(\\s+)/o) {",300],["$cur = substr($cur, length($1));",300],["} elsif ($cur =~ /^($Operators)/o) {",300],["while (length($cur)) {",300],["} elsif ($cur =~ /^(\\\\\\n)/o) {",300],["} elsif ($cur =~ /^($Assignment)/o) {",300],["my $cur = $stream;",300]],"useCount":10506},{"word":"current","context":[["# belonging to current tets into @lines",119],["$current = $key->get_value(\"Current\")->get_data();",129],["# as the current test requires",149],["# with output which is incompatible with the current locale",149],["# settings, we reset the current values of LC_ALL and LC_CTYPE to \"C\".",149],["my $current;",193],["# same line do not need a level, so we use the current block context",285],["the current test run. Defaults to",119],["# to try and find and validate the current printk.  In summary the current",285],["# to try and find and validate the current printk.  In summary the current",285]],"useCount":12190},{"word":"cut","context":[["my $wgetexe       = \"/usr/bin/wget -nH --cut-dirs=3\";",66],["#=cut",63],["# cut -f2- -d\":\"",62],["# what parts to cut off from the protocol",57],["#pod =cut",42],["# cut off everything but the digits",40],["#\t\t    echo \"commit $(cut -c 1-12,41-)\"",69],["# Yes, we must cut off the final newline from the final line",129],["# =cut",129],["=cut",33416]],"useCount":34428},{"word":"d","context":[["if ($rawline=~/^\\@\\@ -\\d+(?:,\\d+)? \\+(\\d+)(,(\\d+))? \\@\\@/) {",299],["if ($rawline=~/^\\@\\@ -\\d+(?:,\\d+)? \\+(\\d+)(,(\\d+))? \\@\\@/) {",299],["if ( ! -d $opt_vardir )",298],["} elsif ($cur =~ /^($Ident\\s*):(?:\\s*\\d+\\s*(,|=|;))?/) {",292],["#     printf $log_fh \"%d: File %s already exists\\n\", __LINE__, $outfnm if ( -e $outfnm);",510],["if ($rawline=~/^\\@\\@ -\\d+(?:,\\d+)? \\+(\\d+)(,(\\d+))? \\@\\@/) {",299],["if ($rawline=~/^\\@\\@ -\\d+(?:,\\d+)? \\+(\\d+)(,(\\d+))? \\@\\@/) {",299],["my ($i,$a,$b,$c,$d,$e)=@_;",306],["\"-d $default_digest_file -p $default_pid_file $intf_str\",",413],["my ($a,$b,$c,$d,$e);",563]],"useCount":85434},{"word":"dat","context":[["push( @results, $dat );",120],["my ($dat,$fld,$val) = @_;",148],["$dat->{MARCSUBJCTS}    = $marcsubjctsarray;",110],["$dat->{MARCAUTHORS}    = $marcauthorsarray;",110],["$dat->{MARCNOTES}      = $marcnotesarray;",100],["$dat->{ITEM_RESULTS}   = \\@items;",110],["my ($val,$dat) = @_;",103],["movl\t($dat,$XX[0],4),$TX[0]#d",102],["aesmc\t$dat,$dat",249],["aesmc\t$dat,$dat",249]],"useCount":8186},{"word":"data","context":[["# use it directly.  Use Unicode::UCD to access the Unicode character data",1538],["# called by default form, used to confirm deletion of data in DB",262],["my $data = {",282],["foreach my $key (keys %{$pu01->{$section}->{data}})",450],["foreach my $prow (@{$pu01->{$section}->{data}})",522],["my @data;",529],["return $data;",545],["my $data;",1150],["my %data;",859],["my $data = shift;",795]],"useCount":69071},{"word":"data_byte","context":[["&data_byte(0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25);",143],["&data_byte(0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38);",143],["&data_byte(0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4);",143],["&data_byte(0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb);",143],["&data_byte(0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16);",143],["&data_byte(0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02);",143],["&data_byte(0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87);",143],["&data_byte(0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84);",143],["&data_byte(0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e);",143],["&data_byte(0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb);",143]],"useCount":9388},{"word":"database","context":[["\"Could not install system database from $bootstrap_sql_file\\n\" .",145],["# database, Version 6.1.0.  Any changes made here will be lost!",2613],["database:",169],["mtr_add_arg($args, \"--database=test\");",172],["# database, Version 7.0.0.  Any changes made here will be lost!",405],["# Web-Server, MySQL database and Sphinx 2 indexing.",754],["# database, Version 6.3.0.  Any changes made here will be lost!",1161],["# database, Version 5.2.0.  Any changes made here will be lost!",1670],["# database, Version 6.2.0.  Any changes made here will be lost!",1762],["# database, Version 6.0.0.  Any changes made here will be lost!",1994]],"useCount":20440},{"word":"date","context":[["'date'          => $date,",188],["runCommandNE(\"date\");",176],["chomp($date);",186],["'date'          => $date,",188],["$date = `date`;",188],["$date = `date`;",188],["my $date;",202],["my $date = '';",204],["$date          = $parts[0];",376],["# get today date & replace YYYY, MM, DD if provided in the default value",107]],"useCount":24846},{"word":"db","context":[["$result = $db->query($sqlstring) || SQLError($db->errmsg(),$sqlstring);",136],["my %db = ();",262],["$db->updated;",224],["for $db (@{$info->{db}}) {",197],["my $db;",197],["for $db (@{$info->{db}}) {",197],["our $db = Lacuna->db;",180],["our $db = Lacuna->db;",180],["my $db = MediaWords::DB::connect_to_db;",162],["my $db = shift;",140]],"useCount":11433},{"word":"dbg_values","context":[["print \"PAREN('$1')\\n\" if ($dbg_values > 1);",598],["print \"PRE_END($1)\\n\" if ($dbg_values > 1);",299],["print \"END($1)\\n\" if ($dbg_values > 1);",299],["print \"CLOSE($1)\\n\" if ($dbg_values > 1);",299],["print \"OP($1)\\n\" if ($dbg_values > 1);",299],["print \"FUNC($1)\\n\" if ($dbg_values > 1);",299],["print \"KEYWORD($1)\\n\" if ($dbg_values > 1);",299],["print \"WS($1)\\n\" if ($dbg_values > 1);",299],["print \"SIZEOF($1)\\n\" if ($dbg_values > 1);",299],["print \"PRE_RESTART($1)\\n\" if ($dbg_values > 1);",299]],"useCount":10084},{"word":"dbh","context":[["$dbh->do(",2210],["$dbh->do(\"",2482],["$dbh->do(q|",1522],["$dbh->disconnect();",1352],["my $dbh = C4::Context->dbh;",3666],["my $dbh = C4::Context->dbh;",3666],["$dbh->do(q{",3766],["$dbh->do(qq{",1299],["$dbh->disconnect;",1235],["$sth = $dbh->prepare($query);",932]],"useCount":83179},{"word":"debug","context":[["if ($debug)",401],["debug           => 1,",3040],["debug => 1,",2030],["if ($debug) {",1631],["my $debug = 0;",1545],["debug(",830],["if($debug){",760],["if(!$debug){",592],[":- use_module(library(debug)).",449],["my $debug=0;",385]],"useCount":41774},{"word":"debugger","context":[["# Indicate that we are using debugger",149],["$$exe= $debugger;",296],["# Modify the exe and args so that program is run in the selected debugger",149],["'debugger=s'               => \\$opt_debugger,",149],["if ( $debugger =~ /vcexpress|vc|devenv/ )",149],["my $debugger= $opt_debugger || $opt_client_debugger;",149],["mtr_error(\"Unknown argument \\\"$debugger\\\" passed to --debugger\");",147],["elsif ( $debugger =~ /windbg/ )",147],["mtr_error(\"Unknown argument \\\"$debugger\\\" passed to --debugger\");",147],["'client-debugger=s'        => \\$opt_client_debugger,",149]],"useCount":9049},{"word":"default","context":[["default {",280],["# By default examples are set to die on any server returned fault.",446],["!($line=~/^. [A-Za-z\\d_]+:/) and !($line=~/^.\\s+default:/)) {",281],["default => '',",569],["'values', 'possible', 'type', and 'attr' (default",281],["# case and default should not have general statements after them",294],["if ($line =~ /^.\\s*(?:case\\s*.*|default\\s*):/g &&",296],["if ($ctx =~ /^\\+\\s*(case\\s+|default:)/ &&",297],["# Check for switch () and associated case and default",303],["'save_rc_stanza' => [{'name' => 'default',",313]],"useCount":44882},{"word":"defaults","context":[["(defaults to false. this is a no-op on Win32)",128],["mtr_add_arg($args, \"--defaults-group-suffix=%s\", $cluster->suffix());",356],["(defaults to false)",264],["mtr_add_arg($args, \"--defaults-file=%s\", $path_config_file);",1484],["mtr_add_arg($args, \"--defaults-group-suffix=%s\", $mysqld->after('mysqld'));",590],["mtr_add_arg($args, \"--no-defaults\");",799],["(defaults to '[SCRIPT_DIR]/..')",128],["# --no-defaults and --skip-grant-tables are to avoid loading",146],["# Set defaults",171],["mtr_add_arg($args, \"--defaults-group-suffix=%s\", $group_suffix);",248]],"useCount":10243},{"word":"define","context":[["# ignore definitions of NR_CPUS and usage to define arrays as likely right",280],["$line !~ /^.\\s*\\s*#\\s*define\\b.*\\bNR_CPUS\\b/ &&",278],["!($line=~/\\#\\s*define.*do\\s{/) and !($line=~/}/)) {",232],["if ($line=~/\\#\\s*define.*\\\\\\s$/) {",198],["$line =~ /^.\\s*\\#\\s*define\\s*$Ident(\\()?/) {",290],["if (($prevline =~ /^.\\s*#\\s*define\\s/ ||",296],["} elsif ($ctx_before =~ /^.\\s*\\#\\s*define\\s*$/) {",296],["#no spaces allowed after \\ in define",303],["# cpp #define statements have non-optional spaces, ie",298],["} elsif ($cur =~ /^(\\#\\s*define\\s*$Ident)(\\(?)/o) {",297]],"useCount":28744},{"word":"defined","context":[["if (defined $1) {",608],["if (defined $realline_next &&",542],["if (defined $fix_elements[$n + 2]) {",508],["$comment = $2 if defined $2;",388],["if (!defined $stat);",346],["return $current_comment if (defined $current_comment);",303],["if (defined($stat_real) && $cond_lines > 1) {",588],["if (defined $cond) {",889],["if (defined $2) {",1003],["defined $stat &&",874]],"useCount":95237},{"word":"delete","context":[["delete $production->{$process};",190],["# Don't delete anything if starting dirty",143],["delete $form->{id};",125],["delete $min_configs{$config};",150],["sub delete {",153],["delete $pdb->{$section}->{$machine}{$lane}{$stage}{cache};",718],["delete $consumption->{$process};",190],["delete($result->{result});",238],["if ( delete $started{$proc->pid()} ) {",357],["delete $pdb->{$section}->{$machine}{$lane}{$stage}{delta};",376]],"useCount":21028},{"word":"delta","context":[["$pdb->{$section}->{$machine}{$lane}{$stage}{delta}{$nhadd}{$ncadd}{data}{$col} = $delta;",150],["$pdb->{$section}->{$machine}{$lane}{$stage}{delta}{$key};",1142],["$pdb->{$section}->{$machine}{$lane}{$stage}{delta}{$nhadd}{$ncadd}{data}{$col} = $prow->{$col};",225],["$pdb->{$section}->{$machine}{$lane}{$stage}{delta}{$fadd}{$fsadd}{data}{$col} = $prow->{$col};",219],["my $delta = $u01_value - $cache_value;",173],["delete $pdb->{$section}->{$machine}{$lane}{$stage}{delta};",376],["#                 $pdb->{$section}->{$machine}{$lane}{$stage}{delta}{$key};",272],["if ($delta >= 0)",289],["$pdb->{$section}->{$machine}{$lane}{$stage}{delta}{$key} = $delta;",304],["$pdb->{$section}->{$machine}{$lane}{$stage}{delta}{$key} = $delta;",304]],"useCount":8650},{"word":"desc","context":[["my $desc = shift;",124],["desc: html(\"\\",121],["return ($id, $desc);",71],["my ($commit, $id, $desc) = @_;",71],["$desc = $1;",80],["if (length $desc > 0) {",102],["$desc = substr($lines[0], 41);",71],["return ($id, $desc) if ((which(\"git\") eq \"\") || !(-e \".git\"));",71],["desc:html(\"\\",109],["my $desc;",108]],"useCount":7723},{"word":"description","context":[["$column_data{description} =",137],["description",237],["description => <<EOF,",354],["$authorised_lib{$itemtype} = $description;",119],["description => $itemtypes->{$thisitemtype}->{'description'},",178],["# check for Kconfig help text having a real description",232],["while ( my ( $itemtype, $description ) = $sth->fetchrow_array ) {",120],["<meta name=\"description\" content=\"Untitled Document\">",147],["=item description",196],["description => $itemtypes->{$thisitemtype}->{'description'},",178]],"useCount":15987},{"word":"dest","context":[["add_proto qw/void vp9_idct8x8_64_add/, \"const tran_low_t *input, uint8_t *dest, int dest_stride\";",70],["add_proto qw/void vp9_iwht4x4_1_add/, \"const tran_low_t *input, uint8_t *dest, int dest_stride\";",70],["add_proto qw/void vp9_iht8x8_64_add/, \"const tran_low_t *input, uint8_t *dest, int dest_stride, int tx_type\";",101],["add_proto qw/void vp9_idct16x16_10_add/, \"const tran_low_t *input, uint8_t *dest, int dest_stride\";",70],["add_proto qw/void vp9_idct16x16_256_add/, \"const tran_low_t *input, uint8_t *dest, int dest_stride\";",70],["add_proto qw/void vp9_idct4x4_1_add/, \"const tran_low_t *input, uint8_t *dest, int dest_stride\";",70],["add_proto qw/void vp9_idct32x32_34_add/, \"const tran_low_t *input, uint8_t *dest, int dest_stride\";",70],["add_proto qw/void vp9_idct4x4_16_add/, \"const tran_low_t *input, uint8_t *dest, int dest_stride\";",70],["add_proto qw/void vp9_iht4x4_16_add/, \"const tran_low_t *input, uint8_t *dest, int dest_stride, int tx_type\";",101],["dest++;",196]],"useCount":5889},{"word":"details","context":[["# more details.",130],["details.",97],["print-testcases       Don't run the tests but print details about all the",119],["#get borrower details",103],["#  User group details:",101],["# For details, please see",149],["'details' => {",158],["# details.",351],["# for more details.",707],["# details see http://www.openssl.org/~appro/cryptogams/.",1012]],"useCount":6411},{"word":"dev","context":[["dev.off()",153],["__(?:mem|cpu|dev|)(?:initdata|initconst|init\\b)|",159],["if (`$ENV{CC} -Wa,-v -c -o /dev/null -x assembler /dev/null 2>&1`",136],["if (`$ENV{CC} -Wa,-v -c -o /dev/null -x assembler /dev/null 2>&1`",136],["q` dev.off() `,",422],["developers list at <http://lists.ensembl.org/mailman/listinfo/dev>.",512],["my @tmpfs_locations= ($opt_mem, \"/dev/shm\", \"/tmp\");",130],["for tmpfs (/dev/shm)",130],["open($FILE, '-|', \"diff -u /dev/null $filename\") ||",292],["#  http://dev.mysql.com/doc/mysqltest/en/index.html",147]],"useCount":8535},{"word":"die","context":[["if (!$::Driver) { use FindBin; exec(\"$FindBin::Bin/bootstrap.pl\", @ARGV, $0); die; }",594],["die $usage;",931],["die;",2099],["die \"ERROR: unknown $section state: $state. Stopped\";",363],["open $ih, \"<\", $input_file or die \"Cannot open input file $input_file: $!\";",380],["#     open($outfh, \">\" , $outfnm) || die $!;",391],["die \"can't locate x86_64-xlate.pl\";",402],["# By default examples are set to die on any server returned fault.",446],["die",542],["{ PrintError => 0}) || die $DBI::errstr;",571]],"useCount":74037},{"word":"dir","context":[["# Move to final dir",276],["print \"Must be run from the top-level dir. of a kernel tree\\n\";",285],["# Running with \"var\" in mysql-test dir",290],["my $dir;",326],["my ($dir) = @_;",268],["( $xlate=\"${dir}../../perlasm/x86_64-xlate.pl\" and -f $xlate) or",383],["$0 =~ m/(.*[\\/\\\\])[^\\/\\\\]+$/; $dir=$1;",908],["my $dir = shift;",598],["( $xlate=\"${dir}x86_64-xlate.pl\" and -f $xlate ) or",397],["'text' => 'dir'",583]],"useCount":36456},{"word":"directly","context":[["content => 'These messages were not sent directly to the patrons.',",32],["# use it directly.  Use Unicode::UCD to access the Unicode character data",1538],["# Don't use it directly.",3636],["# use it directly.",5354],["# directly before it executes them, like \"make test-force-pl\" in RPM builds.",149],["# Note: all Cmds are executed directly without a shell, so the prog name",68],["# notice in a future Perl version.  Don't use it directly.  Instead, its",63],["* Please do not modify the content directly!",46],["# substitution for which is done directly in the array:",33],["# the curl binary is read directly to determine its type also need to be",32]],"useCount":11868},{"word":"directory","context":[["'directory'     => $File::Find::dir,",188],["# directory for RPM installs.",149],["# Look for the client binaries directory",149],["# Find the absolute path to the test directory",149],["# Remove the directory which the link points at",149],["# won't point at an old directory",149],["tmpdir=DIR            The directory where temporary files are stored",149],["# In most cases, the base directory we find everything relative to,",149],["vardir=DIR            The directory where files generated from the test run",149],["# Make sure the directory where it points exist",298]],"useCount":19858},{"word":"dirname","context":[["use File::Basename qw(dirname);",218],["use lib dirname($RealBin) . '/Custom';",521],["use lib dirname($RealBin) . '/Kernel/cpan-lib';",561],["use lib dirname($RealBin);",764],["use lib dirname($0);",167],["$basedir= dirname($basedir);",155],["$basedir= dirname($glob_mysql_test_dir);",118],["my $perldir= dirname($^X);",118],["my $sql_dir= dirname($path_sql);",107],["$LOCAL_PATH = dirname($0);",97]],"useCount":6091},{"word":"display","context":[["div.display {margin-left: 3.2em}",290],["--help    display this help and exits",107],["-h, --help, --version      display this help and exit",280],["pre.display {font-family: serif}",124],["pre.display {font-family: inherit}",166],["# The test tool report didn't exist, display an",119],["# multi page display gestion",118],["-? --help            display this help and exits",114],["# fix up item type for display",112],["--help         display this help and exits",108]],"useCount":8150},{"word":"div","context":[["<div class=\"header\">",492],["<div>",369],["div.example {margin-left: 3.2em}",290],["div.smalllisp {margin-left: 3.2em}",290],["div.display {margin-left: 3.2em}",290],["div.lisp {margin-left: 3.2em}",290],["div.smalldisplay {margin-left: 3.2em}",290],["div.smallexample {margin-left: 3.2em}",290],["div.indentedblock {margin-left: 3.2em}",167],["</div>",5191]],"useCount":15211},{"word":"do","context":[["$dbh->do(<<'END_SQL');",506],["$dbh->do(q{",3766],["do {",2933],["next if ($rate->sum == 0); # do not include reactions that do not occur",349],["$dbh->do(\"",2482],["$dbh->do(\"INSERT INTO `systempreferences` (variable,value,options,explanation,type)",360],["$dbh->do(",2210],["$dbh->do(q|",1522],["$dbh->do(qq{",1299],["do",665]],"useCount":71433},{"word":"does","context":[["# one does, and continue as if the #endif was not here.",299],["# or should it be fixed width column parsing? It does not",111],["print \"ERROR: Version $version of mysql-test-run does not exist!\\n\";",118],["library does not by itself cause the resulting executable to be covered",1583],["This means that the test case does not preserve the state that existed",119],["# MYSQLD_BOOTSTRAP to the full path to a mysqld which does accept",129],["# in all cases where the calling tool does not log the commands",149],["# vardir does not already exist it should be created",149],["mtr_error(\"The destination for symlink $opt_vardir does not exist\")",208],["die \"$P: $root: --root does not point at a valid tree\\n\";",296]],"useCount":9556},{"word":"don","context":[["# if nothing left, don't need to remember this line",119],["# don't use deprecated functions",150],["# don't retry if the server doesn't work",291],["# Blackfin: don't use __builtin_bfin_[cs]sync",263],["# don't include deprecated include files (uses RAW line)",150],["# so don't change LD_LIBRARY_PATH on that platform.",149],["mtr_error(\"No, don't remove the vardir when running with --extern\")",147],["\"networking block comments don't use an empty /* line, use /* Comment...\\n\" . $hereprev);",131],["# If --wait-all is also given, do the same, but don't die if one",119],["# Keep waiting if it returned 2, if 1 don't wait or stop waiting.",119]],"useCount":9519},{"word":"done","context":[["print \"done\\n\";",607],["$done = 1;",440],["print \"done.\\n\";",346],["my $done = 0;",314],["Future->done(1);",232],["print \"        goto done;\\n\";",174],["done",209],["print \"done.\\n\\n\";",197],["my %done;",184],["# done",155]],"useCount":29737},{"word":"dstat","context":[["#print \"dstat<$dstat> dcond<$dcond> cnt<$cnt> off<$off>\\n\";",293],["$dstat =~ s/^\\s*//s;",293],["#print \"dstat<$dstat> dcond<$dcond> cnt<$cnt> off<$off>\\n\";",293],["$ctx = $dstat;",307],["($dstat, $dcond, $ln, $cnt, $off) =",431],["my ($off, $dstat, $dcond, $rest);",431],["$dstat =~ s/\\\\\\n.//g;",431],["$dstat =~ s/\\s*$//s;",293],["$dstat !~ /$exceptions/ &&",293],["if ($dstat ne '' &&",293]],"useCount":8646},{"word":"e","context":[["-e \"$root/$p1_prefix\") {",287],["The standard input should be a tab-separated table (i.e., each line",492],["#     printf $log_fh \"%d: File %s already exists\\n\", __LINE__, $outfnm if ( -e $outfnm);",510],["my ($a,$b,$c,$d,$e);",563],["foreach my $e (@elements) {",398],["# This file is built by ./mktables from e.g. UnicodeData.txt.",319],["my ($i,$a,$b,$c,$d,$e)=@_;",306],["'text' => 'e'",297],["if (! -e $root . '/' . $check) {",295],["# This file is built by mktables from e.g. UnicodeData.txt.",2362]],"useCount":44344},{"word":"each","context":[["# loop through each tab 0 through 9",139],["# Init variables that can change between each test case",149],["is a tab-separated set of fields).  Normally, the last field in each",493],["The standard input should be a tab-separated table (i.e., each line",492],["would read in a file of ids and add a column for each field in the relationship.",306],["# indent level to be relevant to each other.",303],["# Log line number and time  for each line in .test file",149],["# loop through each subfield",248],["# A colon can be substituted for the equals sign, and within each group",150],["while (my($k, $v) = each %$h)",160]],"useCount":14548},{"word":"eax","context":[["xor\t%eax,%eax",289],["xor\t%eax,%eax",289],["&xor\t(\"eax\",\"ebx\");",176],["xor\t%ebx,%eax",160],["&setne\t(&LB(\"eax\"));",120],["and\t\\$0x1fffffff, %eax",110],["imull\t$n0, %eax",110],["mov\t\\$1,%eax\t\t# ExceptionContinueSearch",331],["&xor\t(\"eax\",\"eax\");",493],["&xor\t(\"eax\",\"eax\");",493]],"useCount":15971},{"word":"ebx","context":[["movzb\t-128(%rbp,%rsi),%ebx",128],["&xor\t(\"ebx\",\"edx\");",102],["&mov\t(&DWP(4,\"edi\"),\"ebx\");",103],["&push(\"ebx\");",111],["&mov\t(\"ebx\",&DWP(4,\"esi\"));",118],["&xor\t(\"eax\",\"ebx\");",176],["xor\t%ebx,%eax",160],["&movz\t(\"ebx\",&BP(-128,$tbl,\"esi\",1));",144],["&push\t(\"ebx\");",144],["&pop\t(\"ebx\");",97]],"useCount":7535},{"word":"ecx","context":[["mov\t\\$20,%ecx",95],["mov\t\\$0x80100, %ecx",98],["and\tOPENSSL_ia32cap_P+8(%rip), %ecx",98],["&xor\t(\"ecx\",\"ecx\");",130],["&scale\t(\"esi\",\"ecx\");",88],["cmp\t\\$0x80100, %ecx",85],["&mov\t(\"ecx\",&DWP(24,\"esi\"));",86],["&xor\t(\"ecx\",\"ecx\");",130],["&mov\t(\"ecx\",&DWP(8,\"esi\"));",136],["mov\t\\$154,%ecx\t\t# sizeof(CONTEXT)",261]],"useCount":10528},{"word":"edi","context":[["&mov\t(&DWP(4,\"edi\"),\"ebx\");",103],["&push(\"edi\");",107],["&mov\t(&DWP(0,\"edi\"),\"eax\");",106],["&mov\t(\"edi\",&DWP(96+4,\"esp\"));\t# inp",70],["&mov\t(&DWP(12,\"edi\"),\"edx\");",78],["&mov\t(\"edi\",&wparam(0));",129],["&mov\t(&DWP(8,\"edi\"),\"ecx\");",81],["&xor\t(\"eax\",\"edi\");",84],["&push\t(\"edi\");",91],["&scale\t(\"edi\",\"edx\");",88]],"useCount":6558},{"word":"edx","context":[["&adc\t(\"edx\",0);",397],["&adc(\"edx\",0);\t\t\t# H(t)+=carry",66],["&xor\t(\"edx\",\"edx\");",166],["&xor\t(\"edx\",\"edx\");",166],["&xor\t(\"ebx\",\"edx\");",102],["&scale\t(\"edi\",\"edx\");",88],["&mov\t(\"edx\",&DWP(12,\"esi\"));",78],["&mov\t(&DWP(12,\"edi\"),\"edx\");",78],["&mov\t($carry,\"edx\");",169],["mov\t%edx, %r10d\t\t# pass rounds",216]],"useCount":8280},{"word":"elements","context":[["$a = 'W' if ($elements[$n] =~ /\\s$/);",303],["$a = 'O' if ($elements[$n] eq '');",303],["my $op = $elements[$n + 1];",303],["if (length($opline) >= ($off + length($elements[$n + 1]))) {",303],["$a = 'B' if ($elements[$n] =~ /(\\[|\\()$/);",303],["$c = 'W' if ($elements[$n + 2] =~ /^\\s/);",303],["$cc = substr($opline, $off + length($elements[$n + 1]));",303],["$c = 'B' if ($elements[$n + 2] =~ /^(\\)|\\]|;)/);",303],["foreach my $e (@elements) {",398],["$a = 'V' if ($elements[$n] ne '');",303]],"useCount":9120},{"word":"else","context":[["else{",9283],["}else",551],["}else{",20431],["#else",2864],["}else {",1184],["} else",773],["else",52708],["# Handle nested #if/#else.",584],["else {",91396],["} else {",178748]],"useCount":383660},{"word":"elsif","context":[["} elsif ($c eq $open) {",302],["} elsif ($cur =~ /^(\\()/o) {",300],["} elsif ($op eq ',') {",303],["} elsif ($cur =~ /^($Assignment)/o) {",300],["} elsif ($cur =~ /^($Ident|$Constant)/o) {",300],["} elsif ($cur =~ /^(\\\\\\n)/o) {",300],["} elsif ($f || $t || $r) {",306],["} elsif ($realcnt == 1) {",303],["} elsif ($op eq '++' or $op eq '--') {",303],["} elsif ($op eq '//') {",303]],"useCount":104478},{"word":"email","context":[["if (\"$dequoted$comment\" ne $email &&",192],["Please email comments or questions to the public Ensembl",593],["# Don't force email to have quotes",192],["\"$ucfirst_sign_off $email\";",303],["\"$suggested_email$comment\" ne $email) {",192],["my $email = $4;",192],["\"<$email_address>$comment\" ne $email &&",192],["\"Unrecognized email address: '$email'\\n\" . $herecurr);",191],["my ($email_name, $email_address, $comment) = parse_email($email);",192],["# Ignore email addresses <foo@bar>",302]],"useCount":12437},{"word":"empty","context":[["# Fill help tables, just an empty file when running from bk repo",135],["\"networking block comments don't use an empty /* line, use /* Comment...\\n\" . $hereprev);",131],["or empty string to disable",126],["# We can get an empty argument when  we set environment variables to \"\"",72],["# (it will contain the CURRENT_TEST written by mtr, so is not empty)",119],["# Race condition seen on Windows: try again until file not empty",114],["\"True\", \"<empty>\", \"<empty>\", 43",155],["\"True\", \"<empty>\", \"<empty>\", 43",155],["# Intentionally left empty, ndbd nodes will be shutdown",90],["#  - there is no servers in an empty config",83]],"useCount":6375},{"word":"empty_line","context":[["'type' => 'empty_line'",5908],["$file_object->empty_line;",11]],"useCount":5919},{"word":"empty_spaces_after_command","context":[["'type' => 'empty_spaces_after_command'",8079]],"useCount":8079},{"word":"end","context":[["@end{verbatim}",400],["@end menu",389],["# ; should have either the end of line or a space or \\ after it",303],["=end pod",533],["'cmdname' => 'end',",2507],["# Find out what is on the end of the line after the",595],["# Should not end with a space.",584],["@end example",326],["# timestamp test result verification end",329],["@end macro",339]],"useCount":39839},{"word":"endif","context":[["endif",199],["#endif",7183],[":- endif.",704],["# endif",642],["# one does, and continue as if the #endif was not here.",299],["} elsif ($cur =~ /^(\\#\\s*(?:endif))/o) {",297],["} elsif ($remainder =~ /^#\\s*endif\\b/) {",292],["} elsif ($lines[$line] =~ /^.\\s*#\\s*endif\\b/) {",250],["#  endif",209],[".endif",205]],"useCount":13349},{"word":"entry","context":[["if ($entry =~ m@include/(.*)@) {",142],["# Loop through our list of processes and look for and entry",137],["for my $entry (split(/[, ]+/, $1)) {",142],["push(@dep_functions, $entry);",142],["} elsif ($entry !~ m@/@) {",142],["my $entry;",158],["foreach my $entry (@mode_permission_funcs) {",164],["# Only applies when adding the entry originally, after that we do not have",221],["# create history entry",346],["# increment relationship count or create relationship entry",349]],"useCount":14908},{"word":"env","context":[["#!/bin/env perl",353],["#!/usr/bin/env perl -w",269],["'mysqld-env=s'             => \\@opt_mysqld_envs,",105],["#!/usr/bin/env perl",18216],["#! /usr/bin/env perl",1585],["# Add arguments that should not go into the MYSQL_TEST env var",145],["#!/usr/bin/env genome-perl",138],["# Setup env for NDB",129],["# Setup env so childs can execute myisampack and myisamchk",111],["mysqld-env=VAR=VAL    Specify additional environment settings for \"mysqld\"",105]],"useCount":24927},{"word":"eor","context":[["eor\t$Zlh,$Tlh,$Zlh,lsr#4",132],["eor\t$s1,$s1,$t1",84],["eor\t$s0,$s0,$i1",84],["eor\t$s2,$s2,$t2",84],["eor\t$Zhl,$Zhl,$Zhh,lsl#28",132],["eor\t$Zll,$Tll,$Zll,lsr#4",132],["eor\t$Zlh,$Zlh,$Zhl,lsl#28",132],["eor\t$Zll,$Zll,$Zlh,lsl#28",132],["eor\t$Zhh,$Thh,$Zhh,lsr#4",132],["eor\t$Zhl,$Thl,$Zhl,lsr#4",132]],"useCount":6806},{"word":"eq","context":[["if ($c eq $close && $level > 0) {",302],["if ($c eq \"\\t\") {",309],["} elsif ($op eq '//') {",303],["} elsif ($op eq '++' or $op eq '--') {",303],["$c = 'O' if ($elements[$n + 2] eq '');",303],["} elsif ($op eq '++' or $op eq '--') {",303],["} elsif ($op eq ',') {",303],["if ($filename eq '-') {",310],["if (vpx_config(\"CONFIG_VP9_HIGHBITDEPTH\") eq \"yes\") {",317],["$a = 'O' if ($elements[$n] eq '');",303]],"useCount":157000},{"word":"err","context":[["my $err = 0;",533],["$err += check_fields(\\@to_fields, %all_to_fields);",306],["my $err;",457],["$err = 1;",420],["my $err = '';",358],["push(@err, $field);",547],["my @err;",573],["if ($err) {",627],["my $errfile= \"$opt_vardir/tmp/$name.err\";",357],["if (@err) {",311]],"useCount":20640},{"word":"error","context":[["error         => $errfile,",357],["'type' => 'error'",1189],["$error = 1;",525],[":- use_module(library(error)).",495],["Priority => 'error',",478],["my $error;",430],["error(",391],["sub error {",390],["if ($error) {",378],["($session, $error) = Net::SNMP->session(",311]],"useCount":40401},{"word":"errors","context":[["$errors++;",604],["# If there were whitespace errors which cleanpatch can fix",248],["my $errors = 0;",265],["--test-only=WORD           report only warnings/errors containing WORD",279],["--mailback                 only produce a report in case of warnings/errors",280],["print \"total: $cnt_error errors, $cnt_warn warnings, \" .",300],["my @errors;",267],["# Log SOAP XML request, response and API errors.",446],["$errors .= $ec->checkAllErrors($xpath);",171],["$errors = 1;",185]],"useCount":12416},{"word":"errstr","context":[["{ PrintError => 0}) || die $DBI::errstr;",571],["or die \"Couldn't prepare statement: \" . $dbh->errstr;",362],["$sthA->execute or die \"executing: $stmtA \", $dbhA->errstr;",326],["$sthA = $dbhA->prepare($stmtA) or die \"preparing: \",$dbhA->errstr;",283],["or die \"Couldn't execute statement: \" . $sth->errstr;",167],["or die $DBI::errstr;",141],["or fatal(sprintf(\"Couldn't execute query: %s\", $dbh->errstr));",133],["or die \"Couldn't connect to database: \" . DBI->errstr;",125],["or fatal(sprintf(\"Couldn't prepare query: %s\", $dbh->errstr));",119],["or die \"Couldn't prepare statement: \" . $db_conn->errstr;",113]],"useCount":7610},{"word":"esi","context":[["&mov\t(\"edx\",&DWP(12,\"esi\"));",78],["&mov\t(\"esi\",&wparam(1));",80],["&xor\t(\"ebx\",\"esi\");",84],["&push\t(\"esi\");",84],["&mov\t(\"ecx\",&DWP(24,\"esi\"));",86],["&scale\t(\"esi\",\"ecx\");",88],["&push(\"esi\");",107],["&movz\t(\"ebx\",&BP(-128,$tbl,\"esi\",1));",144],["&mov\t(\"ebx\",&DWP(4,\"esi\"));",118],["&mov\t(\"ecx\",&DWP(8,\"esi\"));",136]],"useCount":6569},{"word":"esp","context":[["if ($i<2)   {\t&mov\t(&DWP(4+4*$i,\"esp\"),$out);\t}",124],["&xorps\t($inout0,&QWP(16*0,\"esp\"));\t# output^=tweak",72],["&mov\t(&DWP(4,\"esp\"),$AH[1]);",80],["#&mov\t(&DWP(0,\"esp\"),$AH[0]);",80],["&mov\t(\"esp\",$_esp);\t\t\t# restore stack pointer",72],["&mov\t(\"edi\",&DWP(96+4,\"esp\"));\t# inp",70],["&mov\t(\"esp\",$_esp);",184],["#&mov\t(&DWP(16,\"esp\"),$E);",80],["&xorps\t($inout1,&QWP(16*1,\"esp\"));",96],["&and\t(\"esp\",-64);",102]],"useCount":13259},{"word":"etc","context":[["(! -e '/etc/debian_version' or",149],["my @config_files = ('/etc/devscripts.conf', '~/.devscripts');",94],["$path =~ s!^(.*)/[^/]+/.*$!$1/etc!;",105],["to shutdown etc.",119],["mtr_grab_file('/etc/debian_version')) !~ /^[0-9]+\\.[0-9]$/ or",119],["# Coverage, profiling etc",149],["# Need a space before open parenthesis after if, while etc",304],["# if/while/etc brace do not go on next line, unless defining a do while loop,",303],["#need space before brace following if, while, etc",303],["# check for redundant bracing round if etc",276]],"useCount":6956},{"word":"eval","context":[["eval { require \"$FindBin::Bin/../kohalib.pl\" };",306],["eval(shift(@insns));",14269],["eval(shift(@insns));\t\t# rol",546],["eval {",7694],["$code =~ s/\\`([^\\`]*)\\`/eval $1/gem;",351],["eval{",362],["eval(shift(@insns));\t\t# body_20_39",376],["eval",310],["eval(shift(@insns));\t\t# ror",440],["eval(shift(@insns));\t#@",336]],"useCount":39597},{"word":"even","context":[["# This file is for internal use by the Perl program only.  The format and even",4650],["# This file is for internal use by core Perl only.  The format and even the",5878],["# 5.1 test run, even if different MTR_BUILD_THREAD is used. This means",147],["verbose               More verbose output(use multiple times for even more)",119],["unit-tests            Run unit tests even if they would otherwise not be run",70],["# but its format and even its name or existence are subject to change without",63],["# End-block handler goes up here because it needs to operate even",62],["# We must handle commands which can cause skipping even while we",62],["# Disconnect, even though it isn't really necessary",46],["# instructions and achieve \"64-bit\" performance even in 31-bit legacy",41]],"useCount":13623},{"word":"example","context":[["$example=$model->Clone();",1055],["push(@$images,$example);",1034],["# Don't run the example if the file is being included.",449],["# Call the example",445],["'text' => 'example'",251],["# for example,",2259],["'cmdname' => 'example',",250],["@end example",326],["div.example {margin-left: 3.2em}",290],["@example",263]],"useCount":13576},{"word":"exe","context":[["unshift(@$$args, \"$$exe\");",296],["$$exe= \"xterm\";",303],["path          => $exe,",328],["$$exe= $exe_libtool;",334],["$$exe= $debugger;",296],["my $exe=  shift;",813],["# Indicate the exe should not be started",618],["$$exe= undef;",469],["return mtr_args2str($exe, @$args);",455],["valgrind_arguments($args, \\$exe);",447]],"useCount":16004},{"word":"executable","context":[["valgrind-mysqltest    Run the \"mysqltest\" and \"mysql_client_test\" executable",145],["config_err($file_line_num, \"$line - $value is not executable\");",53],["valgrind-mysqld       Run the \"mysqld\" executable with valgrind",145],["# Look for mysqltest executable",145],["# and gdb will not find the real executable to debug",149],["# Turn off localization of executable's output.",331],["library does not by itself cause the resulting executable to be covered",1583],["invalidate any other reasons why the executable file might be covered by",1583],["Added: svn:executable",104],["valgrind-path=<EXE>   Path to the valgrind executable",119]],"useCount":5720},{"word":"execute","context":[["$sth->execute();",4886],["$sth->execute;",2877],["mtr_add_arg($$args, \"--mode=execute\");",400],["execute (",334],["$sthA->execute or die \"executing: $stmtA \", $dbhA->errstr;",326],["$sql->execute();",248],["$sth->execute(",250],["$req->execute;",296],["$sth->execute () ;",307],["$sth2->execute;",306]],"useCount":27079},{"word":"exist","context":[["# Make sure the directory where it points exist",298],["mtr_error(\"The destination for symlink $opt_vardir does not exist\")",208],["print \"ERROR: Version $version of mysql-test-run does not exist!\\n\";",118],["# The test tool report didn't exist, display an",119],["# vardir does not already exist it should be created",149],["# --datadir must exist, mysqld will chdir into it",144],["to be created already exist the file will be written with a '.new' suffix.",122],["mtr_report(\"   process did not exist!\");",119],["# Check that lib exist",119],["# Install db from init_db.sql that exist in early 5.1 and 5.0",107]],"useCount":5744},{"word":"existence","context":[["#  the existence of /tmp/fines, which is created by ???",27],["# Assumes that the file's existence is not in doubt.",24],["# better way of doing this.  (We used to test for existence of a /mnt",20],["#\texistence:platform:kind:algorithms",29],["# - \"existence\" can be \"EXIST\" or \"NOEXIST\" depending on if the symbol is",29],["# will spring into existence if they aren't there already.)",33],["# flag indicating existence of at least one item linked via a host record",49],["# but its format and even its name or existence are subject to change without",63],["# the name or existence of this file are subject to change without notice.",3636],["# name or existence of this file are subject to change without notice.  Don't",6892]],"useCount":10854},{"word":"exists","context":[["#     printf $log_fh \"%d: File %s already exists\\n\", __LINE__, $outfnm if ( -e $outfnm);",510],["if ( ! exists($pdb->{$section}->{$machine}{$lane}{$stage}{state}))",330],["exists $lines[$realline_next - 1] &&",262],["printf $log_fh \"%d: File %s already exists\\n\", __LINE__, $outfnm if ( -e $outfnm);",234],["#---- if primkey exists, it's a modify action, so read values to modify...",196],["\"patch prefix '$p1_prefix' exists, appears to be a -p0 patch\\n\");",190],["# --client-bindir=path set on command line, check that the path exists",147],["mtr_verbose(\"No need to create '$opt_vardir' it already exists\");",146],["$exists = 1;",121],["mtr_verbose(\"Crash was expected, file '$expect_file' exists\");",119]],"useCount":21303},{"word":"exit","context":[["exit 0;",16542],["exit(-1);",1150],["exit $ERRORS{\"UNKNOWN\"};",1239],["exit;",25510],["exit 1;",14854],["exit(0);",11751],["exit(1);",10313],["exit();",2651],["exit -1;",874],["exit 2;",1493]],"useCount":116267},{"word":"ext","context":[["print $HTML_HEADER if ($ext eq \"html\");",37],["my $ext;",128],["$ext = \"\";",74],["$ext = $2;",69],["foreach my $ext (sort @extlist)",68],["#my $outFile_ge9 = File::Spec->catfile($outDir, join(\".\", @parts) . \"_ge9.\" . $ext);",217],["local($ext) = shift;",53],["foreach my $ext (sort {lc $a cmp lc $b } keys %Language_by_Extension) {",52],["my $ext = $1;",43],["use lib \"$FindBin::RealBin/../perl5\", \"$FindBin::RealBin/../perl5-ext\";",53]],"useCount":225613},{"word":"extra","context":[["# extra command line options to add to the restarted mysqld.",117],["'extra' => {",28962],["'extra' => {},",1252],["extra   => '',",903],["extra    => '',",192],["extra => '',",155],["'defaults-extra-file=s'    => \\&collect_option,",119],["# No extra options if --user-args",118],["defaults-extra-file=<config template> Extra config template to add to",115],["mtr_exe_exists(vs_config_dirs('extra', 'my_print_defaults'),",111]],"useCount":36595},{"word":"f","context":[["unlink($pidfile) if(-f $pidfile);",364],["( $xlate=\"${dir}../../perlasm/x86_64-xlate.pl\" and -f $xlate) or",383],["'index_prefix' => 'f',",382],["my $f = shift;",346],["if ($f) {",335],["if ($a  && ($f || $r || $t)) {die $usage};",306],["@from_fields = split(\",\", $f);",306],["\"from=s\" \t=> \\$f,",306],["( $xlate=\"${dir}x86_64-xlate.pl\" and -f $xlate ) or",397],["my $f;",1127]],"useCount":53779},{"word":"fail","context":[["file_errors(fail)",305],["# Unfortunately the cluster nodes will fail to start",129],["my $fail = 0;",143],["# When mysqld is run by a root user(euid is 0), it will fail",145],["$fail = 1;",151],["->  fail",184],["my $fail = run_tests ($program_name, $prog, \\@Tests, $save_temps, $verbose);",194],["exit $fail;",357],["fail",2970],["fail.",5152]],"useCount":15427},{"word":"failed","context":[["# failed to talk to it properly. Kill the server and return failure",304],["$failed = 1;",221],["logmsg \"RUN: $srvrname server failed verification\\n\";",276],["logmsg \"RUN: failed to start the $srvrname server\\n\";",277],["$failed++;",282],["die \"$P: $filename: diff failed - $!\\n\";",300],["die \"$P: $filename: open failed - $!\\n\";",301],["$kiwi -> failed ();",317],["my $failed = 0;",369],["#  1 Check failed",387]],"useCount":17094},{"word":"false","context":[["(defaults to false)",264],["if ($line =~ /\\bstatic\\s.*=\\s*(0|NULL|false)\\s*;/) {",193],["if ($line =~ /^.$Type\\s*$Ident\\s*(?:\\s+$Modifier)*\\s*=\\s*(0|NULL|false)\\s*;/) {",198],["false :- new1.",198],["# We need \\b after 'init' otherwise 'initconst' will cause a false positive in a check",258],["condition(false, [",151],["return false;",278],["false :-",306],[":- set_prolog_flag(generate_debug_info, false).",137],["If any of these errors are false positives, please report",143]],"useCount":7358},{"word":"fh","context":[["print $fh <<\"EOD\";",508],["my $fh;",929],["close $fh;",3555],["while (my $line = <$fh>) {",308],["my $fh = shift;",474],["while(<$fh>) {",423],["$fh->close();",375],["$fh->close;",309],["close($fh);",2246],["while (<$fh>) {",1920]],"useCount":23637},{"word":"field","context":[["foreach my $field (@fields) {",307],["for my $field (@$fields) {",311],["--from field-list",306],["push(@err, $field);",547],["is a tab-separated set of fields).  Normally, the last field in each",493],["would read in a file of ids and add a column for each field in the relationship.",306],["=item -from field-list",306],["=item -rel field-list",306],["if (!$all_fields{$field})",787],["--to field-list",306]],"useCount":25253},{"word":"fields","context":[["is a tab-separated set of fields).  Normally, the last field in each",493],["-a\t\t    Return all available fields.",400],["following fields are available:",612],["Choose a set of fields from the relationship to return. Field-list is a comma-separated list of",612],["strings. The following fields are available:",1078],["my @fields;",527],["--fields list   Choose a set of fields to return. List is a comma-separated list of strings.",320],["#Default fields",546],["The following fields are available:",320],["--show-fields",386]],"useCount":21826},{"word":"file","context":[["# This file is built by mktables from e.g. UnicodeData.txt.",2362],["# The format of the lines of this file is: START\\tSTOP\\twhere START is the",2478],["# This file is part of Koha.",6644],["# name or existence of this file are subject to change without notice.  Don't",6892],["# This file is for internal use by core Perl only.  The format and even the",5878],["# This file is machine-generated by lib/unicore/mktables from the Unicode",5126],["# This file is for internal use by the Perl program only.  The format and even",4650],["# This file is machine-generated by mktables from the Unicode",4479],["# the name or existence of this file are subject to change without notice.",3636],["my $file = shift;",2776]],"useCount":213145},{"word":"file_name","context":[["@{$pmpr} = sort { $a->{file_name} cmp $b->{file_name} } @{$pmpr};",188],["my $filename = $pu01->{file_name};",1391],["#     my $filename = $pu01->{file_name};",340],["my @parts = split('\\+-\\+', $file_name);",188],["my $filename = $pu03->{file_name};",284],["@{$pu01} = sort { $a->{file_name} cmp $b->{file_name} } @{$pu01};",188],["'file_name'     => $file_name,",194],["'file_name'     => $file_name,",194],["'file_name' => '',",14828],["my $file_name = $_;",202]],"useCount":22328},{"word":"filename","context":[["$vname = $filename;",300],["# extract the filename as it passes",300],["die \"$P: $filename: open failed - $!\\n\";",301],["if ($filename eq '-') {",310],["for my $filename (@ARGV) {",319],["#     my $filename = $pu01->{file_name};",340],["my ($filename) = @_;",447],["my $filename;",454],["my $filename = $pu01->{file_name};",1391],["my $filename = shift;",1474]],"useCount":31868},{"word":"files","context":[["my %files;",291],["print \"$P: no input files\\n\";",270],["my @files;",889],["foreach my $file (@files) {",994],["As a special exception, if you link this library with other files,",1585],["\"externs should be avoided in .c files\\n\" .  $herecurr);",374],["my @files = ();",331],["# check for new externs in .c files.",302],["# warn about #ifdefs in C files",298],["#\t\t\tprint \"#ifdef in C files should be avoided\\n\";",295]],"useCount":39811},{"word":"filter","context":[["# Show filter form",45],["sub filter {",76],["system(\"$rootdir/filter/$pool/gen-subset.pl $pool\");",46],["# instruction to jump over the profiling function to filter the",50],["if ($filter) {",51],["$cell{filter} .= @$filters[$i];",90],["my $filter;",52],["filter => $filter,",54],["filter => $filter,",54],["my $filter = shift;",58]],"useCount":6897},{"word":"filters","context":[["if (($i==1) and (@$filters[$i-1])) {",82],["my @filters = $input->param(\"Filter\");",79],["@$filters[0]=~ s/\\*/%/g if (@$filters[0]);",57],["@$filters[0]=~ s/\\*/%/g if (@$filters[0]);",57],["# format the dates filters, otherwise just fill as is",84],["$cell{filter} .= @$filters[$i];",90],["$cell{err} = 1 if (@$filters[$i]<@$filters[$i-1]) ;",95],["$cell{err} = 1 if (@$filters[$i]<@$filters[$i-1]) ;",95],["if ( @$filters[$i] ) {",120],["# Checking filters",143]],"useCount":7851},{"word":"final","context":[["# Should this contain memory leaks, the final report will find it",83],["# printf $log_fh \"\\nRECORD (final): %s\\n\", $record;",64],["# one local, one global.  After final compile, we will end up with",62],["# callers. After final linking, the vmlinux will have within .init.data the",51],["# compute the final address according to the information we record.",51],["# this point. So we can't use this kind of offsets to record the final",51],["B<?>I<pattern>B<?>    Search backwards for I<pattern>; final B<?> is optional.",44],["# Move to final dir",276],["# Yes, we must cut off the final newline from the final line",129],["# Yes, we must cut off the final newline from the final line",129]],"useCount":7076},{"word":"find","context":[["# to try and find and validate the current printk.  In summary the current",285],["\"Could not find the lib/ directory \\n\";",119],["mtr_error(\"Couldn't find support for SSL\");",147],["# In most cases, the base directory we find everything relative to,",149],["# and gdb will not find the real executable to debug",149],["Attempts to find a suitable location",149],["find(\\&want_one_type, @{$pargv});",282],["mtr_error(\"Could not find version of MySQL\") unless $mysql_version_id;",227],["# find Koha's Perl modules",442],["or warn \"$P: Can't find a readable $configuration_file file $!\\n\";",193]],"useCount":12232},{"word":"finish","context":[["mtr_print(\"Server(s) started, not waiting for them to finish\");",118],["out((($finish - $start)/60).\" minutes have elapsed\");",149],["my $finish = time;",184],["$pm->finish;",193],["$sth2->finish;",253],["$sthA->finish();",303],["$sth->finish;",3084],["$sth->finish();",2386],["$sth->finish () ;",307],["$cmd->finish();",339]],"useCount":9987},{"word":"first","context":[["# Grab the first conditional/block pair.",299],["if ($first) {",215],["$first = 1;",237],["# at the beginning of a line any tabs must come first and anything",278],["# we assume the first bad printk is the one to report.",284],["# none on the first line, and are going to readd them",296],["# We want to check the first line inside the block",296],["# first statement and ensure its the whole macro if its not enclosed",299],["my $first = 1;",517],["$first = 0;",767]],"useCount":17009},{"word":"fix","context":[["my $fix = 0;",108],["$fix) {",5792],["$fix && $prevline =~ /^\\+/ && $line =~ /^\\+/) {",292],["# If there were whitespace errors which cleanpatch can fix",248],["veor\t@XMM[7], @XMM[7], @XMM[6]\t@ fix up round 0 key",130],["$spelling_fix{$suspect} = $fix;",119],["# fix up item type for display",112],["# Send out a warning, we should fix the variables that has no",111],["Wrote EXPERIMENTAL --fix correction(s) to '$newfile'",103],["$fix && $line =~ /^\\+/) {",103]],"useCount":11071},{"word":"fixed","context":[["@fixed = ();",104],["# or should it be fixed width column parsing? It does not",111],["defaults-file=<config template> Use fixed config template for all",119],["$fixed[$fixlinenr] =~ s/^\\+([ \\t]+)/\"\\+\" . tabify($1)/e;",142],["sleep=SECONDS         Passed to mysqltest, will be used as fixed sleep time",145],["while ($fixed[$fixlinenr] =~",146],["$fixed[$fixlinenr] =~ s/\\s+$//;",146],["$fixed[$fixlinenr] =~",1382],["$fixed[$linenr - 1] =~",549],["$fixed[$fixlinenr] =",219]],"useCount":8252},{"word":"fixlinenr","context":[["$fixed[$fixlinenr] =~ s/^\\+([ \\t]+)/\"\\+\" . tabify($1)/e;",142],["fix_delete_line($fixlinenr - 1, $prevrawline);",448],["fix_delete_line($fixlinenr, $rawline);",553],["fix_insert_line($fixlinenr, $fixedline);",573],["$fixed[$fixlinenr] =~",1382],["$fixed[$fixlinenr] =~ s/\\s+$//;",146],["$fixed[$fixlinenr] =",219],["while ($fixed[$fixlinenr] =~",146],["fix_insert_line($fixlinenr, \"\\+\");",146],["$fixlinenr = -1;",146]],"useCount":6651},{"word":"flag","context":[["$flag = 1;",629],["my $flag = 0;",460],["$flag = 0;",301],["$flag=1;",186],["\"Use of $flag is deprecated, please use \\`$replacement->{$flag} instead.\\n\" . $herecurr) if ($replacement->{$flag});",167],["\"Use of $flag is deprecated, please use \\`$replacement->{$flag} instead.\\n\" . $herecurr) if ($replacement->{$flag});",167],["# Record flag",149],["# Gcov flag",149],["\"Use of $flag is deprecated, please use \\`$replacement->{$flag} instead.\\n\" . $herecurr) if ($replacement->{$flag});",167],["my $flag = $1;",171]],"useCount":10710},{"word":"flags","context":[["=head2 Required flags",116],["$flags)",139],["### args/flags",143],["my $flags = \"\";",368],["# suppression flags",299],["$flags .= \"--id $idnum \" if($idnum > 1);",222],["$flags .= \"--pidfile \\\"$pidfile\\\" --logfile \\\"$logfile\\\" \";",207],["$flags .= \"--verbose \" if($debugprotocol);",155],["# force flags for this arch",187],["my $flags;",191]],"useCount":12596},{"word":"flagsrequired","context":[["flagsrequired   => { catalogue => 1 },",675],["flagsrequired => {parameters => 'parameters_remaining_permissions'},",147],["flagsrequired => {parameters => 1},",144],["flagsrequired   => { borrow => 1 },",415],["flagsrequired => {borrowers => 1},",179],["flagsrequired   => { acquisition => 'order_manage' },",198],["flagsrequired   => { editcatalogue => '*' },",232],["flagsrequired => {  ui => 'ANY',",262],["flagsrequired   => { circulate => \"circulate_remaining_permissions\" },",272],["flagsrequired => {editcatalogue => '*'},",362]],"useCount":6185},{"word":"fn","context":[["# check for needless \"if (<foo>) fn(<foo>)\" uses",132],["open($of,\">\",$fn) or die \"can't open $fn\";",131],["'text' => 'Entry for index `fn\\' outside of any node',",121],["'text' => 'entry for index `fn\\' outside of any node',",122],["open($of,\">\",$fn) or die \"can't open $fn\";",131],["my ($fn) = @_;",128],["$fn = $1;",100],["my $fn;",152],["my $fn = shift;",249],["'index_name' => 'fn',",382]],"useCount":6456},{"word":"following","context":[["# any of the following regular expression constructs:",1459],["# match any of the following regular expression constructs:",313],["#need space before brace following if, while, etc",303],["# closing brace should have a space following it when it has anything",303],["return. Field-list is a comma-separated list of strings. The following fields are available:",306],["The following fields are available:",320],["# furnished to do so, subject to the following conditions:",325],["# matches any of the following regular expression constructs:",405],["following fields are available:",612],["strings. The following fields are available:",1078]],"useCount":12061},{"word":"font","context":[["pre.menu-preformatted {font-family: serif}",290],["div.smallindentedblock {margin-left: 3.2em; font-size: smaller}",167],["span.roman {font-family:serif; font-weight:normal}",290],["pre.smalllisp {font-size: smaller}",290],["pre.menu-comment {font-family: serif}",290],["span.sansserif {font-family:sans-serif; font-weight:normal}",290],["blockquote.smallquotation {font-size: smaller}",290],["pre.smallexample {font-size: smaller}",290],["span.sansserif {font-family:sans-serif; font-weight:normal}",290],["span.roman {font-family:serif; font-weight:normal}",290]],"useCount":28142},{"word":"foo","context":[["# check for static char foo[] = \"bar\" declarations.",225],["# Ignore email addresses <foo@bar>",302],["# int foo(something bar, other baz);",300],["# any (foo ... *) is a pointer cast, and foo is a type",300],["# any (foo ... *) is a pointer cast, and foo is a type",300],["#warn if <asm/foo.h> is #included and <linux/foo.h> is available (uses RAW line)",235],["\"EXPORT_SYMBOL(foo); should immediately follow its function/variable\\n\" . $herecurr);",184],["#   XXX(foo);",232],["#warn if <asm/foo.h> is #included and <linux/foo.h> is available (uses RAW line)",235],["$dstat !~ /^\\.$Ident\\s*=/ &&\t\t\t\t# .foo =",166]],"useCount":10872},{"word":"for","context":[["for (my $n = 0; $n < $cnt; $n++) {",872],["# This file is for internal use by the Perl program only.  The format and even",4650],["for (;;) {",1477],["# A colon can be substituted for the equals sign, and anything to the left of",2251],["# for example,",2259],["# perluniprops.pod should be consulted for the syntax rules for any of these,",2468],["for (@column_index) { print \"\\n$column_data{$_}\" }",800],["# for more details.",707],["# perluniprops.pod should be consulted for the syntax rules for any of these,",2468],["# This file is for internal use by core Perl only.  The format and even the",5878]],"useCount":248210},{"word":"foreach","context":[["foreach my $product (sort keys %{$totals{by_product}})",618],["foreach my $mysqld ( mysqlds() )",918],["foreach my $file (@files) {",994],["foreach my $col (@{$pcols})",923],["foreach my $col (@feeder_count_cols)",1315],["foreach my $col (@nozzle_count_cols)",1375],["foreach my $line (@lines) {",1573],["foreach my $target (@target) {",526],["foreach (@ARGV) {",501],["foreach my $prow (@{$pu01->{$section}->{data}})",522]],"useCount":117108},{"word":"form","context":[["require \"$form->{path}/menu.pl\";",406],["my $form = getCurrentForm();",385],["if ($form->{menubar}) {",390],["</form>",2315],["my $form     = $main::form;",676],["$form->header;",1358],["my $form     = $main::form;",676],["<form method=post action=$form->{script}>",934],["<form method=post action=$form->{script}>",934],["<th class=listtop>$form->{title}</th>",547]],"useCount":114903},{"word":"format","context":[["# The format of the lines of this file is: START\\tSTOP\\twhere START is the",2478],["{ name => 'Pickup', format => ',%s' },",419],["# This file is for internal use by the Perl program only.  The format and even",4650],["printf $outfh $pcol->{format}, $pcol->{name};",646],["{ name => 'HMiss', format => ',%s' },",419],["{ name => 'RMiss', format => ',%s' },",419],["{ name => 'Stage', format => ',%s' },",419],["{ name => 'PMiss', format => ',%s' },",419],["{ name => 'Mount', format => ',%s' }",419],["# This file is for internal use by core Perl only.  The format and even the",5878]],"useCount":47762},{"word":"found","context":[["if (!$found) {",284],["# UTF-8 regex found at http://www.w3.org/International/questions/qa-forms-utf-8.en.php",302],["my $found;",331],["::logMsg($key_path.\" not found.\");",181],["return $found;",183],["$found++;",266],["$found = 0;",380],["::rptMsg($key_path.\" not found.\");",588],["my $found = 0;",1034],["$found = 1;",1358]],"useCount":22541},{"word":"frame","context":[["local $frame = 0;",168],["# EXCEPTION_DISPOSITION handler (EXCEPTION_RECORD *rec,ULONG64 frame,",335],["$frame=\"%rdx\";",308],["$R->run(q` data = data.frame() `);",220],["$R->run(q` pre = data.frame(Time) `);",123],["# note that caller is expected to allocate stack frame for me!",116],[".frame\t$sp,6*$SZREG,$ra",110],["print( $frame? \"</td></tr>\\n\" : \" &nbsp; \" );",104],["and\t\\$-64,%rsp\t\t# align stack frame",88],["# stack frame layout",80]],"useCount":7199},{"word":"from","context":[["# This file is machine-generated by lib/unicore/mktables from the Unicode",5126],["Select the identifier from column num",612],["Choose a set of fields from the relationship to return. Field-list is a comma-separated list of",612],["This is a pipe command. The input is taken from the standard input, and the",493],["# the main body of the table, and what all code points missing from this file",413],["# This file is machine-generated by mktables from the Unicode",4479],["# Get AdWords Client, credentials will be read from ~/adwords.properties.",448],["where N is the column (from 1) that contains the id.",386],["# This file is built by ./mktables from e.g. UnicodeData.txt.",319],["# This file is built by mktables from e.g. UnicodeData.txt.",2362]],"useCount":70759},{"word":"fs","context":[["\"fs\", \"init\", \"ipc\", \"kernel\", \"lib\", \"scripts\",",248],["$fs = $fs + 4 ;",2599],["if ( -d $fs )",149],["foreach my $fs (@tmpfs_locations)",149],["$fs = $fs + 16 ;",120],["$fs = $fs + 16 ;",120],["$opt_mem= tempdir( $template, DIR => $fs, CLEANUP => 0);",119],["$fs = $fs + 8 ;",83],["$fs = $fs + 4 ;",2599],["$fs = $fs + 8 ;",83]],"useCount":7111},{"word":"func","context":[["my $func = shift;",94],["if ($line =~ /\\b$func\\b/) {",150],["func => sub {",115],["for my $func (@dep_functions) {",143],[".globl\t$func",95],["ERROR(\"Don't use $func(): see Documentation/feature-removal-schedule.txt\\n\" . $herecurr);",98],["$func:",98],["use func;",100],["\"func\",\"SUCCESS\",",87],["$func .= \"\\n\";",89]],"useCount":7432},{"word":"function","context":[["plugin_parameters : other parameters added when the plugin is called by the dopop function",456],["'function' => \\&server_conf_files,",324],["# Check for any sort of function declaration.",300],["# function brace can't be on same line, except for #defines of do while,",302],["'function' => \\&generic_exec,",384],["function Focus$function_name(subfield_managed) {",516],["'function' => \\&client_rc_file,",413],["'function' => \\&spa_cycle,",436],["function Clic$function_name(i) {",505],["function Blur$function_name(subfield_managed) {",501]],"useCount":24640},{"word":"functions","context":[["## \t\t\t# falsly report the parameters of functions.",278],["# Ignore functions being called",299],["# check for spaces between functions and their parentheses.",301],["# don't use deprecated functions",150],["# functions",136],["# Note as optimized versions of these functions are added we need to add a check to ensure",106],["# fdct functions",96],["# libraries through functions",203],["# high-level u01 file audit functions",84],["# in shared libraries through functions",203]],"useCount":7902},{"word":"g","context":[["$s =~ s/\\n.*//g;",595],["$s =~ s/$;//g; \t# Remove any comments",582],["$name =~ s/^\\\"|\\\"$//g;",697],["s/\\r|\\n//g;",727],["my @stmt_lines = ($stmt =~ /\\n/g);",897],["s/\\r//g;",542],["$dstat =~ s/\\\\\\n.//g;",431],["$name =~ s/^\\s+|\\s+$//g;",396],["# This file is built by mktables from e.g. UnicodeData.txt.",2362],["$stmt =~ s/(^|\\n)./$1/g;",598]],"useCount":66583},{"word":"gd","context":[["\"ext/gd/tests/gif2jpg.phpt\",",23],["\"ext/gd/tests/bug37360.phpt\",",23],["\"ext/gd/tests/imagegammacorrect_basic.phpt\",",23],["\"ext/gd/tests/imagecharup_error6.phpt\",",23],["\"ext/gd/tests/imagefilter_error9.phpt\",",23],["\"ext/gd/tests/imagefilter_error17.phpt\",",23],["\"ext/gd/tests/libgd00186.phpt\",",23],["\"ext/gd/tests/imagedashedline_basic.phpt\",",23],["\"ext/gd/tests/imagewbmp.phpt\",",23],["\"ext/gd/tests/imagefilter_error13.phpt\",",23]],"useCount":5788},{"word":"generated","context":[["# This file is machine-generated by lib/unicore/mktables from the Unicode",5126],["# This file is machine-generated by mktables from the Unicode",4479],["# Remove the .err file the check generated",274],["# Remove the .result file the check generated",238],["vardir=DIR            The directory where files generated from the test run",149],["# Extra config file to append to all generated configs",119],["my $path_config_file;           # The generated config file, var/my.cnf",119],["all generated configs",119],["# This is an automatically generated prolog.",82],["print \"<!-- This file was generated by credits.pl. Do not edit by hand! -->\\n\";",68]],"useCount":14843},{"word":"get","context":[["sub get {",192],["or mtr_error(\"Could not get [embedded] section\");",238],["for (0..$#$producers) { #get rates for all producing reactions",161],["sub get_no2_reservoirs { #get species that are produced when radical species react with NO2",178],["if (which($net_effect < 0)->nelem > 0) { #which gets indices of non-0 values, nelem get nr of elements",190],["# get the process ID",191],["# get the interactor ui",236],["my $name=ProgramName::get();",228],["get(M, text_buffer, TB),",226],["# get options",479]],"useCount":23597},{"word":"get_template_and_user","context":[["( $template, $borrowernumber, $cookie ) = get_template_and_user(",113],["my ( $template, $loggedinuser, $cookie ) = get_template_and_user(",1858],["my ( $template, $borrowernumber, $cookie ) = get_template_and_user(",802],["( $template, $loggedinuser, $cookie ) = get_template_and_user(",325],["my ($template, $session, $t_params) = get_template_and_user({",224],["use C4::Auth qw(get_template_and_user);",197],["my ($template, $loggedinuser, $cookie) = get_template_and_user({",189],["my ( $template, $borrowernumber, $cookie ) = get_template_and_user (",164],["my ($template, $loggedinuser, $cookie) = get_template_and_user(",137],["my ( $template, $loggedinuser, $cookie ) = get_template_and_user({",125]],"useCount":6140},{"word":"git","context":[["my $git_last_include_commit = `git log --no-merges --pretty=format:\"%h%n\" -1 -- include`;",100],["return ($id, $desc) if ((which(\"git\") eq \"\") || !(-e \".git\"));",71],["return ($id, $desc) if ((which(\"git\") eq \"\") || !(-e \".git\"));",71],["if ($line =~ /^diff --git.*?(\\S+)$/) {",253],["if (-e \".git\") {",178],["$camelcase_cache = \".checkpatch-camelcase.git.$git_last_include_commit\";",99],["$files = `git ls-files \"include/*.h\"`;",99],["file.  It's your fault if there's no backup or git",93],["\"git log --no-color \" .",88],["my $output = `git log --no-color --format='%H %s' -1 $commit 2>&1`;",71]],"useCount":8591},{"word":"given","context":[["# One day for PID file creation (this is given in seconds not minutes)",119],["# If @ platform specifier given, use this entry only if it contains",119],["# If --wait-all is also given, do the same, but don't die if one",119],["# If --start or --start-dirty given, stop here to let user manually",119],["# need to be given to the bootstrap process as well as the",129],["pod2usage(\"$0: No files given.\") if ((@ARGV == 0) && (-t STDIN));",173],["Limit the results to entities where the given field has the given value.",160],["Limit the results to entities where the given field has the given value.",160],["Limit the results to entities where the given field is LIKE (in the sql sense) the given value.",160],["Limit the results to entities where the given field is LIKE (in the sql sense) the given value.",160]],"useCount":8054},{"word":"grep","context":[["grep /^${re_section}\\s*$/ .. /^\\s*$/, @{$pdata->{data}};",181],["next if ( grep( /^$/, $_ ) );",246],["if ( grep($proc eq $_, started(all_servers())) )",238],["$common_processes{$_} = 1 for (grep { defined $production->{$_} } keys %$consumption) ;",190],["grep {",179],["grep(!/^$/,",145],["sub started { return grep(defined $_, map($_->{proc}, @_));  }",119],["sub stopped { return grep(!defined $_, map($_->{proc}, @_)); }",119],["if ($srvproc && grep($srvproc eq $_, started(all_servers()))) {",119],["if (!grep(/$name/, @setup_docs)) {",278]],"useCount":12041},{"word":"group","context":[["my $mysqld= $config->group('mysqld.1')",118],["mtr_add_arg($args, \"--defaults-group-suffix=%s\", $mysqld->after('mysqld'));",590],["mtr_add_arg($args, \"--defaults-group-suffix=%s\", $cluster->suffix());",356],["# parenthesis it is simply not a parameter group.",298],["mtr_add_arg($args, \"--defaults-group-suffix=%s\", $group_suffix);",248],["my $mysqld=  $config->group('embedded')",236],["# A colon can be substituted for the equals sign, and within each group",150],["# group below.  It could be that the tables will match the same set of code",145],["my $group;",140],["$ENV{'MYSQLD_CMD'}= \"$exe_mysqld --defaults-group-suffix=.1 \".",108]],"useCount":10693},{"word":"h","context":[["for my $result (@$h) {",307],["my @h = map { $_->[0] } @tuples;",452],["header => 'libgimpbase/gimpbaseenums.h',",348],["\"h\"\t   \t=> \\$help,",306],["print TESTFILE \"#include <$h>\\n\";",292],["'h|help'\t=> \\$help,",283],["-h, --help, --version      display this help and exit",280],["if ($tree && $rawline =~ m{^.\\s*\\#\\s*include\\s*\\<asm\\/(.*)\\.h\\>}) {",279],["if ($realfile !~ m@/vmlinux.lds.h$@ &&",290],["if ( $Opts{h} ) {",287]],"useCount":39484},{"word":"handle","context":[["# Solaris /usr/ccs/bin/as can't handle multiplications",62],["close $handle;",71],["# destroying the kid's database handle",72],["#make up the handle for any error we report on this line",303],["# handle variables",62],["$row = $driver->next(-handle => $sth);",156],["# Helper function to handle configuration-based subdirectories which Visual",147],["my $handle;",129],["-f --fork            handle each request in a new process",114],["close($handle);",87]],"useCount":7906},{"word":"has","context":[["if ($name =~ /[^\\w \\-]/i) { ##has \"must quote\" chars",388],["# check if the ref image has this relation with this family already",265],["print \"$vname has no obvious style problems and is ready for submission.\\n\"",253],["# memory.h: ARM has a custom one",243],["# closing brace should have a space following it when it has anything",303],["# It's not mysqltest that has exited, kill it",236],["::rptMsg($key_path.\" has no subkeys.\");",165],["# If this statement has no statement boundaries within",173],["# omitted, the range has just one code point.  Numbers in comments in",2478],["print \"$filepath has been updated.\\n\";",253]],"useCount":18875},{"word":"hash","context":[["if($hash{'nonewline'}) {",129],["return $hash;",160],["my %hash = ();",176],["my $hash;",138],["my ($global_var_href) = @_;                            # get reference to global vars hash",135],["for (keys %$hash) {",126],["my %hash;",897],["# Put variables into hash",266],["return \\%hash;",126],["my $hash= shift;",126]],"useCount":14943},{"word":"have","context":[["# We have looked at and allowed this specific line.",298],["# '*'s should not have spaces between.",584],["# closing brace should have a space following it when it has anything",303],["# ; should have either the end of line or a space or \\ after it",303],["# if and else should not have general statements after it",303],["# unary operators should have a space before and",300],["# Make sure we remove the line prefixes as we have",296],["# If we have no input at all, then there is nothing to report on",299],["# cpp #define statements have non-optional spaces, ie",298],["# case and default should not have general statements after them",294]],"useCount":22589},{"word":"head","context":[["</head>",1644],["print \"<head>\\n\";",89],["my $head = <IN>;",89],["print '</head>';",94],["print \"</head>\\n\";",82],["chomp $head;",79],["print \"=head1 $head\\n\\n\";",62],["print '<head>';",95],["=head",370],["<head>",1629]],"useCount":6583},{"word":"head1","context":[["=head1 NAME",10375],["=head1 USAGE",1013],["=head1 CONTACT",902],["=head1 DESCRIPTION",9185],["=head1 SYNOPSIS",8183],["=head1 AUTHOR",3942],["=head1 EXAMPLES",1047],["=head1 SEE ALSO",1549],["=head1 OPTIONS",3597],["=head1 AUTHORS",1895]],"useCount":54712},{"word":"head2","context":[["=head2",298],["=head2 Required Arguments",118],["=head2 Related entities",240],["=head2 For more information:",176],["=head2 Command-Line Options",167],["=head2 plugin_parameters",158],["=head2 Usage",138],["=head2 Output Format",95],["=head2 Optional flags",110],["=head2 Required flags",116]],"useCount":8820},{"word":"header","context":[["# (not a header line and we haven't seen the patch filename)",176],["$form->header;",1358],["<div class=\"header\">",492],["header => 'libgimpbase/gimpbaseenums.h',",348],["my $header;",301],["print $input->header(",232],["print $query->header(",200],["my $header = 1;",195],["# the header of the table",160],["$header = 0;",187]],"useCount":16543},{"word":"help","context":[["help();",376],["my $help;",1688],["if ($help) {",1398],["my $help = 0;",1198],["sub help {",957],["=item B<--help>",799],["pod2usage(1) if $help;",635],["Print a brief help message and exits.",484],["=item B<-help>",403],["=item --help",320]],"useCount":43438},{"word":"here","context":[["# Any changes made here will be lost!",2921],["my $herevet = \"$here\\n\" . cat_vet($rawline) . \"\\n\";",1470],["# database, Version 5.2.0.  Any changes made here will be lost!",1670],["# database, Version 6.2.0.  Any changes made here will be lost!",1762],["# database, Version 6.0.0.  Any changes made here will be lost!",1994],["\"$here\\n$ctx\\n$rawlines[$ctx_ln - 1]\\n\");",498],["# database, Version 6.1.0.  Any changes made here will be lost!",2613],["my $herectx = $here . \"\\n\";",1071],["my $herevet = \"$here\\n\" . cat_vet($line) . \"\\n\";",1059],["# database, Version 6.3.0.  Any changes made here will be lost!",1161]],"useCount":28460},{"word":"herecurr","context":[["check_absolute_file($1, $herecurr)) {",280],["$herecurr);",2447],["\"trailing statements should be on next line\\n\" . $herecurr);",386],["\"externs should be avoided in .c files\\n\" .  $herecurr);",374],["$herecurr) if (!$emitted_corrupt++);",300],["#\t\t\tprint \"$herecurr\";",300],["my $herecurr = \"$here\\n$rawline\\n\";",299],["check_absolute_file($file, $herecurr);",280],["my ($absolute, $herecurr) = @_;",280],["# \t\t\tprint \"$herecurr\";",236]],"useCount":33362},{"word":"hex","context":[["# starting code point of the range, in hex; STOP is the ending point, or if",2478],["print FILE pack (\"C\", hex ($5)) ;",150],["print FILE pack (\"C\", hex ($7)) ;",150],["print FILE pack (\"C\", hex ($2)) ;",150],["print FILE pack (\"C\", hex ($3)) ;",150],["print FILE pack (\"L\", hex (\"0\")) ;",923],["$code = hex($c);",194],["print FILE pack (\"C\", hex ($4)) ;",150],["print FILE pack (\"C\", hex ($8)) ;",150],["print FILE pack (\"C\", hex ($6)) ;",150]],"useCount":10612},{"word":"holdsAt","context":[["holdsAt( appearance( id0 )=visible,  1320 ).",23],["holdsAt( appearance( id0 )=visible,  400 ).",24],["holdsAt( appearance( id0 )=visible,  960 ).",23],["holdsAt( appearance( id0 )=visible,  840 ).",24],["holdsAt( appearance( id0 )=visible,  680 ).",23],["holdsAt( appearance( id0 )=visible,  880 ).",24],["holdsAt( appearance( id0 )=visible,  720 ).",24],["holdsAt( appearance( id0 )=visible,  1040 ).",25],["holdsAt(close(Person, Person2, Dist) = false, T).",36],["holdsAt( appearance( id0 )=visible,  760 ).",24]],"useCount":14617},{"word":"host","context":[["mtr_add_arg($args, \"--host=%s\", $mysqld->value('#host'));",118],["host          => undef,",119],["a build thread id that is unique to current host",119],["$host = $1;",105],["# To make it easier for different devs to work on the same host,",149],["my $host = shift;",164],["my $host;",220],["mtr_add_arg($args, \"--host=%s\", $mysqld->value('#host'));",118],["-h --host            host (defaults to all)",114],["-h --host            host (defaults to all)",114]],"useCount":12333},{"word":"href","context":[["<link href=\"#Top\" rel=\"start\" title=\"Top\">",174],["# escape callback for href",149],[". p(a({-href=>\"javascript:back()\"}, \"go back and try again\"));",193],[". p(a({-href=>\"javascript:back()\"}, \"please go back and check your selection\"));",60],["# add column to href and callback",102],["print qq|If you are not redirected automatically, click <a href=\"$url\">|",58],["print '<link href=\"xampp.css\" rel=\"stylesheet\" type=\"text/css\">';",89],["$result = \"<a href=\\\"$url\\\"\";",86],["print \"<a href=\\\"\"",76],["* one called when the ... link is clicked (<a href=\"javascript:function\">) named ClicXXX",69]],"useCount":6747},{"word":"html","context":[["my $html;",228],["<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">",321],["Content-type: text/html",252],["<!DOCTYPE html>",195],["$ref_files{$key} = \"$dir\".q|condor_submit.html|;",183],["$external_labels{$key} = \"$URL/\" . q|condor_submit.html|;",183],["return $html;",619],["print \"Content-type: text/html\\n\\n\";",834],["<html>",1401],["</html>",2684]],"useCount":19439},{"word":"http","context":[["<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">",321],[":- use_module(library(http/html_write)).",182],["#     Web: http://www.sql-ledger.org",207],["WWW:           http://www.swi-prolog.org",1432],["# details see http://www.openssl.org/~appro/cryptogams/.",1012],["WWW:           http://www.swi.psy.uva.nl/projects/xpce/",688],["L<The SEED Project|http://www.theseed.org>",662],["developers list at <http://lists.ensembl.org/mailman/listinfo/dev>.",512],["# and COPYING for more information, or see http://slashcode.com/.",374],["# UTF-8 regex found at http://www.w3.org/International/questions/qa-forms-utf-8.en.php",302]],"useCount":23560},{"word":"i","context":[["$i++;",8458],["my $i = 0;",4002],["my $i;",2939],["$i = 0;",1674],["if($text=~/Hail/i){",806],["my $i=0;",1407],["$i=0;",1042],["my $i = 1;",701],["++$i;",614],["$i = 1;",566]],"useCount":220514},{"word":"id","context":[["id",657],["=item id",634],["my $id = $1;",309],["return $id;",316],["$id = $1;",318],["where N is the column (from 1) that contains the id.",386],["line would contain the id. If some other column contains the id,",386],["line would contain the id. If some other column contains the id,",386],["my $id = shift;",595],["my $id;",542]],"useCount":55701},{"word":"id1","context":[["holdsAt( appearance( id1 )=visible,  8040 ).",22],["holdsAt( appearance( id1 )=visible,  8240 ).",21],["holdsAt( appearance( id1 )=visible,  7600 ).",21],["holdsAt( appearance( id1 )=visible,  7360 ).",21],["holdsAt( appearance( id1 )=visible,  10080 ).",21],["holdsAt( appearance( id1 )=visible,  8880 ).",21],["holdsAt( appearance( id1 )=visible,  7880 ).",21],["holdsAt( appearance( id1 )=visible,  7400 ).",21],["holdsAt( appearance( id1 )=visible,  7760 ).",21],["holdsAt( appearance( id1 )=visible,  6920 ).",20]],"useCount":7260},{"word":"idx","context":[["$idx++;",325],["if ($idx) {",82],["my $idx = 0;",278],["addi\t\t$idx,$idx,16",246],["$idx = 1;",90],["lvx\t\t$rndkey1,$idx,$key",90],["$idx = $subdir{$dep}.$dep;",125],["my $idx;",107],["my $idx = ($upsample) ? (($channels - $i) - 1) : $i;",98],["addi\t\t$idx,$idx,16",246]],"useCount":9809},{"word":"if","context":[["if (",2128],["if (ERROR(\"SPACING\",",1920],["if ($^V && $^V ge 5.10.0 &&",2030],["# starting code point of the range, in hex; STOP is the ending point, or if",2478],["# including if adding or subtracting white space, underscore, and hyphen",2480],["if ( C4::Context->preference(\"Version\") < TransformToNum($DBversion) ) {",2830],["if ($verbose >= MAXVERBOSE);",3593],["if ($@) {",3876],["if ( CheckVersion($DBversion) ) {",4790],["if (C4::Context->preference(\"Version\") < TransformToNum($DBversion)) {",11887]],"useCount":912373},{"word":"ignore","context":[["# ignore non-hunk lines and lines being removed",294],["# ignore definitions of NR_CPUS and usage to define arrays as likely right",280],["# with \"\\n\" ignore it, else it is to blame",284],["# check we are in a valid source file C or perl if not then ignore this hunk",284],["# check we are in a valid C source file if not then ignore this hunk",293],["# check we are in a valid source file if not then ignore this hunk",303],["#ignore lines not being added",303],["# ignore udelay's < 10, however",237],["# A \\ in a string means ignore the next character.",299],["# Also ignore a loop construct at the end of a",296]],"useCount":10015},{"word":"image","context":[["image\t=> 1,",63],["'cmdname' => 'image',",253],["print (\"image format: $imageFormat\\n\");",70],["my $image;",74],["if ($image) {",79],["undef $image;",106],["$image=Image::Magick->new;",130],["$signature=$image->Get('signature');",60],["# check if the ref image has this relation with this family already",265],["# render the image",266]],"useCount":6873},{"word":"in","context":[["# starting code point of the range, in hex; STOP is the ending point, or if",2478],["# [brackets] indicate how many code points are in the range.",2478],["# omitted, the range has just one code point.  Numbers in comments in",2478],["in(o1,o2).",486],["is a tab-separated set of fields).  Normally, the last field in each",493],["Redistribution and use in source and binary forms, with or without",745],["# omitted, the range has just one code point.  Numbers in comments in",2478],["# Circulation and User's Management. It's written in Perl, and uses Apache2",754],["# Redistribution and use in source and binary forms, with or without",921],["close $in;",1071]],"useCount":158864},{"word":"include","context":[["if (!($line=~/\\#\\s*include/)) {",303],["next if ($rate->sum == 0); # do not include reactions that do not occur",349],["# check for malformed paths in #include statements (uses RAW line)",303],["if ($line =~ m@^.\\s*\\#\\s*if.*\\b(__i386__|__powerpc64__|__sun__|__s390x__)\\b@ && $realfile !~ m@include/asm-@) {",279],["if ($res =~ /^.\\s*\\#\\s*include\\s+\\<(.*)\\>/) {",297],["} elsif ($cur =~ /^(\\#\\s*(?:undef\\s*$Ident|include\\b))/o) {",297],["print TESTFILE \"#include <$h>\\n\";",292],["--summary-file             include the filename in summary",280],["if ($rawline =~ m{^.\\s*\\#\\s*include\\s+[<\"](.*)[\">]}) {",297],["if ($tree && $rawline =~ m{^.\\s*\\#\\s*include\\s*\\<asm\\/(.*)\\.h\\>}) {",279]],"useCount":18195},{"word":"indent","context":[["# Pick the indent from the front of the line.",303],["# statements should be at the same indent.",303],["($previndent, $stashindent) = ($stashindent, $indent);",303],["# Measure the line length and indent.",303],["# indent level to be relevant to each other.",303],["($length, $indent) = line_stats($rawline);",299],["my $indent;",318],["#   cperl-indent-level: 4",362],["$previndent == $indent) {",598],["if ($nindent > $indent) {",300]],"useCount":9267},{"word":"index","context":[["my $index;",325],["$template->param(index => $index,",409],["my ($index) = @_;",362],["$template->param(index => $index,",409],["my $index= $input->param('index');",439],["my $index=0;",234],["return $index;",213],["$index++;",903],["my $index = 0;",642],["my $index= $input->param('index');",439]],"useCount":24163},{"word":"infile","context":[["open IN, \"zcat $infile |\" or die (\"Could not open $infile for reading\");",71],["my $infile = $ARGV[0];",69],["open IN, \"zcat $infile |\" or die (\"Could not open $infile for reading\");",71],["if($infile =~ /gz$/) {",72],["=item -i,--infile",74],["open(IN,'<',$infile) or die (\"Could not open $infile for reading\");",100],["open(IN,'<',$infile) or die (\"Could not open $infile for reading\");",100],["my $infile = shift;",258],["$infile = $ARGV[0];",83],["my $infile;",278]],"useCount":5843},{"word":"info","context":[["$logger->info(",216],["my $info;",123],["# Tie info developed on:",128],["return $info;",136],["# Save info from this testcase run to mysqltest.log",145],["# Check failed, mark the test case with that info",149],["Inverse inc. <info@inverse.ca>",178],["my %info = @_;",180],["for $db (@{$info->{db}}) {",197],["my %info;",248]],"useCount":13732},{"word":"information","context":[["# distributed with this work for additional information",125],["# version.  For a full list including contact information of contributors,",164],["# get borrower information ....",154],["# Converts logged information from this module into human-readable form",120],["## packaging of this file.  Please review the following information to",128],["=head2 For more information:",176],["# Save this test case information, so next can examine it",179],["Print debugging information.",203],["# and COPYING for more information, or see http://slashcode.com/.",374],["#  See the \"MySQL Test framework manual\" for more information",145]],"useCount":10187},{"word":"init","context":[["# We need \\b after 'init' otherwise 'initconst' will cause a false positive in a check",258],["\"fs\", \"init\", \"ipc\", \"kernel\", \"lib\", \"scripts\",",248],["Log::Log4perl::init(\\$log4Perl_config);",201],["__(?:mem|cpu|dev|)(?:initdata|initconst|init\\b)|",159],["if ($line =~ /\\b(__dev(init|exit)(data|const|))\\b/) {",127],["# write init file for mysqld or client",272],["sub init {",477],["init();",278],["use Gtk2 '-init';",353],["mark_time_used('init');",292]],"useCount":6757},{"word":"inout0","context":[["xorps\t@tweak[0],$inout0",288],["&movups\t(&QWP(0,$out),$inout0);",312],["&movups\t(&QWP(16*0,$out),$inout0);\t# write output",144],["movups\t$inout0,($out)",246],["aes${dir}\t$rndkey1,$inout0",158],["aesdec\t\t$rndkey1,$inout0",117],["vaesenc\t$rndkey,$inout0,$inout0",126],["vaesenc\t$rndkey,$inout0,$inout0",126],["movups\t($inp),$inout0",168],["aesenc\t\t$rndkey1,$inout0",175]],"useCount":6278},{"word":"inp","context":[["&lea\t($acc,&DWP(16,$acc));\t# advance inp",126],["&add\t($inp,64);",124],["ldx\t\t[$inp + 0], %o0",120],["lea\t16($inp),$inp",235],["lea\t16($inp),$inp",235],["vld1.8\t{@XMM[8]-@XMM[9]}, [$inp]!\t@ reload input",156],["movups\t($inp),$inout0",168],["vld1.8\t{@XMM[15]}, [$inp]!",130],["&mov\t($acc,$_inp);\t\t# load inp",138],["&mov\t($_inp,$acc);\t\t# save inp",138]],"useCount":34436},{"word":"input","context":[["The standard input should be a tab-separated table (i.e., each line",492],["output_html_with_http_headers $input, $cookie, $template->output;",3631],["query => $input,",1724],["my $input = new CGI;",1973],["query           => $input,",2098],["my ($input) = @_;",1000],["This is a pipe command. The input is taken from the standard input, and the",493],["This is a pipe command. The input is taken from the standard input, and the",493],["my $index= $input->param('index');",439],["my $result= $input->param('result');",428]],"useCount":80592},{"word":"insns","context":[["foreach (@insns) { eval; }\t# remaining instructions [if any]",133],["eval(shift(@insns));",14269],["foreach (@insns) { eval; }",215],["eval(shift(@insns));\t\t\t# @",230],["foreach (@insns) { eval; }\t\t# remaining instructions",251],["my @insns = (&$body,&$body,&$body,&$body);\t# 32 instructions",282],["eval(shift(@insns));\t#@",336],["eval(shift(@insns));\t\t# body_20_39",376],["eval(shift(@insns));\t\t# ror",440],["eval(shift(@insns));\t\t# rol",546]],"useCount":18245},{"word":"instead","context":[["\"use relative pathname instead of absolute in changelog text\\n\" . $herecurr);",190],["# instead.",114],["# Wait a bit and see if a server died, if so report that instead",119],["failures will be marked exp-fail instead of fail.",119],["$opt_shutdown_timeout= 0; # Kill processes instead of nice shutdown",119],["# default system locations, instead of having our own private base",149],["\"$1 is obsolete, use k$3 instead\\n\" . $herecurr);",167],["\"Use #include <linux/$file> instead of <asm/$file>\\n\" . $herecurr);",185],["\"Consider using #include <linux/$file> instead of <asm/$file>\\n\" . $herecurr);",185],["\"Use of $flag is deprecated, please use \\`$replacement->{$flag} instead.\\n\" . $herecurr) if ($replacement->{$flag});",167]],"useCount":6255},{"word":"int","context":[["int i;",228],["#  1. with a type on the left -- int [] a;",296],["# int foo(something bar, other baz);",300],["`borrowernumber` int(11) NOT NULL,",306],["qr{(?:unsigned\\s+)?int},",224],["qr{(?:unsigned\\s+)?long\\s+long\\s+int},",224],["qr{(?:unsigned\\s+)?long\\s+int},",224],["borrowernumber int(11) NOT NULL,",209],["`id` int(11) NOT NULL auto_increment,",201],["`itemnumber` int(11) default NULL,",162]],"useCount":39219},{"word":"internal","context":[["\" $basedir/internal/plugin/*/tests/mtr/plugin.defs\".",61],["# This file is for internal use by core Perl only.  It is retained for",63],["'internal' => 1,",54],["# -3 : authentication system/internal error",47],["# Start of ugly internal SVN file hack",41],["# internal purposes",63],["# list-options is internal, not listed in help",115],["\"\\nMTR's internal check of the test case '$tname' failed.",119],["# This file is for internal use by the Perl program only.  The format and even",4650],["# This file is for internal use by core Perl only.  The format and even the",5878]],"useCount":12512},{"word":"into","context":[["# belonging to current tets into @lines",119],["# Put $args into a single string",302],["# Put variables into hash",266],["# Add arguments that should not go into the MYSQL_TEST env var",145],["# --datadir must exist, mysqld will chdir into it",144],["# The syslogd writes it into a file and through a pipe.",143],["# and slurp entire file into variable",76],["# suspicious into $error_log.warnings",119],["# copy all files from std_data into var/std_data",119],["# Converts logged information from this module into human-readable form",120]],"useCount":10637},{"word":"intranet","context":[["type          => \"intranet\",",79],["\"intranet\"",66],["$dat->{imageurl} = getitemtypeimagelocation( 'intranet', $itemtypes->{ $dat->{itemtype} }{imageurl} );",33],["$interface = 'intranet';",45],["type                => \"intranet\",",51],["type => 'intranet',",77],["'intranet'",210],["type            => 'intranet',",396],["type => \"intranet\",",2074],["type            => \"intranet\",",3059]],"useCount":6685},{"word":"is","context":[["# The format of the lines of this file is: START\\tSTOP\\twhere START is the",2478],["# The format of the lines of this file is: START\\tSTOP\\twhere START is the",2478],["# This file is built by mktables from e.g. UnicodeData.txt.",2362],["# is also valid.",2401],["# starting code point of the range, in hex; STOP is the ending point, or if",2478],["# This file is part of Koha.",6644],["# This file is for internal use by core Perl only.  The format and even the",5878],["# This file is machine-generated by mktables from the Unicode",4479],["# This file is for internal use by the Perl program only.  The format and even",4650],["# This file is machine-generated by lib/unicore/mktables from the Unicode",5126]],"useCount":194469},{"word":"it","context":[["# use it directly.",5354],["# closing brace should have a space following it when it has anything",303],["# ' *' then it is very likely a comment.",303],["# closing brace should have a space following it when it has anything",303],["# failed to talk to it properly. Kill the server and return failure",304],["# it is NOT alive",305],["# also makes it possible to wait for any process to exit during the check",357],["it under the same terms as Perl itself.",663],["# use it directly.  Use Unicode::UCD to access the Unicode character data",1538],["# Don't use it directly.",3636]],"useCount":71500},{"word":"item","context":[["=item *",2839],["'cmdname' => 'item',",991],["=item B<--help>",799],["=item B<--man>",648],["=item id",634],["@item aaa",412],["=item B<-help>",403],["=item -",336],["=item B<-man>",351],["=item source_id",377]],"useCount":59104},{"word":"itemnumber","context":[["if ($itemnumber) {",74],["`itemnumber` int(11) default NULL,",162],["itemnumber     => $itemnumber,",58],["priority, found, timestamp, itemnumber,",108],["`itemnumber` int(11) NOT NULL,",104],["my $itemnumber = GetItemnumberFromBarcode($barcode);",72],["WHERE items.itemnumber=issues.itemnumber",69],["WHERE items.itemnumber=issues.itemnumber",69],["my $itemnumber;",62],["my $item = GetItem( $itemnumber );",66]],"useCount":9143},{"word":"items","context":[["my @items;",419],["# adding items linked via host biblios",93],["items => [",292],["Barcode: <<items.barcode>><br />",93],["shift @items;",133],["while (@items) {",129],["my ($tagfield,$tagsubfield) = &GetMarcFromKohaField(\"items.barcode\",$frameworkcode);",87],["$dbh->do(\"ALTER TABLE items",114],["foreach my $item (@items) {",102],["$dat->{ITEM_RESULTS}   = \\@items;",110]],"useCount":16357},{"word":"itemtype","context":[["while ( my ( $itemtype, $description ) = $sth->fetchrow_array ) {",120],["push @authorised_values, $itemtype;",119],["$sth->execute($itemtype);",92],["`itemtype` varchar(10) NOT NULL,",78],["WHERE itemtype = ?\");",71],["my $itype_or_itemtype = (C4::Context->preference(\"item-level_itypes\"))?'itype':'itemtype';",76],["if ( $itemtype ) {",73],["$authorised_lib{$itemtype} = $description;",119],["my $itemtype;",60],["$biblio->{'itemtype'} = C4::Context->preference('item-level_itypes') ? $biblio->{'itype'} : $biblio->{'itemtype'};",59]],"useCount":5772},{"word":"iter","context":[["for ($iter=0; $iter< $total_rows; $iter++){",447],["for ($iter=0; $iter< $total_rows; $iter++){",447],["if($uboot_alias{$PARTITION_FIELD[$iter]}){",166],["last if($PARTITION_FIELD[$iter] eq \"BMTPOOL\" || $PARTITION_FIELD[$iter] eq \"OTP\");",161],["last if($PARTITION_FIELD[$iter] eq \"BMTPOOL\" || $PARTITION_FIELD[$iter] eq \"OTP\");",161],["$iter = $iter + 1 ;",193],["$iter = $iter + 1 ;",193],["my $iter = 0 ;",280],["my $iter = 0;",428],["for ($iter=0; $iter< $total_rows; $iter++){",447]],"useCount":14481},{"word":"its","context":[["# first statement and ensure its the whole macro if its not enclosed",299],["# first statement and ensure its the whole macro if its not enclosed",299],["# If this whole things ends with a type its most",298],["# An else is really a conditional as long as its not else if",299],["# The server receives the message on its UDP socket.",93],["\"EXPORT_SYMBOL(foo); should immediately follow its function/variable\\n\" . $herecurr);",184],["# Get log from server identified from its $proc object, from named test",119],["# but its format and even its name or existence are subject to change without",63],["WARN(\"EXPORT_SYMBOL(foo); should immediately follow its function/variable\\n\" . $herecurr);",99],["# Test failure was detected by test tool and its report",119]],"useCount":6499},{"word":"j","context":[["my $j;",351],["my $j=$i+1;",241],["$j=0;",256],["my $j=0;",332],["mulq\t$m0\t\t\t# ap[j]*bp[0]",340],["mulq\t$m0\t\t\t# ap[j]*bp[i]",388],["my $j = 0;",553],["mulq\t$m1\t\t\t# np[j]*m1",728],["$j++;",1505],["$j = 0;",373]],"useCount":43057},{"word":"jmp","context":[["jmp\t.Lxts_enc_done",142],["&jmp\t(&label(\"loop\"));",140],["jmp\t.Lxts_dec_done",128],["jmp\t.Lecb_enc_done",91],["jmp\t.Lcommon_seh_tail",111],["&jmp\t(&label(\"exit\"));",101],["&jmp\t(&label(\"ecb_ret\"));",96],["jmp\t.Lcbc_dec_tail_collected",98],["jmp\t.Lecb_ret",182],["jmp\t.Lexit",186]],"useCount":6935},{"word":"join","context":[["print \" <\" . join('', @av_paren_type) .",299],["join(\" \", @{$extra_opts}) . \"' != '\" .",238],["print join(\"\\t\", $line, @$result) . \"\\n\";",306],["join(\" \", @{$started_opts}) . \"'\" );",238],[".join(',',@current_algorithms).\";\";",605],["my $mods = \"(?x:  \\n\" . join(\"|\\n  \", @modifierList) . \"\\n)\";",249],["my $all = \"(?x:  \\n\" . join(\"|\\n  \", @typeList) . \"\\n)\";",249],["my $str= join(\" \", @$$args);",266],[".join(',',@current_platforms).\":\"",331],["my $ctx = join(\"\\n\", @ctx);",308]],"useCount":22127},{"word":"just","context":[["# so just keep quiet.",299],["# Fill help tables, just an empty file when running from bk repo",135],["# Test case had sideeffects, not fatal error, just continue",119],["# Default, just add the line without newline",119],["# Allow just an angle bracketed address",192],["\"boolean test with hexadecimal, perhaps just 1 \\& or \\|?\\n\" . $herecurr);",193],["# just keep quiet.",300],["# omitted, the range has just one code point.  Numbers in comments in",2478],["# If marked to skip, just print out and return.",149],["# Add test data for timezone - this is just a subset, on a real",147]],"useCount":11490},{"word":"k","context":[["my $k;",245],["$k++;",422],["my $k=0;",92],["\"$1 is obsolete, use k$3 instead\\n\" . $herecurr);",167],["print join(\"\\t\", $k, map { ref($_) eq 'ARRAY' ? join(\",\", @$_) : $_ } @$v{@fields}), \"\\n\";",160],["while (my($k, $v) = each %$h)",160],["$k = 0;",151],["my $k = 0;",143],["-k --keepalive       enable keep-alive connections",114],["double k;",138]],"useCount":16624},{"word":"kernel","context":[["[\"storage/ndb/src/kernel\", \"libexec\", \"sbin\", \"bin\"],",193],["\"use of in_atomic() is incorrect outside core kernel code\\n\" . $herecurr);",184],["if ($realfile !~ m@^kernel/lockdep@ &&",248],["\"fs\", \"init\", \"ipc\", \"kernel\", \"lib\", \"scripts\",",248],["--no-tree                  run without a kernel tree",267],["} elsif ($realfile !~ m@^kernel/@) {",272],["--root=PATH                PATH to the kernel tree root",273],["# Check for absolute kernel paths.",278],["if ($1 =~ m@Documentation/kernel-parameters.txt$@) {",284],["print \"Must be run from the top-level dir. of a kernel tree\\n\";",285]],"useCount":6481},{"word":"key","context":[["$cached_env_img{$key} = q|<IMG",3477],["my $key;",1582],["$pdb->{$section}->{$machine}{$lane}{$stage}{delta}{$key};",1142],["if ($key = $root_key->get_subkey($key_path)) {",770],["$noresave{$key} = \"$nosave\";",6902],["key     => '',",577],["my $key = shift;",490],["$key,",459],["foreach my $key (keys %{$pu01->{$section}->{data}})",450],["printf $outfh \",%s\", $key;",406]],"useCount":91897},{"word":"keys","context":[["foreach my $key (sort keys %{$totals{$section}{by_machine}{$machine}})",306],["foreach my $product (sort keys %{$totals{$section}{by_product}})",286],["for my $key (keys %debug) {",300],["foreach my $key (sort keys %{$totals{$section}{by_machine_lane}{$machine}{$lane}})",301],["my @f = keys %all_fields;",306],["return 0 unless ( keys %started );",357],["if ( keys(%started) == 0){",357],["foreach my $key (keys %{$pu01->{$section}->{data}})",450],["foreach my $product (sort keys %{$totals{by_product}})",618],["#     foreach my $product (sort keys %{$totals{$section}{by_product}})",255]],"useCount":42312},{"word":"l","context":[["chomp $l;",273],["$l++;",212],["system \"$perl_dir/perl $scripts_dir/logging.pl -v $log -l \\'$log_file\\' -p $priority -m \\'$message\\'\";",176],["if ($line =~ /\\b((simple|strict)_(strto(l|ll|ul|ull)))\\s*\\(/) {",167],["if ( -l $opt_vardir)",149],["if ( -l $opt_vardir )",149],["my @l = ();",122],["chomp($l);",214],["my $l;",244],["my $l = '';",331]],"useCount":17413},{"word":"label","context":[["lea\t(%rsi,%r10),%r10\t# epilogue label",334],["#\tNOTE:\tThe following label name should be changed to",140],["cmp\t%r10,%rbx\t\t# context->Rip>=epilogue label",306],["# terminating a case value or a label.",296],["cmp\t%r10,%rbx\t\t# context->Rip<prologue label",226],["lea\t(%rsi,%r10),%r10\t# prologue label",201],["my $label;",132],["&call\t(&label(\"pic_point\"));",176],["'label' => {},",166],["&jmp\t(&label(\"loop\"));",140]],"useCount":20481},{"word":"lane","context":[["$lane          = $parts[3];",376],["delete $pdb->{$section}->{$machine}{$lane}{$stage}{delta};",376],["my $state = $pdb->{$section}->{$machine}{$lane}{$stage}{state};",388],["delete $pdb->{$section}->{$machine}{$lane}{$stage}{cache};",718],["$pdb->{$section}->{$machine}{$lane}{$stage}{state}",980],["$pdb->{$section}->{$machine}{$lane}{$stage}{delta}{$key};",1142],["$pdb->{$section}->{$machine}{$lane}{$stage}{state} = DELTA;",1151],["my $lane = $pu01->{lane};",1409],["my $lane = $pu01->{lane};",1409],["#     my $lane = $pu01->{lane};",340]],"useCount":27359},{"word":"lang","context":[["$lang=~s/\\.po//;",50],["<body lang=\"en\" bgcolor=\"#FFFFFF\" text=\"#000000\" link=\"#0000FF\" vlink=\"#800080\" alink=\"#FF0000\">",282],["at java.lang.Thread.run(Thread.java:619)',",106],["$dbh->do(\"INSERT INTO language_descriptions(subtag, type, lang, description)",91],["at java.lang.Object.wait(Native Method)",86],["return $lang;",58],["for my $l (sort { $b->{percentage} <=> $a->{percentage} } @lang) {",53],["$lang=$_;",51],["java.lang.Thread.State: WAITING (on object monitor)",46],["$lang",48]],"useCount":11757},{"word":"language","context":[["# load the language limits (for search)",57],["'language' => 'es',",60],["<script language=\"JavaScript\">",71],["'language' => 'fr',",62],["# limits are use to limit to results to a pre-defined category such as branch or language",57],["%  Logtalk - Open source object-oriented logic programming language",56],["'language' => 'pt',",53],["ALT=\"\\begin{lstlisting}[language=Erlang]",83],["# Look for language files and charsetsdir, use same share",147],["'language' => 'en',",1540]],"useCount":7082},{"word":"last","context":[["last SUB;",431],["last if (!($remain > 0 && $condition =~ /^(?:\\s*\\n[+-])*\\s*(?:else|do)\\b/s));",299],["last FMTSW;",445],["is a tab-separated set of fields).  Normally, the last field in each",493],["last if ($level == 0);",604],["last SWITCH;",864],["last;",27643],["last if (!defined $lines[$line]);",294],["last if (!defined $rawlines[$ln - 1]);",292],["last if ($word =~ m/^#/);",240]],"useCount":54230},{"word":"lc","context":[["if ( lc($opt_build_thread) eq 'auto' ) {",119],["my $level = lc($orig);",261],["my $ucfirst_sign_off = ucfirst(lc($sign_off));",192],["for (my $count = $linenr + 1; $count <= $lc; $count++) {",179],["$lc = $lc + $linenr;",179],["$lc = $lc + $linenr;",179],["my $lc = $stat =~ tr@\\n@@;",179],["mtr_add_arg($args, \"--lc-messages-dir=%s\", $path_language);",129],["$name = lc $name;",125],["mtr_add_arg($args, \"--lc-messages-dir=%s\", $install_lang);",108]],"useCount":11329},{"word":"ldr","context":[["ldr\t$s3,[$rounds,#12]",57],["ldr\tr12,[r3,r12]\t\t@ OPENSSL_armcap_P",53],["ldr\t$rounds, [$key, #240]\t\t@ get # of rounds",104],["ldr\tr12, [$key, #244]",104],["ldr\tr12,.LOPENSSL_armcap",71],["ldr\t$t1,[$t3],#4\t\t\t@ rcon[i++]",69],["ldr\t$s2,[$rounds,#8]",57],["ldr\t$s1,[$rounds,#4]",57],["ldr\t$s0,[$rounds,#0]",57],["ldr\tr2, [ip, #0]\t\t\t@ key2",52]],"useCount":7165},{"word":"lea","context":[["lea\t24(%rsi),%r12\t\t# &disp->EstablisherFrame",331],["lea\t1($i),$i\t\t# i++",214],["lea\t56(%rsi),%r11\t\t# &disp->HandlerData",331],["lea\t48(%rsi),%rsp",291],["lea\t512($context),%rdi\t# &context.Xmm6",206],["lea\t1($j),$j\t\t# j++",208],["lea\t16($inp),$inp",235],["lea\t(%rsi,%r10),%r10\t# prologue label",201],["lea\t(%rsi),%rsp",212],["lea\t(%rsi,%r10),%r10\t# epilogue label",334]],"useCount":25425},{"word":"left","context":[["div.indentedblock {margin-left: 3.2em}",167],["# If there's a name left after stripping spaces and",194],["div.smalllisp {margin-left: 3.2em}",290],["div.smallexample {margin-left: 3.2em}",290],["div.display {margin-left: 3.2em}",290],["div.example {margin-left: 3.2em}",290],["div.smalldisplay {margin-left: 3.2em}",290],["div.lisp {margin-left: 3.2em}",290],["#  1. with a type on the left -- int [] a;",296],["# A colon can be substituted for the equals sign, and anything to the left of",2251]],"useCount":11137},{"word":"len","context":[["&loop_unroll_c($content, 'len', 4);",194],["if ($off >= $len) {",599],["my $len = 0;",490],["if ($off == $len) {",300],["#warn \"CSB: blk<$blk> off<$off> len<$len>\\n\";",300],["#warn \"CSB: blk<$blk> off<$off> len<$len>\\n\";",300],["$len = length($blk);",300],["$loff = $len;",299],["#print \"LINE<$lines[$ln-1]> len<\" . length($lines[$ln-1]) . \"\\n\";",292],["$loff = $len + 1;",296]],"useCount":22936},{"word":"length","context":[["return (length($line), length($white));",303],["substr($block, 0, length($cond), '');",896],["substr($s, 0, length($c), '');",890],["# Measure the line length and indent.",303],["my $clean = 'X' x length($1);",598],["my $length;",430],["$off += length($elements[$n]);",303],["my $length = 0;",378],["$cc = substr($opline, $off + length($elements[$n + 1]));",303],["$dec = length $dec;",372]],"useCount":40543},{"word":"level","context":[["'level' => 0,",694],["'level' => 1,",1112],["'level' => 2,",521],["my ($level, $endln, @chunks) =",597],["($statement, $condition, $linenr, $remain, $off, $level) =",598],["return ($level, $linenr, @chunks);",598],["last if ($level == 0);",604],["my $level = 0;",681],["$level++;",1226],["$level--;",1162]],"useCount":29636},{"word":"lib","context":[["use lib dirname($RealBin) . '/Custom';",521],["use lib dirname($RealBin) . '/Kernel/cpan-lib';",561],["use lib dirname($RealBin) . '/Kernel/cpan-lib';",561],["use lib dirname($RealBin);",764],["use lib \"../../../lib\";",446],["use lib \"../../../lib\";",446],["use lib 'lib';",428],["# This file is machine-generated by lib/unicore/mktables from the Unicode",5126],["use lib \"$FindBin::Bin/../lib\";",854],["use lib \"$FindBin::Bin/../lib\";",854]],"useCount":41331},{"word":"library","context":[[":- use_module(library(debug)).",449],[":- use_module(library(apply)).",404],["$R->run(q` library(ggplot2) `,",293],["q` library(Cairo) `,",298],[":- use_module(library(option)).",335],["As a special exception, if you link this library with other files,",1585],["library does not by itself cause the resulting executable to be covered",1583],[":- use_module(library(lists)).",1109],[":- use_module(library(pce)).",694],[":- use_module(library(error)).",495]],"useCount":20878},{"word":"like","context":[["=item --like field,value",80],["# looks like a declaration",80],["# check for function declarations without arguments like \"int foo()\"",93],["[Loader opts like db_schema, naming] dbi:Pg:dbname=foo root 4321",97],["[connect_info opts like quote_char, name_sep]",97],["# Output like:",99],["#Ignore SI style variants like nS, mV and dB (ie: max_uV, regulator_min_uA_show)",101],["# directly before it executes them, like \"make test-force-pl\" in RPM builds.",149],["sub _like   { return $config ? $config->like($_[0]) : (); }",119],["# look like that in function my_print_variables in my_getopt.c",111]],"useCount":8120},{"word":"limit","context":[["# Find the end of the macro and limit our statement",124],["#80 column limit",157],["# On some operating systems, there is a limit to the length of a",147],["for my $limit (2000, 1500, 1000, 500){",119],["$opt_parallel-- if ($sys_info->min_bogomips() < $limit);",119],["$opt_max_test_fail, set to 0 for no limit. Set",119],["$opt_max_save_datadir, set to 0 for no limit. Set",119],["$opt_max_save_core, set to 0 for no limit. Set",119],["push(@args_check_list, { name => \"\\\"$arg_name\\\"\", arg => \"${arg_name}len\", limit => $limit });",87],["push(@args_check_list, { name => \"\\\"$arg_name\\\"\", arg => \"${arg_name}len\", limit => $limit });",87]],"useCount":6741},{"word":"line","context":[["my $herevet = \"$here\\n\" . cat_vet($line) . \"\\n\";",1059],["return $line;",915],["print $line;",865],["chomp $line;",5330],["chomp($line);",4703],["my $line;",4054],["my $line = $_;",2145],["foreach my $line (@lines) {",1573],["$line++;",1236],["my ($line) = @_;",1169]],"useCount":224477},{"word":"line_nr","context":[["'line_nr' => 1,",1782],["'line_nr' => 2,",944],["'line_nr' => 5,",873],["'line_nr' => 3,",857],["'line_nr' => 4,",758],["'line_nr' => 6,",653],["'line_nr' => 7,",507],["'line_nr' => {},",2801],["'line_nr' => 8,",463],["'line_nr' => {",12420]],"useCount":30062},{"word":"linenr","context":[["my ($linenr, $remain, $off) = @_;",1201],["$linenr++;",640],["my ($linenr, $remain) = @_;",909],["$herectx .= raw_line($linenr, $n) . \"\\n\";",773],["($statement, $condition, $linenr, $remain, $off, $level) =",598],["ctx_statement_block($linenr, $remain, $off);",598],["return ($level, $linenr, @chunks);",598],["ctx_statement_block($linenr, $realcnt, 0);",603],["if (!ctx_has_comment($first_line, $linenr)) {",625],["$fixed[$linenr - 1] =~",549]],"useCount":26187},{"word":"lines","context":[["$cnt-- if ($lines[$ln - 1] !~ /^-/);",344],["#ignore lines not being added",303],["@lines = ();",469],["return @lines;",519],["#print \"APW: ALLOWED: lines block<$block>\\n\";",557],["push(@lines, $line);",567],["my @lines;",862],["my @lines = ();",967],["# The format of the lines of this file is: START\\tSTOP\\twhere START is the",2478],["foreach my $line (@lines) {",1573]],"useCount":45200},{"word":"link","context":[["# Runinng with \"var\" as a link to some \"memory\" location, normally tmpfs",149],["# Remove the directory which the link points at",149],["<link href=\"#Top\" rel=\"start\" title=\"Top\">",174],["<body lang=\"en\" bgcolor=\"#FFFFFF\" text=\"#000000\" link=\"#0000FF\" vlink=\"#800080\" alink=\"#FF0000\">",282],["print '<link href=\"xampp.css\" rel=\"stylesheet\" type=\"text/css\">';",89],["my $link;",112],["As a special exception, if you link this library with other files,",1585],["# Some users creates a soft link in mysql-test/var to another area",145],["my @default_fields = ('from-link', 'to-link');",306],["my @default_fields = ('from-link', 'to-link');",306]],"useCount":9972},{"word":"list","context":[["--fields list   Choose a set of fields to return. List is a comma-separated list of strings.",320],["developers list at <http://lists.ensembl.org/mailman/listinfo/dev>.",512],["my @list;",534],["--fields list   Choose a set of fields to return. List is a comma-separated list of strings.",320],["Choose a set of fields from the relationship to return. Field-list is a comma-separated list of",612],["--from field-list",306],["entity to return. Field-list is a comma-separated list of strings. The",612],["Choose a set of fields from the relationship to return. Field-list is a comma-separated list of",612],["entity to return. Field-list is a comma-separated list of strings. The",612],["--to field-list",306]],"useCount":38270},{"word":"ln","context":[["#print \"RAW<$rawlines[$ln - 1]>\\n\";",294],["my $ln = $linenr;",442],["($dstat, $dcond, $ln, $cnt, $off) =",431],["$ln++;",347],["$cnt-- if ($lines[$ln - 1] !~ /^-/);",344],["my $ln = $linenr - 1;",300],["$suppress_ifbraces{$ln + $offset} = 1;",298],["$herectx .= \"$rawlines[$ln + $offset]\\n[...]\\n\";",298],["$ln += statement_rawlines($block) - 1;",298],["$rawlines[$ln - 1] =~ /^-/);",294]],"useCount":11569},{"word":"lo","context":[["ldr\t$t2, [$ctx,#$Hoff+$lo]",48],["# Blackfin: use hi/lo macros",263],["movzb\t`&lo(\"$s2\")`,$acc0",80],["movzb\t`&lo(\"$s3\")`,$acc1",80],["movzb\t`&lo(\"$s0\")`,$acc0",80],["movzb\t`&lo(\"$s1\")`,$acc1",80],["movzb\t`&lo(\"$s0\")`,$acc2",80],["ldr\t$t2, [$ctx,#$Doff+$lo]",48],["movzb\t`&lo(\"$s1\")`,$acc2",72],["movzb\t`&lo(\"$s2\")`,$acc2",80]],"useCount":6368},{"word":"load","context":[["local-load= $opt_tmpdir",119],["&mov\t($key,$_key);\t\t# load key",126],["movdqu\t0x00($inp), @XMM[0]\t# load input",99],["next unless (load($pu01) != 0);",99],["sub load",126],["&mov\t($s2,$_len);\t\t# load len",132],["&mov\t($acc,$_inp);\t\t# load inp",138],["$ui->load(\\*FU);",157],["&mov\t($acc,&DWP(240,$key));\t\t# load key->rounds",116],["vldmia\t\t$magic, {$twmask}\t@ load XTS magic",104]],"useCount":13040},{"word":"local","context":[["#!/usr/local/bin/perl",2068],["local $\\ = '';",609],["local $_ = shift;",341],["local($_) = @_;",314],["local *FH;",308],["local $/ = undef;",744],["local @rv;",781],["local $_;",810],["local $/;",918],["#!/usr/local/bin/perl -w",1188]],"useCount":40670},{"word":"locale","context":[["my $locale   = $main::locale;",408],["$locale->text(",113],["locale => $locale,",316],["locale => $locale,",316],["my $locale   = $main::locale;",408],["use locale;",156],[". $locale->text('Continue')",205],["# with output which is incompatible with the current locale",149],["<th>| . $locale->text('Attached by') . qq|</th>",100],[". $locale->text('Description')",120]],"useCount":22436},{"word":"location","context":[["# to be \"fast disks\" to find a suitable location",119],["# use ../../ as lib location",157],["# Use --mem=<dir> as first location to look.",149],["# Runinng with \"var\" as a link to some \"memory\" location, normally tmpfs",149],["Attempts to find a suitable location",149],["# Create temporary directory in standard location for temporary files",119],["# Add the location for libmysqld.dll to the path.",108],["# use ../ as lib location",248],["# check the location of the inline attribute, that it is between",302],["my ($plugin, $location)  = @_;",106]],"useCount":5947},{"word":"log","context":[["# Open the test log file",238],["my $log_file_name= $opt_vardir.\"/log/\".$tinfo->{shortname}.\".log\";",250],["my $log_file_name= $opt_vardir.\"/log/\".$tinfo->{shortname}.\".log\";",250],["# Write start of testcase to log file",238],["mark_log($mysqld->value('#log-error'), $tinfo);",236],["# Check if it's the start of a commit log",176],["\"8-bit UTF-8 used in possible commit log\\n\" . $herecurr);",176],["system \"$perl_dir/perl $scripts_dir/logging.pl -v $log -l \\'$log_file\\' -p $priority -m \\'$message\\'\";",176],["$Ferr = undef; # Close error log file",155],["# Open the servers .err log file and read all lines",155]],"useCount":27942},{"word":"log_fh","context":[["#     printf $log_fh \"%d: File %s already exists\\n\", __LINE__, $outfnm if ( -e $outfnm);",510],["printf $log_fh  $pcol->{format}, $pcol->{name};",248],["printf $log_fh \"\\n\";",500],["printf $log_fh \"ENTRY STATE: %s\\n\",",373],["printf $log_fh \"\\nSECTION  : %s\\n\", $section",252],["printf $log_fh \"LANE     : %d\\n\", $lane;",252],["printf $log_fh \"\\t%-${section_precision}s: %d\\n\",",248],["printf $log_fh \"STAGE    : %d\\n\", $stage;",252],["printf $log_fh \"OUTPUT NO: %s\\n\", $output_no;",252],["printf $log_fh \"MACHINE  : %s\\n\", $machine;",252]],"useCount":15273},{"word":"logfile","context":[["my $logfile;",350],["$flags .= \"--pidfile \\\"$pidfile\\\" --logfile \\\"$logfile\\\" \";",207],["$logfile = server_logfilename($LOGDIR, $proto, $ipvnum, $idnum);",277],["$flags .= \"--pidfile \\\"$pidfile\\\" --logfile \\\"$logfile\\\" \";",207],["log4perl.appender.LOGFILE.filename=$logfile",200],["my $logfile = '';",164],["--logfile, --log=FILE               log to FILE (default: *STDOUT)",131],["--logpath=PATH                      write logfile to PATH (default: .)",127],["--logappend, --log_append           append to logfile (default: truncate)",126],["my $logfile='/var/log/openbib/split-$pool.log';",120]],"useCount":7347},{"word":"loggedinuser","context":[["my ( $template, $loggedinuser, $cookie ) = get_template_and_user({",125],["my ($template, $loggedinuser, $cookie);",112],["my ( $template, $loggedinuser, $cookie ) = get_template_and_user(",1858],["my ($template, $loggedinuser, $cookie)",1222],["( $template, $loggedinuser, $cookie ) = get_template_and_user(",325],["my ($template, $loggedinuser, $cookie) = get_template_and_user({",189],["($template, $loggedinuser, $cookie)",176],["my ( $template, $loggedinuser, $cookie );",145],["my ($template, $loggedinuser, $cookie) = get_template_and_user(",137],["my ( $template, $loggedinuser, $cookie, $flags ) = get_template_and_user(",82]],"useCount":5825},{"word":"logmsg","context":[["logmsg \"RUN: $srvrname server failed verification\\n\";",276],["logmsg \"RUN: failed to start the $srvrname server\\n\";",277],["logmsg \"-time-  test\\n\";",174],["logmsg \"$txt\\n\";",174],["logmsg \"------  ----\\n\";",174],["logmsg \"RUN: $cmd\\n\" if($verbose);",116],["logmsg \"RUN: curl command died with a coredump\\n\";",112],["logmsg \"SCP, SFTP and SOCKS tests require OpenSSH 2.9.9 or later\\n\";",93],["logmsg \"Warning: $server server unexpectedly alive\\n\";",87],["logmsg \"RUN: curl command returned $res\\n\";",87]],"useCount":8600},{"word":"long","context":[["# warn about unexpectedly long msleep's",237],["qr{(?:unsigned\\s+)?long\\s+long},",224],["qr{(?:unsigned\\s+)?long\\s+long\\s+int},",224],["qr{(?:unsigned\\s+)?long\\s+int},",224],["# An else is really a conditional as long as its not else if",299],[".long\t0",564],[".long\t0xa548f3fc\t\t# cld; rep movsq",586],["# Find out how long the conditional actually is.",588],["qr{(?:unsigned\\s+)?long},",224],["qr{(?:unsigned\\s+)?long\\s+long},",224]],"useCount":16652},{"word":"loop","context":[["&jmp\t(&label(\"loop\"));",140],["# prevent the tk window from showing up then start the event loop",305],["# if/while/etc brace do not go on next line, unless defining a do while loop,",303],["# multi-statement macros should be enclosed in a do while loop, grab the",299],["# Also ignore a loop construct at the end of a",296],["# loop through each subfield",248],["&set_label(\"loop\",16);",195],["\"Macros with multiple statements should be enclosed in a do - while loop\\n\" . \"$herectx\");",169],["my @loop;",142],["# loop through each tab 0 through 9",139]],"useCount":10233},{"word":"lost","context":[["# database, Version 6.3.0.  Any changes made here will be lost!",1161],["# database, Version 7.0.0.  Any changes made here will be lost!",405],["$err_in_report= 1 if $line =~ /possibly lost: [1-9]/;",119],["$err_in_report= 1 if $line =~ /definitely lost: [1-9]/;",119],["# database, Version 5.2.0.  Any changes made here will be lost!",1670],["# database, Version 6.2.0.  Any changes made here will be lost!",1762],["# database, Version 6.0.0.  Any changes made here will be lost!",1994],["# database, Version 6.1.0.  Any changes made here will be lost!",2613],["# Any changes made here will be lost!",2921],["# Management of lost or long overdue items",60]],"useCount":14117},{"word":"m","context":[["if ($line =~ m{//}) {",298],["if ($line =~ m@\\*/@) {",306],["if ($line =~ m@/\\*@) {",306],["if ($path =~ m{//}) {",304],["if ($realcnt != 0 && $line !~ m{^(?:\\+|-| |\\\\ No newline|$)}) {",300],["if ($linenr == $first_line and $line =~ m@^.\\s*\\*@) {",307],["next if ($line =~ m/^\\s*#/);",380],["next if ($line =~ m/^\\s*$/);",407],["if ($realfile !~ m@\\binclude/uapi/@ &&",512],["$0 =~ m/(.*[\\/\\\\])[^\\/\\\\]+$/; $dir=$1;",908]],"useCount":50363},{"word":"machine","context":[["# This file is machine-generated by lib/unicore/mktables from the Unicode",5126],["# This file is machine-generated by mktables from the Unicode",4479],["my $machine = $pu01->{mach_no};",1409],["$pdb->{$section}->{$machine}{$lane}{$stage}{state} = DELTA;",1151],["$pdb->{$section}->{$machine}{$lane}{$stage}{delta}{$key};",1142],["$pdb->{$section}->{$machine}{$lane}{$stage}{state}",980],["delete $pdb->{$section}->{$machine}{$lane}{$stage}{cache};",718],["my $state = $pdb->{$section}->{$machine}{$lane}{$stage}{state};",388],["delete $pdb->{$section}->{$machine}{$lane}{$stage}{delta};",376],["#     my $machine = $pu01->{mach_no};",340]],"useCount":39522},{"word":"macro","context":[["'macro' => ''",11970],["# first statement and ensure its the whole macro if its not enclosed",299],["\"use the LO() macro, not (... & 0xFFFF)\\n\" . $herevet);",184],["\"use the SSYNC() macro in asm/blackfin.h\\n\" . $herevet);",184],["\"use the HI() macro, not (... >> 16)\\n\" . $herevet);",184],["\"use the CSYNC() macro in asm/blackfin.h\\n\" . $herevet);",184],["# do {} while (0) macro tests:",138],["'cmdname' => 'macro',",339],["@end macro",339],["'macro' => '',",2577]],"useCount":19427},{"word":"made","context":[["quest::say(\"I don't need this.\"); #text made up",53],["ok(1); # If we made it this far, we're ok.",57],["# This code made possible by:",128],["# Any changes made here will be lost!",2921],["# database, Version 6.1.0.  Any changes made here will be lost!",2613],["# database, Version 6.0.0.  Any changes made here will be lost!",1994],["# database, Version 6.2.0.  Any changes made here will be lost!",1762],["# database, Version 5.2.0.  Any changes made here will be lost!",1670],["# database, Version 6.3.0.  Any changes made here will be lost!",1161],["# database, Version 7.0.0.  Any changes made here will be lost!",405]],"useCount":13964},{"word":"mail","context":[["E-mail:        jan@swi.psy.uva.nl",798],["E-mail:        efmera@gmail.com",78],["# Analysing information and getting mail properties",77],["E-mail:        wielemak@science.uva.nl",259],["E-mail:        J.Wielemaker@vu.nl",495],["E-mail:        J.Wielemaker@cs.vu.nl",217],["E-mail:        J.Wielemaker@uva.nl",199],["$mail{body} = <<END_OF_BODY;",84],["$mail{'content-type'} = \"multipart/mixed; boundary=\\\"$boundary\\\"\";",77],["# Check if there is UTF-8 in a commit log when a mail header has explicitly",136]],"useCount":6778},{"word":"main","context":[["# Example main subroutine.",437],["my %myconfig = %main::myconfig;",458],["my $form     = $main::form;",676],["$main::lxdebug->enter_sub();",709],["$main::lxdebug->leave_sub();",738],["sub main",792],["main: {",802],["package main;",1078],["main();",1959],["sub main {",1962]],"useCount":28739},{"word":"make","context":[["# `make test'. After `make install' it should work as `perl test.pl'",233],["# `make test'. After `make install' it should work as `perl test.pl'",233],["# To make it easier for different devs to work on the same host,",149],["# Create an environment variable to make it possible",149],["# directly before it executes them, like \"make test-force-pl\" in RPM builds.",149],["# Before `make install' is performed this script should be runnable with",236],["# make sense.",275],["# make sure symbols are always wrapped with VMLINUX_SYMBOL() ...",275],["#make up the handle for any error we report on this line",303],["# configuration used to build them.  To make life easier, an environment",147]],"useCount":12491},{"word":"man","context":[["pod2usage(-exitstatus => 0, -verbose => 2) if $man;",213],["# User perldoc to generate the man documentation.",138],["pod2usage(-verbose => 2) if $man;",179],["=item --man",192],["my ( $debug, $help, $man );",203],["my $man = 0;",212],["=item B<--man>",648],["=item B<-man>",351],["[--man]",227],["elsif ($man) {",227]],"useCount":7963},{"word":"map","context":[["map{",136],["my %all_fields = map { $_ => 1 } @all_fields;",161],["my %all_from_fields = map { $_ => 1 } @all_from_fields;",306],["my %all_to_fields = map { $_ => 1 } @all_to_fields;",306],["my %all_rel_fields = map { $_ => 1 } @all_rel_fields;",306],["map($_->kill(), values(%started));",357],["# map to.",413],["my @h = map { $_->[0] } @tuples;",452],["print join(\"\\t\", $k, map { ref($_) eq 'ARRAY' ? join(\",\", @$_) : $_ } @$v{@fields}), \"\\n\";",160],["map {",974]],"useCount":16862},{"word":"match","context":[["my $sub_to = $match;",101],["# match any of the following regular expression constructs:",313],["\"Alignment should match open parenthesis\\n\" . $hereprev) &&",103],["my ($match, $from, $to, $ident) = ($1, $2, $2, $3);",103],["-rr --restart_regex  regex match files that trigger",114],["my $match = 0;",122],["my $match;",132],["# group below.  It could be that the tables will match the same set of code",145],["$match = 1;",173],["my $sub_from = $match;",101]],"useCount":9218},{"word":"max","context":[["my $max;",142],["return $max;",143],["use List::Util qw(min max);",144],["max-save-core         Limit the number of core files saved (to avoid filling",149],["'max-save-core=i'          => \\$opt_max_save_core,",149],["# typecasts on min/max could be min_t/max_t",190],["sub max {",170],["$stat =~ /^\\+(?:.*?)\\b(min|max)\\s*\\(\\s*$FuncArg\\s*,\\s*$FuncArg\\s*\\)/) {",169],["my $max = 0;",259],["use List::Util qw[min max];",161]],"useCount":11351},{"word":"mbstring","context":[["\"ext/mbstring/tests/mb_stripos_error1.phpt\",",23],["\"ext/mbstring/tests/mb_strripos_variation3_Bug45923.phpt\",",23],["\"ext/mbstring/tests/mb_strpos_error2.phpt\",",23],["\"ext/mbstring/tests/mb_strpos_variation4.phpt\",",23],["\"ext/mbstring/tests/mb_encode_mimeheader_variation4.phpt\",",23],["\"ext/mbstring/tests/mb_strlen_error2.phpt\",",23],["\"ext/mbstring/tests/mb_ereg_replace_variation1.phpt\",",23],["\"ext/mbstring/tests/mb_decode_mimeheader_variation1.phpt\",",23],["\"ext/mbstring/tests/mb_ereg_variation6.phpt\",",23],["\"ext/mbstring/tests/mb_ereg3.phpt\",",23]],"useCount":6786},{"word":"menu","context":[["'cmdname' => 'menu',",737],["require \"bin/menu.pl\";",274],["pre.menu-preformatted {font-family: serif}",290],["pre.menu-comment {font-family: serif}",290],["@menu",360],["@end menu",389],["'text' => 'menu'",392],["require \"$form->{path}/menu.pl\";",406],["'command_argument' => 'menu',",727],["'text_arg' => 'menu'",727]],"useCount":8246},{"word":"message","context":[["\"Invalid UTF-8, patch and commit message should be encoded in UTF-8\\n\" . $hereptr);",193],["print STDERR \"$message\\n\";",178],["--ignore TYPE(,TYPE2...)   ignore various comma separated message types",192],["say format_date(DateTime->now), \" \", $message;",204],["my $message = shift;",713],["Print a brief help message and exits.",484],["my $message;",276],["Print a brief help message and exit.",267],["'message' => ignore(),",236],["my ($message) = @_;",226]],"useCount":19811},{"word":"messages","context":[["# check for unnecessary \"Out of Memory\" messages",73],["my $reserve    = $messages->{'ResFound'};",60],["my @messages;",64],["mtr_add_arg($args, \"--lc-messages-dir=%s\", $path_language);",129],["my $messages;",75],["push @messages, {",82],["# messages are ERROR, but ?: are CHK",96],["my $install_lang= $mysqld->value('lc-messages-dir');",107],["-e --keeperr  send error messages to STDOUT, not",108],["mtr_add_arg($args, \"--lc-messages-dir=%s\", $install_lang);",108]],"useCount":5812},{"word":"min","context":[["my $min = $1;",137],["# typecasts on min/max could be min_t/max_t",190],["my ($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) = localtime(time);",175],["$min > $max) {",134],["use List::Util qw(min max);",144],["use List::Util qw[min max];",161],["} elsif ($min =~ /^\\d+$/ && $max =~ /^\\d+$/ &&",134],["\"usleep_range should not use min == max args; see Documentation/timers/timers-howto.txt\\n\" . \"$here\\n$stat\\n\");",134],["if ($min eq $max) {",134],["$stat =~ /^\\+(?:.*?)\\b(min|max)\\s*\\(\\s*$FuncArg\\s*,\\s*$FuncArg\\s*\\)/) {",169]],"useCount":8249},{"word":"misc_line_arg","context":[["'type' => 'misc_line_arg'",6775]],"useCount":6775},{"word":"missing","context":[["# the main body of the table, and what all code points missing from this file",413],["# missing space after union, struct or enum definition",250],["print \"Something's missing.\\n\";",225],["qr/missing DBUG_RETURN/,",119],["my($res) = $missing;",106],["\"missing space after $1 definition\\n\" . $herecurr) &&",102],["\"missing space after return type\\n\" . $herecurr);",93],["croak (\"You're missing something\") if $var eq $NULL_STRING;",90],["\"missing space after $1 definition\\n\" . $herecurr);",90],["# declined it, i.e defined some charset where it is missing.",136]],"useCount":6092},{"word":"mktables","context":[["# This file is built by mktables.PL from e.g. Unicode.301.",239],["# This file is machine-generated by lib/unicore/mktables from the Unicode",5126],["# This file is machine-generated by mktables from the Unicode",4479],["# This file is built by mktables from e.g. UnicodeData.txt.",2362],["# This file is built by ./mktables from e.g. UnicodeData.txt.",319]],"useCount":12525},{"word":"mode","context":[["if ($mode eq \"TEXT\") {",272],["#   mode: cperl",362],["mtr_add_arg($$args, \"--mode=execute\");",400],["# In mailback mode only produce a report in the negative, for",300],["available => 1, mode => \"user\", dist_req_build => [],",202],["# This is not a patch, and we are are in 'no-patch' mode so",300],["} elsif ($mode eq \"XML-WEB\") {",231],["if ($line =~ /^new (file )?mode.*[7531]\\d{0,2}$/) {",252],["} elsif ($mode eq \"RTF\") {",238],["} elsif ($mode eq \"CPP\") {",238]],"useCount":16226},{"word":"module","context":[["$dbh->do(\"INSERT INTO `letter` (module, code, name, title, content, is_html)",124],[":- module(",692],["module     => $module,",68],["(module, code, name, title, content)",175],["# Functions for parsing this module's logs",123],["# Converts logged information from this module into human-readable form",120],["INSERT INTO `letter` (`module`, `code`, `name`, `title`, `content`) VALUES",101],["# The module implements \"4-bit\" GCM GHASH function and underlying",93],["my $module = shift;",78],["my $module;",75]],"useCount":11902},{"word":"modules","context":[["### modules",142],["# find Koha's Perl modules",442],["# Koha modules used",189],["# standard or CPAN modules used",130],["use lib \"/httpd/modules\";",85],["#Load the ALEXA modules",75],["my @modules;",57],["# CPAN modules",59],["## load Koha modules",60],["foreach my $module (keys(%modules)) {",68]],"useCount":8053},{"word":"more","context":[["=head2 For more information:",176],["can be specified more then once",149],["# for more details.",707],["# more directory relative to \"mysql-test\" gives us a usable base",145],["#  See the \"MySQL Test framework manual\" for more information",145],["--subjective, --strict     enable more subjective tests",276],["# more than 8 must use tabs.",278],["# If we are about to drop off the end, pull in more",300],["# and COPYING for more information, or see http://slashcode.com/.",374],["# more details.",130]],"useCount":11597},{"word":"mov","context":[["mov\t120($context),%rax\t# pull context->Rax",492],["mov\t-8(%rax),%rbx",483],["mov\t152($context),%rax\t# pull context->Rsp",496],["mov\t-16(%rax),%rbp",465],["mov\t248($context),%rbx\t# pull context->Rip",501],["mov\t%rdx,$A[0]",384],["mov\t\tr5, $rounds\t\t\t@ pass rounds",390],["mov\t-24(%rax),%r12",396],["mov\t$ai,%rax",432],["mov\t\tr0, sp",598]],"useCount":110765},{"word":"movaps","context":[["movaps\t-0x78(%rax),%xmm12",96],["movaps\t-0x98(%rax),%xmm10",96],["movaps\t0x20(%rsp),%xmm8",97],["movaps\t%xmm7,0x10(%rsp)",202],["movaps\t%xmm6,(%rsp)",188],["movaps\t%xmm9,0x30(%rsp)",132],["movaps\t%xmm8,0x20(%rsp)",132],["movaps\t(%rsp),%xmm6",130],["movaps\t0x10(%rsp),%xmm7",109],["movaps\t0x30(%rsp),%xmm9",97]],"useCount":14305},{"word":"movdqa","context":[["movdqa\t%xmm4, %xmm1",102],["movdqa\t@XMM[15], 0x20(%rbp)\t# put aside IV",84],["movdqa\t%xmm5, %xmm3",102],["movdqa\t$b,$t1",81],["movdqa\t$twres,$twtmp",100],["movdqa\t%xmm5, %xmm2",102],["movdqa\t%xmm4, %xmm3",102],["movdqa\t%xmm5, %xmm1",102],["&movdqa\t\t($T3,&QWP(0,$const));",114],["movdqa\t%xmm4, %xmm2",119]],"useCount":13549},{"word":"movdqu","context":[["movdqu\t@XMM[4], 0x20($out)",189],["movdqu\t0x10($inp), @XMM[1]",99],["movdqu\t@XMM[3], 0x40($out)",139],["movdqu\t@XMM[6], 0x20($out)",228],["movdqu\t@XMM[7], 0x50($out)",234],["movdqu\t@XMM[1], 0x10($out)",478],["movdqu\t@XMM[0], 0x00($out)\t# write output",514],["movdqu\t@XMM[2], 0x40($out)",156],["movdqu\t@XMM[6], 0x30($out)",164],["movdqu\t@XMM[4], 0x30($out)",192]],"useCount":10872},{"word":"movq","context":[["movq\t%rdx, %rbx",130],["movq\t56(%rsp), %r15",91],["movq\t16(%rsp), %r10",91],["&movq\t($tmp,$Zhi);",105],["movq\t32(%rsp), %r12",91],["movq\t40(%rsp), %r13",91],["movq\t48(%rsp), %r14",91],["movq\t8(%rsp), %r9",91],["movq\t56($inp), %rax",104],["movq\t%rdx, %r11",91]],"useCount":10096},{"word":"movups","context":[["&movups\t(&QWP(0x20,$out),$inout2);",204],["movups\t$inout4,0x40($out)",152],["&movups\t(&QWP(0x30,$out),$inout3);",156],["movups\t($inp),$inout0",168],["movups\t$inout3,0x30($out)",184],["movups\t$inout2,0x20($out)",218],["movups\t$inout0,($out)",246],["&movups\t(&QWP(0x10,$out),$inout1);",252],["movups\t$inout1,0x10($out)",268],["&movups\t(&QWP(0,$out),$inout0);",312]],"useCount":6882},{"word":"msg","context":[["my $msg = \"\";",166],["my $msg;",325],["add_ok $msg;",163],["add_warning $msg;",179],["die $msg;",187],["my ($type, $msg) = @_;",261],["print $msg;",154],["my $msg = shift;",933],["my ($msg) = @_;",350],["add_critical $msg;",172]],"useCount":15301},{"word":"mtr_add_arg","context":[["mtr_add_arg($args, \"--defaults-file=%s\", $path_config_file);",1484],["mtr_add_arg($args, \"--no-defaults\");",799],["mtr_add_arg($args, \"--defaults-group-suffix=%s\", $mysqld->after('mysqld'));",590],["mtr_add_arg($$args, \"--mode=execute\");",400],["mtr_add_arg($args, \"--defaults-group-suffix=%s\", $cluster->suffix());",356],["mtr_add_arg($args,",287],["mtr_add_arg($args, \"--record\");",294],["mtr_add_arg($args, \"--user=root\");",297],["mtr_add_arg($args, \"--silent\");",302],["mtr_add_arg($args, \"--user=%s\", $opt_user);",350]],"useCount":23911},{"word":"mtr_error","context":[["mtr_error(\"No, don't remove the vardir when running with --extern\")",147],["mtr_error(\"Can't use --mem and --tmpdir at the same time \")",147],["mtr_error(\"Couldn't find support for SSL\");",147],["mtr_error(\"The destination for symlink $opt_vardir does not exist\")",208],["mtr_error(\"Could not find version of MySQL\") unless $mysql_version_id;",227],["or mtr_error(\"Could not get [embedded] section\");",238],["mtr_error(\"MTR_BUILD_THREAD number results in a port\",",147],["mtr_error(\"Writable 'var' directory is needed, use the \" .",147],["mtr_error(\"Can't use --mem and --vardir at the same time \")",147],["mtr_error(\"Unknown argument \\\"$debugger\\\" passed to --debugger\");",147]],"useCount":9242},{"word":"mtr_report","context":[["mtr_report(\"Turning on valgrind for mysqltest and mysql_client_test only\");",145],["mtr_report(\"Turning on valgrind with callgrind for mysqld(s)\");",145],["mtr_report(\"Turning on valgrind for mysqld(s) only\");",145],["mtr_report(\"--mem not supported on Windows, ignored\");",145],["mtr_report(\"Turning on valgrind for all executables\");",147],["mtr_report(\"Running valgrind with options \\\"\",",147],["mtr_report(\" - skipping ndbcluster(--skip-ndbcluster)\");",156],["mtr_report(\"MySQL Version $1.$2.$3\");",227],["mtr_report();",357],["mtr_report(\"Got $proc\");",357]],"useCount":10657},{"word":"mtr_verbose","context":[["mtr_verbose(\"result: $result, file_mode: $file_mode\");",147],["mtr_verbose(\"Started $proc\");",507],["mtr_verbose(\"cmd: $cmd\");",183],["mtr_verbose(\"unlink($opt_vardir)\");",175],["mtr_verbose(\"Creating $opt_vardir\");",147],["mtr_verbose(\"Removing $opt_mem\");",147],["mtr_verbose(\"Removing \" . readlink($opt_vardir));",147],["mtr_verbose(\"opt_vardir: $opt_vardir\");",147],["mtr_verbose(\"Creating $opt_mem\");",147],["mtr_verbose(\"Removing $opt_vardir/\");",294]],"useCount":8099},{"word":"multiple","context":[["## # check for multiple declarations, allowing for a function declaration",286],["\"Macros with multiple statements should be enclosed in a do - while loop\\n\" . \"$herectx\");",169],["-multiple=>0,",166],["-multiple => 0",182],["##\t\t\t\t     \"declaring multiple variables together should be avoided\\n\" . $herecurr);",184],["\"multiple assignments should be avoided\\n\" . $herecurr);",193],["# check for multiple semicolons",215],["-multiple => 0 );",145],["# check for multiple assignments",292],["-multiple => 0,",290]],"useCount":6337},{"word":"must","context":[["if ($name =~ /[^\\w \\-]/i) { ##has \"must quote\" chars",388],["# --datadir must exist, mysqld will chdir into it",144],["# Any use must be runtime checked with $^V",158],["# , must have a space on the right.",241],["# more than 8 must use tabs.",278],["# edge is a close comment then we must be in a comment",300],["must be specified using name-value pair notation",119],["# Check for }<nl>else {, these must be at the same",303],["# at the beginning of a line any tabs must come first and anything",278],["# Yes, we must cut off the final newline from the final line",129]],"useCount":11539},{"word":"my","context":[["my ($self) = @_;",2072],["my $line = $_;",2145],["my $args;",2755],["my $dbh = C4::Context->dbh;",3666],["my $i = 0;",4002],["my $line;",4054],["my $self = shift;",7009],["my $count = 0;",3335],["my $i;",2939],["my $file = shift;",2776]],"useCount":1349604},{"word":"myconfig","context":[["$form->parse_amount( \\%myconfig, $form->{\"${_}_$i\"} );",126],["user => \\%myconfig,",343],["$closedto  = $form->datetonum( \\%myconfig, $form->{closedto} );",112],["$form->{$_} = $form->parse_amount( \\%myconfig, $form->{$_} );",87],["AA->get_name( \\%myconfig, \\%$form );",78],["$form->{templates} = \"$myconfig{templates}\";",68],["\\%myconfig,         $form->{currency},",68],["$transdate = $form->datetonum( \\%myconfig, $form->{transdate} );",114],["my %myconfig = %main::myconfig;",458],["my %myconfig = %main::myconfig;",458]],"useCount":8041},{"word":"mysql","context":[["# Add the offical mysql system tables",145],["# more directory relative to \"mysql-test\" gives us a usable base",145],["#  mysql-test-run.pl",145],["# Some users creates a soft link in mysql-test/var to another area",145],["# is the parent directory of the \"mysql-test\" directory. For source",145],["# directory. And we install \"/usr/share/mysql-test\". Moving up one",145],["#  http://dev.mysql.com/doc/mysqltest/en/index.html",147],["use DBD::mysql;",161],["# Running with \"var\" in mysql-test dir",290],["$dbh = DBI->connect(\"DBI:mysql:$opt_db:$opt_host\",",487]],"useCount":13747},{"word":"mysqld","context":[["my $mysqld=            shift;",290],["# write init file for mysqld or client",272],["my $mysqld=   shift;",263],["if ( defined $mysqld->{'proc'} )",237],["mark_log($mysqld->value('#log-error'), $tinfo);",236],["mysqld_arguments($mysqld_args, $mysqld, $extra_opts);",236],["my $extra_opts= get_extra_opts($mysqld, $tinfo);",354],["mtr_add_arg($args, \"--defaults-group-suffix=%s\", $mysqld->after('mysqld'));",590],["mtr_add_arg($args, \"--defaults-group-suffix=%s\", $mysqld->after('mysqld'));",590],["foreach my $mysqld ( mysqlds() )",918]],"useCount":28435},{"word":"mysqli","context":[["\"ext/mysqli/tests/mysqli_field_seek.phpt\",",23],["\"ext/mysqli/tests/015.phpt\",",23],["\"ext/mysqli/tests/024.phpt\",",23],["\"ext/mysqli/tests/004.phpt\",",23],["\"ext/mysqli/tests/066.phpt\",",23],["\"ext/mysqli/tests/056.phpt\",",23],["\"ext/mysqli/tests/mysqli_close_oo.phpt\",",23],["\"ext/mysqli/tests/mysqli_change_user_set_names.phpt\",",23],["\"ext/mysqli/tests/mysqli_change_user.phpt\",",23],["\"ext/mysqli/tests/mysqli_ps_select_union.phpt\",",23]],"useCount":8594},{"word":"mysqltest","context":[["#  http://dev.mysql.com/doc/mysqltest/en/index.html",147],["valgrind              Run the \"mysqltest\" and \"mysqld\" executables using",145],["client-debugger=NAME  Start mysqltest in the selected debugger",145],["mtr_report(\"Turning on valgrind for mysqltest and mysql_client_test only\");",145],["mtr_add_arg($args, \"%s/log/mysqltest.strace\", $opt_vardir);",145],["# export MYSQL_TEST variable containing <path>/mysqltest <args>",145],["# Start the mysqltest processes in parallel to save time",354],["# It's not mysqltest that has exited, kill it",236],["# Test case failure reported by mysqltest",145],["# if script decided to run mysqltest cluster _is_ installed ok",214]],"useCount":6081},{"word":"n","context":[["my $herevet = \"$here\\n\" . cat_vet($rawline) . \"\\n\";",1470],["print \"\\n\";",23189],["\\n\");",3072],["printf $outfh \"\\n\";",2505],["print \"\\n\\n\";",1807],["$n++;",1767],["print \"</tr>\\n\";",1389],["print STDERR \"\\n\";",1598],["my $herevet = \"$here\\n\" . cat_vet($rawline) . \"\\n\";",1470],["print \"\\n\\n\";",1807]],"useCount":617773},{"word":"name","context":[["my $name;",927],["my $name = $1;",1573],["$name = \"\\\"$name\\\"\";",503],["# the name or existence of this file are subject to change without notice.",3636],["# name or existence of this file are subject to change without notice.  Don't",6892],["my $name = shift;",1520],["$name = $1;",943],["$name =~ s/^\\\"|\\\"$//g;",697],["my ($name) = @_;",551],["printf $outfh $pcol->{format}, $pcol->{name};",646]],"useCount":146255},{"word":"names","context":[["# Allow only alpanumerics pluss _ - + . in combination names,",119],["# Iterate through artist IDs and names",86],["# file names for figures",94],["my %names;",124],["list of suite names.",148],["our @opt_cases;                  # The test cases names in argv",149],[");    # we show only the TMPL_VAR names $op",164],["my @names = ();",180],["foreach my $name (@names) {",195],["my @names;",198]],"useCount":8955},{"word":"nbsp","context":[["&nbsp;",314],["2, \"&nbsp;\" )",86],["print $INDEX \" &nbsp;&nbsp;&nbsp; \";",80],["print( $frame? \"</td></tr>\\n\" : \" &nbsp; \" );",104],["&nbsp; &nbsp; &nbsp;",125],["&nbsp; &nbsp; &nbsp;",125],["&nbsp; &nbsp; &nbsp;",125],["print \"<td>&nbsp;</td>\";",133],["<td>&nbsp;</td>",247],["for (@column_index) { $column_data{$_} = \"<td>&nbsp;</td>\" }",255]],"useCount":15598},{"word":"ne","context":[["if ($2 ne '') {",597],["if ($1 ne '++' && $1 ne '--') {",300],["if ($err ne '') {",300],["$a = 'V' if ($elements[$n] ne '');",303],["if (abs_path($0) ne abs_path(__FILE__)) {",449],["$c = 'V' if ($elements[$n + 2] ne '');",303],["return ($cmt ne '');",303],["if (!$in_comment && $current_comment ne '') {",303],["if ($from ne $to) {",308],["if ($1 ne '++' && $1 ne '--') {",300]],"useCount":39029},{"word":"need","context":[["debug(\" Stop reading history file. Got all we need.\");",184],["# We need \\b after 'init' otherwise 'initconst' will cause a false positive in a check",258],["# same line do not need a level, so we use the current block context",285],["# blank context lines so we need to count that too.",303],["#need space before brace following if, while, etc",303],["# All the others need spaces both sides.",303],["# Valgrind need to be run with debug libraries otherwise it's almost",149],["# we need it when valgrinding or debugging non installed binary",149],["mtr_verbose(\"No need to create '$opt_vardir' it already exists\");",146],["# single-statement macros do not need to be enclosed in do while (0) loop,",138]],"useCount":12282},{"word":"new","context":[["my $R = Statistics::R->new();",457],["$CommonObject{ConfigObject} = Kernel::Config->new();",464],["my $ua = LWP::UserAgent->new;",664],["$CommonObject{LogObject}    = Kernel::System::Log->new(",509],["$CommonObject{EncodeObject} = Kernel::System::Encode->new(%CommonObject);",517],["my $proc= My::SafeProcess->new",594],["my $cgi = new CGI;",740],["my $query = new CGI;",1638],["sub new {",1652],["my $input = new CGI;",1973]],"useCount":71705},{"word":"next","context":[["next",1081],["next LINE;",762],["next if /^\\s*$/;",730],["next ;",513],["next();",922],["next;",55939],["#next;",472],["next if ($line =~ m/^\\s*$/);",407],["next if /^#/;",638],["next CMD;",813]],"useCount":115839},{"word":"nl","context":[["E-mail:        jan@swi.psy.uva.nl",798],["nl(Stream),",127],["nl,",1403],["E-mail:        J.Wielemaker@uva.nl",199],["WWW:           http://www.swi.psy.uva.nl/projects/xpce/",688],["E-mail:        J.Wielemaker@vu.nl",495],["E-mail:        J.Wielemaker@cs.vu.nl",217],["E-mail:        wielemak@science.uva.nl",259],["nl.",437],["# Check for }<nl>else {, these must be at the same",303]],"useCount":7638},{"word":"no","context":[["# Return immediately if no check proceess was started",357],["## no critic",346],["# unary ++ and unary -- are allowed no space on one side.",303],["#no spaces allowed after \\ in define",303],["no strict 'refs';",790],["mtr_add_arg($args, \"--no-defaults\");",799],["no warnings;",366],["# no C99 // comments",301],["# Bail if there is no further context.",300],["no warnings 'uninitialized';",378]],"useCount":40084},{"word":"node","context":[["'cmdname' => 'node',",3964],["exp_name        => \"node\",",208],["@node Top",188],["exp_name\t=> \"node\",",145],["'text' => 'Entry for index `fn\\' outside of any node',",121],["'node' => {},",916],["my $node = shift;",269],["# http://www.perlmonks.org/index.pl?node=perltie",128],["my $node;",125],["'text' => 'entry for index `fn\\' outside of any node',",122]],"useCount":13584},{"word":"non","context":[["if (which($net_effect < 0)->nelem > 0) { #which gets indices of non-0 values, nelem get nr of elements",190],["# ignore non-hunk lines and lines being removed",294],["| [\\xC2-\\xDF][\\x80-\\xBF]             # non-overlong 2-byte",128],["} else { # for non-tagged reactions",126],["[\\xC2-\\xDF][\\x80-\\xBF]               # non-overlong 2-byte",176],["# we need it when valgrinding or debugging non installed binary",149],["view-protocol         Create a view to execute all non updating queries",147],["# cpp #define statements have non-optional spaces, ie",298],["# check for whitespace before a non-naked semicolon",140],["$rawline =~ m@^\\+[ \\t]*.+\\*\\/[ \\t]*$@) {\t#non blank */",129]],"useCount":7126},{"word":"none","context":[["result => 'none',",146],["a.summary-letter {text-decoration: none}",290],["ul.no-bullet {list-style: none}",290],["# none on the first line, and are going to readd them",296],["if ($call->{streamflag} ne \"none\") {",232],["result   => 'none',",217],["# there should be none so make sure to warn",119],["#  @INPUT         : none",132],["'try'   => 'none',",138],["#\t\tnone",202]],"useCount":6541},{"word":"noresave","context":[["$noresave{$key} = \"$nosave\";",6902]],"useCount":6902},{"word":"normalized","context":[["'normalized' => 'Text'",95],["'normalized' => 'chapter'",252],["'normalized' => 'Top',",267],["'normalized' => 'Top'",2102],["'normalized' => 'first'",144],["'normalized' => 'chapter-node'",113],["'normalized' => 'node'",112],["'normalized' => ''",83],["'normalized' => 'third-node'",73],["'normalized' => 'second-node'",109]],"useCount":5897},{"word":"nosave","context":[["$nosave = 1;",20],["print FILE $line if(!$nosave);",34],["if($nosave) {",40],["$noresave{$key} = \"$nosave\";",6902]],"useCount":6996},{"word":"not","context":[["# check we are in a valid source file if not then ignore this hunk",303],["# Indicate the exe should not be started",618],["library does not by itself cause the resulting executable to be covered",1583],["# if/while/etc brace do not go on next line, unless defining a do while loop,",303],["next if ($rate->sum == 0); # do not include reactions that do not occur",349],["next if ($rate->sum == 0); # do not include reactions that do not occur",349],["print \"not ok $test\\n\";",371],["# '*'s should not have spaces between.",584],["# Should not end with a space.",584],["::rptMsg($key_path.\" not found.\");",588]],"useCount":91590},{"word":"notice","context":[["# As we go, we notice \"nearby\" commit times and store them together",33],["(dev|netdev|netif)_(printk|dbg|vdbg|info|warn|err|notice|alert|crit|emerg|WARN)|",35],["# name or existence of this file are subject to change without notice.  Don't",6892],["# the name or existence of this file are subject to change without notice.",3636],["Priority => 'notice',",386],["# decision by deleting the provisions above and replace them with the notice",116],["# notice in a future Perl version.  Don't use it directly.  Instead, its",63],["pr_(debug|dbg|vdbg|devel|info|warning|err|notice|alert|crit|emerg|cont)|",50],["(13, 'edit_notice_status_triggers', 'Set notice/status triggers for overdue items'),",41],["%        Include this notice in any copy made.",35]],"useCount":12226},{"word":"now","context":[["my $now = time;",259],["my $now = time();",258],["say format_date(DateTime->now), \" \", $message;",204],["$now = current_time();",152],["# now $scalar contains the pod from $podfile you can see this below",128],["$now = time;",123],["# Send it back, now with results set",119],["# --help will not reach here, so now it's safe to assume we have binaries",119],["# Make sure the safe_process also exits from now on",118],["my $now;",97]],"useCount":9929},{"word":"np","context":[["['Jean', nam, 'Jean', lit(np(_,_,_)),",111],["mov\t-16($np,$j,8),%rax",116],["mov\t-8($np,$j,8),%rax",116],["$np->add_arg(",139],["add\t$A[0],$N[0]\t\t# np[j]*m1+ap[j]*bp[0]",144],["add\t$A[1],$N[1]\t\t# np[j]*m1+ap[j]*bp[0]",144],["mov\t($np,$j,8),%rax",162],["mulq\t$m1\t\t\t# np[0]*m1",192],["mov\t($np),%rax",192],["mulq\t$m1\t\t\t# np[j]*m1",728]],"useCount":10752},{"word":"null","context":[["metricValue => \"null\",",240],["output        => '/dev/null',",119],["error         => '/dev/null'",119],["null    => 'NULL',",826],["null  => 'NULL',",157],["null => 'NULL',",180],["if (`$ENV{CC} -Wa,-v -c -o /dev/null -x assembler /dev/null 2>&1`",136],["if (`$ENV{CC} -Wa,-v -c -o /dev/null -x assembler /dev/null 2>&1`",136],["open($FILE, '-|', \"diff -u /dev/null $filename\") ||",292],["null    => 'NOT NULL',",339]],"useCount":6902},{"word":"num","context":[["my $num = 0;",426],["$num++;",501],["Select the identifier from column num",612],["my $num = shift;",319],["-c num",306],["=item -c num",306],["$st=$ed+1;$num++;",173],["$num = 0;",206],["neg\t$num",223],["return $num;",276]],"useCount":23855},{"word":"number","context":[["% Frame number: 338",245],["% Frame number: 328",245],["% Frame number: 332",245],["% Frame number: 300",245],["my ($r_number, $parent) = split /_/, $reaction; #remove tag from reaction number",249],["# track the line number as we move through the hunk, note that",303],["'number' => 1,",517],["'number' => 1",559],["% Frame number: 319",245],["% Frame number: 340",245]],"useCount":212136},{"word":"o","context":[["} elsif ($cur =~ /^($Operators)/o) {",300],["} elsif ($cur =~ /(^.)/o) {",300],["} elsif ($cur =~ /^(sizeof)\\s*(\\()?/o) {",300],["if ($cur =~ /^(\\s+)/o) {",300],["} elsif ($cur =~ /^($Ident|$Constant)/o) {",300],["} elsif ($cur =~ /^(\\()/o) {",300],["} elsif ($cur =~ /^(\\\\\\n)/o) {",300],["} elsif ($cur =~ /^(\\))/o) {",300],["} elsif ($cur =~ /^($Assignment)/o) {",300],["my @o;",314]],"useCount":25621},{"word":"obj","context":[["$obj = Metric->new(\trrdIndex => 1,",141],["$obj = Metric->new(\trrdIndex => 0,",207],["my $obj;",113],["my ($obj) = @_;",107],["my $obj = shift;",95],["$obj = Metric->new(\trrdIndex => 2,",95],["$obj->{'id'} = int(rand(2**16));",85],["$res = $client->call($config{eiskaltURL}, $obj);",85],["if ($config{debug} > 0) { print(\"===Request===\\n\".Dumper($obj).\"\\n\") };",83],["$service->addMetric($obj);",589]],"useCount":6347},{"word":"object","context":[["foreach my $field (@{$object->{fields}}) {",86],["# Inputs: 0) ExifTool object reference",150],["# Get log from server identified from its $proc object, from named test",119],["</object>",117],["# parse_webmin_log(user, script, action, type, object, &params)",108],["\"> deprecated. You should replace this object with a\\n\".",90],["# execute object",78],["# create new object",78],["#  @PRIVACY & USE : PUBLIC, Must be used as an object instance function",77],["# object.",67]],"useCount":9088},{"word":"oci8","context":[["\"ext/oci8/tests/connect_without_oracle_home.phpt\",",23],["\"ext/oci8/tests/coll_011.phpt\",",23],["\"ext/oci8/tests/coll_015.phpt\",",23],["\"ext/oci8/tests/coll_017_func.phpt\",",23],["\"ext/oci8/tests/bug44206.phpt\",",23],["\"ext/oci8/tests/lob_008.phpt\",",23],["\"ext/oci8/tests/lob_017.phpt\",",23],["\"ext/oci8/tests/bug27303_1.phpt\",",23],["\"ext/oci8/tests/define3.phpt\",",23],["\"ext/oci8/tests/connect_scope_try3.phpt\",",23]],"useCount":6948},{"word":"of","context":[["# This file is part of Koha.",6644],["# name or existence of this file are subject to change without notice.  Don't",6892],["# Use Unicode::UCD::prop_invlist() to access the contents of this file.",826],["# any of the following regular expression constructs:",1459],["# A colon can be substituted for the equals sign, and anything to the left of",2251],["# perluniprops.pod should be consulted for the syntax rules for any of these,",2468],["# The format of the lines of this file is: START\\tSTOP\\twhere START is the",2478],["# The format of the lines of this file is: START\\tSTOP\\twhere START is the",2478],["# starting code point of the range, in hex; STOP is the ending point, or if",2478],["# the name or existence of this file are subject to change without notice.",3636]],"useCount":192653},{"word":"off","context":[["$off++;",1929],["my ($linenr, $remain, $off) = @_;",1201],["my $off = 0;",635],["substr($res, $off, 2, \"$;$;\");",599],["if ($off >= $len) {",599],["substr($res, $off, 1, $c);",598],["ctx_statement_block($linenr, $remain, $off);",598],["($statement, $condition, $linenr, $remain, $off, $level) =",598],["substr($res, $off, 1, $;);",580],["($dstat, $dcond, $ln, $cnt, $off) =",431]],"useCount":35318},{"word":"offset","context":[["my $offset = 0;",271],["my $offset =",294],["$offset} = 1;",294],["$line = $rawlines[$offset++];",294],["my $offset = $linenr - 1;",294],["$suppress_ifbraces{$ln + $offset} = 1;",298],["#print \"COND<$cond> whitespace<$whitespace> offset<$offset>\\n\";",298],["my $offset = statement_rawlines($whitespace) - 1;",298],["#print \"COND<$cond> whitespace<$whitespace> offset<$offset>\\n\";",298],["$herectx .= \"$rawlines[$ln + $offset]\\n[...]\\n\";",298]],"useCount":14606},{"word":"ok","context":[["#  0 ok",238],["# if script decided to run mysqltest cluster _is_ installed ok",214],["my $ok = 1;",279],["ok(",293],["print \"not ok $test\\n\";",371],["$ok = 0;",508],["if ($ok == 0) {",605],["ok(1);",670],["my $ok = 0;",806],["$ok = 1;",1216]],"useCount":14178},{"word":"old","context":[["# Remove the old gdbinit file",300],["# Remove old delimiter from end of new",119],["# Remove old datadirs",119],["# Remove the old pidfile if any",119],["# Restore old ENV",119],["mtr_report(\"Removing old var directory...\");",119],["# check for old HOTPLUG __dev<foo> section markings",127],["# Remove old files produced by mysqltest",145],["# Remove old log files",149],["# won't point at an old directory",149]],"useCount":6482},{"word":"on","context":[["# Find out what is on the end of the line after the",595],["# By default examples are set to die on any server returned fault.",446],["\"trailing statements should be on next line\\n\" . $herecurr);",386],["# unary ++ and unary -- are allowed no space on one side.",303],["#make up the handle for any error we report on this line",303],["# or if that brace on the next line is for something else",303],["# check spacing on square brackets",303],["# if/while/etc brace do not go on next line, unless defining a do while loop,",303],["# Catch a comment on the end of the line itself.",303],["# * goes on variable not on type",303]],"useCount":57223},{"word":"one","context":[["# omitted, the range has just one code point.  Numbers in comments in",2478],["# directory. And we install \"/usr/share/mysql-test\". Moving up one",145],["# this version of Unicode uses this file.  Each one is listed in a separate",145],["# Testcase itself tell us to skip this one",149],["# memory.h: ARM has a custom one",243],["--debug KEY=[0|1]          turn on/off debugging of KEY, where KEY is one of",280],["--terse                    one line per report",280],["# we assume the first bad printk is the one to report.",284],["# one does, and continue as if the #endif was not here.",299],["# unary ++ and unary -- are allowed no space on one side.",303]],"useCount":23127},{"word":"only","context":[["--test-only=WORD           report only warnings/errors containing WORD",279],["# This file is for internal use by core Perl only.  The format and even the",5878],["# check for new typedefs, only function parameters and sparse annotations",275],["--test-only=WORD           report only warnings/errors containing WORD",279],["--mailback                 only produce a report in case of warnings/errors",280],["# simplify matching -- only bother with positive lines.",297],["# In mailback mode only produce a report in the negative, for",300],["# definitions in global scope can only start with types",300],["# This file is for internal use by the Perl program only.  The format and even",4650],["'test-only=s'\t=> \\$tst_only,",296]],"useCount":30330},{"word":"op","context":[["} elsif ($op eq '++' or $op eq '--') {",303],["if (($op eq '<' &&",296],["#\t\t\t\t} elsif ($op =~ /^$;+$/) {",296],["} elsif ($op eq ';') {",299],["} elsif ($op eq '!' || $op eq '~' ||",300],["} elsif ($op eq '!' || $op eq '~' ||",300],["} elsif ($op eq '++' or $op eq '--') {",303],["} elsif ($op eq ',') {",303],["my $op = $elements[$n + 1];",303],["} elsif ($op eq '//') {",303]],"useCount":30976},{"word":"open","context":[["# check for initialisation to aggregates open brace on the next line",302],["my ($linenr, $remain, $outer, $open, $close, $off) = @_;",302],["##print \"C<$c>L<$level><$open$close>O<$off>\\n\";",302],["open OUT,\"| \\\"$^X\\\" $xlate $flavour $output\";",345],["open $ih, \"<\", $input_file or die \"Cannot open input file $input_file: $!\";",380],["open $ih, \"<\", $input_file or die \"Cannot open input file $input_file: $!\";",380],["#     open($outfh, \">\" , $outfnm) || die $!;",391],["# Need a space before open parenthesis after if, while etc",304],["} elsif ($c eq $open) {",302],["open STDOUT,\">$output\";",509]],"useCount":59841},{"word":"opt","context":[["$verbose = $verbose_levels{$opts{$opt}};",123],["if ($opts{$opt} =~ m/^[0123]$/)",125],["$verbose = $opts{$opt};",125],["my %opt;",398],["my ($opt, $value)= @_;",267],["foreach my $opt (%opts)",130],["use lib \"/opt/vyatta/share/perl5/\";",172],["if (defined($opt{\"LOG_FILE\"})) {",169],["# Allow --skip-core-file to be set in <testname>-[master|slave].opt file",149],["my $opt = shift;",139]],"useCount":15303},{"word":"opt_vardir","context":[["my $errfile= \"$opt_vardir/tmp/$name.err\";",357],["rmtree(\"$opt_vardir/\");",238],["if ! -d readlink($opt_vardir);",212],["if ( ! -d $opt_vardir )",298],["if ( $opt_vardir eq $default_vardir )",298],["mtr_verbose(\"Removing $opt_vardir/\");",294],["unlink($opt_vardir);",265],["my $log_file_name= $opt_vardir.\"/log/\".$tinfo->{shortname}.\".log\";",250],["vardir          => $opt_vardir,",238],["my $gdb_init_file= \"$opt_vardir/tmp/gdbinit.$type\";",238]],"useCount":14487},{"word":"option","context":[["valgrind-option=ARGS  Option to give valgrind, replaces default option(s),",149],["usage(\"Invalid option \\\"$arg\\\"\");",149],["valgrind-options=ARGS Deprecated, use --valgrind-option",149],["$option .= \"\\n<br>\" if $option;",169],["$option .= \"\\n<br>\" if $option;",169],["<td>$option</td>",187],[":- use_module(library(option)).",335],["$option .= \"\\n<br>\" if ($option);",560],["$option .= \"\\n<br>\" if ($option);",560],["valgrind-option=ARGS  Option to give valgrind, replaces default option(s),",149]],"useCount":45647},{"word":"options","context":[["# Get and check command line options",454],["RunCommand($cmd,$options{'noexecute'},$options{'quiet'});",192],["my $options = shift;",193],["my @options;",196],["# Default options",242],["# Get options",291],["options:",354],["$dbh->do(\"INSERT INTO `systempreferences` (variable,value,options,explanation,type)",360],["my %options;",458],["# get options",479]],"useCount":33937},{"word":"opts","context":[["my ($opts,%args) = @_;",501],["my $opts;",133],["my $opts = shift;",135],["GetOptions(\\%opts,",176],["return $opts;",177],["my %opts = (",181],["my %opts = ();",209],["run_view_test($opts,",308],["my %opts = @_;",309],["my %opts;",1016]],"useCount":17807},{"word":"or","context":[["# starting code point of the range, in hex; STOP is the ending point, or if",2478],["# Redistribution and use in source and binary forms, with or without",921],["or",615],["the documentation and/or other materials provided with the",644],["Redistribution and use in source and binary forms, with or without",745],[") or pod2usage(2);",760],["# the equals (or colon) can be combined with anything to the right.  Thus,",2251],["# including if adding or subtracting white space, underscore, and hyphen",2480],["# the name or existence of this file are subject to change without notice.",3636],["# name or existence of this file are subject to change without notice.  Don't",6892]],"useCount":146200},{"word":"order","context":[["order => ++$order,",298],["#@loopcol ensures the order for columns is common with column titles",129],["for (my $order = 0; $order < 20; $order++) {",60],["$order         = 1;",72],["arg(5,Att,order(OrdX)),",72],["\"type '$tmp' should be specified in [[un]signed] [short|int|long|long long] order\\n\" . $herecurr);",73],["# given last on command line should win, but that order is",78],["# All servers are going down, use some kind of order to",83],["selected tests, in the order they would be run.",119],["order => ++$order,",298]],"useCount":11639},{"word":"org","context":[["WWW:           http://www.swi-prolog.org",1432],["# details see http://www.openssl.org/~appro/cryptogams/.",1012],["L<The SEED Project|http://www.theseed.org>",662],["# Written by Andy Polyakov <appro@openssl.org> for the OpenSSL",647],["developers list at <http://lists.ensembl.org/mailman/listinfo/dev>.",512],["<helpdesk.org>.",377],["# UTF-8 regex found at http://www.w3.org/International/questions/qa-forms-utf-8.en.php",302],["\"Use of CONFIG_EXPERIMENTAL is deprecated. For alternatives, see https://lkml.org/lkml/2012/10/23/580\\n\");",256],["# By Gerald Combs <gerald@wireshark.org>",246],["#     Web: http://www.sql-ledger.org",207]],"useCount":17608},{"word":"other","context":[["# int foo(something bar, other baz);",300],["As a special exception, if you link this library with other files,",1585],["invalidate any other reasons why the executable file might be covered by",1583],["the documentation and/or other materials provided with the",644],["# distributions, TAR binary distributions and some other packages.",149],["# other possible extensions of declaration lines",160],["plugin_parameters : other parameters added when the plugin is called by the dopop function",456],["line would contain the id. If some other column contains the id,",386],["# indent level to be relevant to each other.",303],["#    documentation and/or other materials provided with the distribution.",239]],"useCount":15203},{"word":"our","context":[["our $cnt_chk = 0;",301],["our $cnt_error = 0;",301],["our $usage = <<'END';",546],["our $cnt_error++;",301],["our @typeList = (",301],["our $cnt_warn = 0;",301],["our $cnt_warn++;",301],["our $clean = 1;",302],["our %args = (",358],["our $clean = 0;",892]],"useCount":36576},{"word":"out","context":[["vst1.8\t\t{@XMM[0]-@XMM[1]}, [$out]!",364],["my @out;",400],["sub out {",471],["movdqu\t@XMM[0], 0x00($out)\t# write output",514],["# Find out how long the conditional actually is.",588],["# Find out what is on the end of the line after the",595],["my $out;",672],["close $out;",786],["return $out;",793],["movdqu\t@XMM[1], 0x10($out)",478]],"useCount":76068},{"word":"outfh","context":[["printf $outfh \"product,\";",287],["printf $outfh \"\\n\";",2505],["close($outfh);",1523],["printf $outfh $pcol->{format}, $pcol->{name};",646],["#     close($outfh);",510],["printf $outfh \",%s\", $key;",406],["#     open($outfh, \">\" , $outfnm) || die $!;",391],["#     printf $outfh \"\\n\";",374],["#         printf $outfh $pcol->{format}, $pcol->{name};",238],["open($outfh, \">\" , $outfnm) || die $!;",178]],"useCount":13686},{"word":"outfile","context":[["&Pick('>', $outfile) &&",63],["die \"usage: $0 [-D toggle...] [infile [outfile]]\\n\";",62],["my $outfile;",377],["if ($outfile) {",149],["my $outfile = shift;",126],["=item -o,--outfile",79],["$outfile,",76],["unless ($outfile) {",75],["Write($outfile, $data) or $err = 1;",72],["close $outfile;",67]],"useCount":7213},{"word":"output","context":[["if ($flavour =~ /\\./) { $output = $flavour; undef $flavour; }",427],["output is to the standard output.",486],["movdqu\t@XMM[0], 0x00($out)\t# write output",514],["output is to the standard output.",486],["return $output;",493],["open STDOUT,\">$output\";",509],["output_html_with_http_headers $cgi, $cookie, $template->output;",590],["my $output;",726],["output_html_with_http_headers $input, $cookie, $template->output;",3631],["output_html_with_http_headers $query, $cookie, $template->output;",1984]],"useCount":55344},{"word":"output_html_with_http_headers","context":[["output_html_with_http_headers $cgi, $cookie, $template->output;",590],["output_html_with_http_headers $query, \"\", $template->output;",16],["output_html_with_http_headers( $cgi, $cookie, $template->output );",25],["output_html_with_http_headers(shift,shift,shift); # $query, $cookie, $template->output;",28],["output_html_with_http_headers( $input, $cookie, $template->output );",30],["output_html_with_http_headers $query, $cookie, $template->output, undef, { force_no_caching => 1 };",43],["use C4::Output qw(output_html_with_http_headers);",209],["C4::AR::Auth::output_html_with_http_headers($template, $t_params, $session);",566],["output_html_with_http_headers $query, $cookie, $template->output;",1984],["output_html_with_http_headers $input, $cookie, $template->output;",3631]],"useCount":7165},{"word":"output_no","context":[["my $output_no = $pu01->{output_no};",1425],["$output_no     = $parts[6];",376],["#     my $output_no = $pu01->{output_no};",357],["#     my $output_no = $pu01->{output_no};",357],["($output_no == AUTO_CLEAR))",334],["printf $log_fh \"OUTPUT NO: %s\\n\", $output_no;",252],["($output_no == PROD_COMPLETE_LATER))",280],["my $output_no = $pu03->{output_no};",284],["my $output_no = $pu03->{output_no};",284],["my $output_no = $pu01->{output_no};",1425]],"useCount":9190},{"word":"over","context":[["=over 3",180],["\"__packed is preferred over __attribute__((packed))\\n\" . $herecurr);",181],["$_ = \"\\n=over 4\\n\";",207],["# prefer usleep_range over udelay",237],["# Always copy over the diff marker.",299],["=over 2",1348],["=over 8",1681],["=over",3407],["=over 4",7365],["\"__aligned(size) is preferred over __attribute__((aligned(size)))\\n\" . $herecurr);",181]],"useCount":20045},{"word":"p","context":[["(!defined($p) || $p =~ /(?:\\s|\\}|\\+)/) &&",299],["(!defined($p) || $p =~ /(?:\\s|\\}|\\+)/) &&",299],["$p = $c;",300],["my $p = shift;",308],["\"-d $default_digest_file -p $default_pid_file $intf_str\",",413],["my $p;",564],["<p>",1579],["</p>",1820],["my ($self,$b,$p,$e,$rt) = @_;",208],["p(do,",263]],"useCount":32820},{"word":"pack","context":[["print FILE pack (\"C\", hex ($8)) ;",150],["$value =~ s/%([a-fA-F0-9][a-fA-F0-9])/pack(\"C\", hex($1))/eg;",120],[")->pack(",128],["print FILE pack (\"C\", hex ($4)) ;",150],["print FILE pack (\"C\", hex ($7)) ;",150],["print FILE pack (\"C\", hex ($5)) ;",150],["print FILE pack (\"C\", hex ($6)) ;",150],["print FILE pack (\"L\", hex (\"0\")) ;",923],["print FILE pack (\"C\", hex ($2)) ;",150],["print FILE pack (\"C\", hex ($3)) ;",150]],"useCount":8656},{"word":"package","context":[["#package Message;",100],["# or by downloading the timezone table package from our website",147],["my $pkg = $package{$name};",170],["foreach my $name (sort {uc($a) cmp uc($b)} keys %package) {",170],["package main;",1078],["package DAWGPAWS;",123],["my $package;",119],["This is $progname, from the Debian devscripts package, version ###VERSION###",113],["#package MyTop;",113],["package => $pkg,",101]],"useCount":13478},{"word":"page","context":[["return $page;",832],["Prints the manual page and exits.",359],["Print this script's manual page and exit.",227],["my $page;",160],["# This is needed for test log evaluation in \"gen-build-status-page\"",149],["# multi page display gestion",118],["my ($page, $sql, $result, $rows, $row, $i);",108],["my $page = shift;",92],["# Print the page",108],["$page .= end_table()",81]],"useCount":11776},{"word":"param","context":[["my $param = shift;",193],["$template->param(index => $index,",409],["my $result= $input->param('result');",428],["my $index= $input->param('index');",439],["$template->param (",177],["my $op = $input->param('op');",213],["$template->param(",10890],["my $borrowernumber = $input->param('borrowernumber');",286],["$template->param( picture => 1 ) if $picture;",260],["my $biblionumber = $query->param('biblionumber');",319]],"useCount":80240},{"word":"parameters","context":[["Other parameters added when the plugin is called by the dopop function",145],["# extract parameters",129],["flagsrequired => {parameters => 1},",144],["flagsrequired => {parameters => 'parameters_remaining_permissions'},",147],["# Ignore operators passed as parameters.",299],["if ($1 =~ m@Documentation/kernel-parameters.txt$@) {",284],["## \t\t\t# falsly report the parameters of functions.",278],["# check for new typedefs, only function parameters and sparse annotations",275],["\"__setup appears un-documented -- check Documentation/kernel-parameters.txt\\n\" . $herecurr);",177],["plugin_parameters : other parameters added when the plugin is called by the dopop function",456]],"useCount":9455},{"word":"params","context":[["my $params = $query->Vars;",88],["my $output = runFBACommand($params,$servercommand,$opt);",88],["my @params = @_;",84],["my %params    = @_;",80],["my @params;",90],["my $params = $input->Vars;",94],["# parse_webmin_log(user, script, action, type, object, &params)",108],["my %params;",243],["my $params = shift;",253],["my %params = @_;",327]],"useCount":10564},{"word":"parent","context":[["my ($number, $parent) = split /_/, $reaction;",116],["if ($parent) {",151],["'parent' => {",174],["# parent",234],["my ($r_number, $parent) = split /_/, $reaction; #remove tag from reaction number",249],["'parent' => {},",75804],["'parent' => {}",16438],["if (defined $parent) { # for tagged reactions",126],["# is the parent directory of the \"mysql-test\" directory. For source",145],["if ( $pid = fork() ) { #parent",128]],"useCount":98106},{"word":"part","context":[["#    This file is part of GRAPE.",136],["# This file is part of Meran.",754],["# This file is part of Koha.",6644],["# '*' as part of a type definition -- reported already.",300],["#warn \"'*' is part of type\\n\";",300],["#   :   when part of a bitfield",296],["'cmdname' => 'part',",209],["# This file is part of Chart.",162],["#  you should have received as part of this distribution. The terms           #",161],["# you should have received as part of this distribution. The terms",152]],"useCount":19724},{"word":"parts","context":[["#my $outFile_ge9 = File::Spec->catfile($outDir, join(\".\", @parts) . \"_ge9.\" . $ext);",217],["$output_no     = $parts[6];",376],["$lane          = $parts[3];",376],["$mach_no       = $parts[1];",376],["$stage         = $parts[2];",376],["$pcb_serial    = $parts[4];",376],["$pcb_id        = $parts[5];",376],["$date          = $parts[0];",376],["$pcb_id_lot_no = $parts[7];",376],["if (scalar(@parts) >= 9)",384]],"useCount":6525},{"word":"pass","context":[["mov\tr4, $key\t\t\t@ pass key",208],["mov\t\tr5, $rounds\t\t\t@ pass rounds",390],["mov\t%rsp, %rax\t\t# pass key schedule",123],["lea\t0x80(%rsp), %rax\t# pass key schedule",168],["mov\tr5, $rounds\t\t\t@ pass # of rounds",208],["my $pass;",213],["mov\t%edx, %r10d\t\t# pass rounds",216],["add\t\tr4, sp, #0x90\t\t\t@ pass key schedule",364],["add\tr12, $key, #248\t\t\t@ pass key schedule",104],["add\t\tr4, $key, #248\t\t\t@ pass key schedule",364]],"useCount":9323},{"word":"password","context":[["password   => '',",119],["my $password = '';",126],["mtr_add_arg($args, \"--password=\");",183],["password        => '',",239],["$password = $ARGV[1];",116],["my $password;",104],["require 'password.ph';",85],["\"--socket=$master->[0]->{'path_sock'} --password=\";",84],["my $password = \"\";",76],["If no priv password exists, implies AuthNoPriv",70]],"useCount":7302},{"word":"patch","context":[["#extract the line range in the file after the patch is applied",303],["'patch!'\t=> \\$chk_patch,",300],["$vname = 'Your patch';",300],["# This is not a patch, and we are are in 'no-patch' mode so",300],["# This is not a patch, and we are are in 'no-patch' mode so",300],["# Pre-scan the patch sanitizing the lines.",299],["--patch                    treat FILE as patchfile (default)",279],["# Pre-scan the patch looking for any __setup documentation.",286],["# this is not this patch's fault.",294],["# Check the patch for a signoff:",194]],"useCount":7153},{"word":"path","context":[["my $path = shift;",502],["# See if any suffix of this path is a path within the tree.",280],["if ($path =~ m{//}) {",304],["path          => $exe,",328],["my $path;",335],["return $path;",353],["path          => $exe_mysqltest,",354],["my $path = $1;",371],["my ($path) = @_;",374],["require \"$form->{path}/menu.pl\";",406]],"useCount":31147},{"word":"pdb","context":[["copy_u01_feeder_cache($pdb, $pu01, DELTA);",493],["copy_u01_name_value_cache($pdb, $pu01, $section);",464],["my ($pdb, $pu01, $section) = @_;",433],["my $state = $pdb->{$section}->{$machine}{$lane}{$stage}{state};",388],["my ($pdb, $pu01) = @_;",766],["my ($pdb) = @_;",831],["$pdb->{$section}->{$machine}{$lane}{$stage}{state}",980],["$pdb->{$section}->{$machine}{$lane}{$stage}{delta}{$key};",1142],["$pdb->{$section}->{$machine}{$lane}{$stage}{state} = DELTA;",1151],["delete $pdb->{$section}->{$machine}{$lane}{$stage}{cache};",718]],"useCount":24452},{"word":"perl","context":[["#!/usr/bin/perl",48452],["#!perl",782],["#!/usr/bin/perl -w",21528],["#!/usr/bin/env perl",18216],["#! /usr/bin/perl",2356],["#!/usr/local/bin/perl",2068],["#! /usr/bin/perl -w",1796],["#! /usr/bin/env perl",1585],["#!/usr/local/bin/perl -w",1188],["#! perl",461]],"useCount":114987},{"word":"phar","context":[["\"ext/phar/tests/011.phpt\",",23],["\"ext/phar/tests/alias_acrobatics.phpt\",",23],["\"ext/phar/tests/cache_list/copyonwrite4a.phpt\",",23],["\"ext/phar/tests/zip/phar_stub_error.phpt\",",23],["\"ext/phar/tests/test_signaturealgos.phpt\",",23],["\"ext/phar/tests/tar/open_for_write_existing_c.phpt\",",23],["\"ext/phar/tests/tar/frontcontroller14.phar.phpt\",",23],["\"ext/phar/tests/tar/bignames.phpt\",",23],["\"ext/phar/tests/phar_convert_tar2.phpt\",",23],["\"ext/phar/tests/tar/frontcontroller14.phar.phpt\",",23]],"useCount":13649},{"word":"phpt","context":[["\"ext/mbstring/tests/mb_stripos_basic2.phpt\",",23],["\"ext/sqlite3/tests/sqlite3_15_open_error.phpt\",",23],["\"ext/standard/tests/strings/strrpos_error.phpt\",",23],["\"ext/phar/tests/021.phpt\",",23],["\"ext/standard/tests/strings/fprintf_variation_007_64bit.phpt\",",23],["\"ext/sqlite3/tests/sqlite3_24_last_insert_rowid.phpt\",",23],["\"ext/soap/tests/bugs/bug30799.phpt\",",23],["\"ext/standard/tests/file/fgetcsv_variation28.phpt\",",23],["\"ext/odbc/tests/odbc_columnprivileges_001.phpt\",",23],["\"ext/standard/tests/file/unlink_variation10.phpt\",",23]],"useCount":268123},{"word":"pid","context":[["if ( delete $started{$proc->pid()} ) {",357],["$started{$proc->pid()}= $proc;",357],["my $pid = processexists($pidfile);",364],["my $pid = fork();",395],["my $pid;",487],["if($pid > 0) {",540],["return $pid;",542],["if($pid <= 0) {",665],["stopserver($server, \"$pid\");",277],["if ($pid) {",272]],"useCount":22311},{"word":"pidfile","context":[["unlink($pidfile) if(-f $pidfile);",364],["my $pid = processexists($pidfile);",364],["$doesntrun{$pidfile} = 1;",829],["$flags .= \"--pidfile \\\"$pidfile\\\" --logfile \\\"$logfile\\\" \";",207],["$pidfile = $serverpidfile{$server};",277],["my $pidfile;",290],["if ($doesntrun{$pidfile}) {",291],["$flags .= \"--pidfile \\\"$pidfile\\\" --logfile \\\"$logfile\\\" \";",207],["unlink($pidfile) if(-f $pidfile);",364],["unlink($pidfile);",308]],"useCount":6541},{"word":"pkg","context":[["print \"$pkg->{name}: \";",81],["$pkgs{$pkg} = 1;",81],["foreach my $pkg (@pkglist) {",70],["foreach my $pkg (keys %pkgs) {",69],["$defaults{$pkg} = 1;",68],["foreach my $pkg (@pkgs) {",90],["my ($pkg) = @_;",94],["package => $pkg,",101],["my $pkg = $package{$name};",170],["my $pkg = shift;",172]],"useCount":7071},{"word":"pl","context":[["( $xlate=\"${dir}../../perlasm/x86_64-xlate.pl\" and -f $xlate) or",383],["if (!$::Driver) { use FindBin; exec(\"$FindBin::Bin/bootstrap.pl\", @ARGV, $0); die; }",594],["require \"$form->{path}/menu.pl\";",406],["die \"can't locate x86_64-xlate.pl\";",402],["( $xlate=\"${dir}x86_64-xlate.pl\" and -f $xlate ) or",397],["eval { require \"$FindBin::Bin/../kohalib.pl\" };",306],["require \"x86asm.pl\";",281],["require \"bin/menu.pl\";",274],["# `make test'. After `make install' it should work as `perl test.pl'",233],["next if ($realfile !~ /\\.(h|c|s|S|pl|sh)$/);",218]],"useCount":35182},{"word":"plot","context":[["q` plot = plot + theme(legend.key = element_blank()) `,",88],["q` print(plot) `,",316],["q` plot = plot + geom_bar(stat = \"identity\") `,",162],["q` plot = plot + geom_bar(stat = \"identity\") `,",162],["q` plot = plot + theme_bw() `,",150],["q` plot = plot + theme_bw() `,",150],["q` plot = plot + theme(strip.background = element_blank()) `,",118],["q` plot = plot + theme(strip.background = element_blank()) `,",118],["q` plot = plot + theme(legend.title = element_blank()) `,",105],["q` plot = plot + theme(legend.title = element_blank()) `,",105]],"useCount":7078},{"word":"plugin","context":[["my $plugin = shift;",197],["\"$basedir/lib/plugin/\".$plugin_filename,",106],["$plugin_filename = $plugin.\".dll\";",106],["plugin that shows a stats on borrowers",126],["Other parameters added when the plugin is called by the dopop function",145],["sub plugin {",776],["plugin::return_items(\\%itemcount);",621],["plugin_parameters : other parameters added when the plugin is called by the dopop function",456],["$plugin->add_mode(",260],["$plugin->add_arg(",162]],"useCount":8508},{"word":"pod","context":[["#pod =cut",42],["# (@noindent is impossible in .pod, and @refill is unnecessary.)",62],["=begin pod",537],["=end pod",533],["# 'X' below means that this form is discouraged.  Consult perluniprops.pod",370],["#pod",268],["# now $scalar contains the pod from $podfile you can see this below",128],["# @* is also impossible in .pod; we discard it and any newline that",62],["# perluniprops.pod should be consulted for the syntax rules for any of these,",2468],["=pod",3716]],"useCount":8503},{"word":"pod2usage","context":[["pod2usage( {",219],["pod2usage(-verbose => 2) if $man;",179],["pod2usage(-verbose => 1,  -input=>\\*DATA);",180],["pod2usage(-exitstatus => 0, -verbose => 2) if $man;",213],[") or pod2usage(2);",760],["pod2usage(1) if $help;",635],["pod2usage(1);",484],["pod2usage( -verbose => 2 );",310],["or pod2usage(2);",257],["pod2usage(",225]],"useCount":7644},{"word":"point","context":[["# won't point at an old directory",149],["# it there is no point in retrying a statement scan",173],["# This file returns the single code point in Unicode Version 5.2.0 that",272],["# starting code point of the range, in hex; STOP is the ending point, or if",2478],["# starting code point of the range, in hex; STOP is the ending point, or if",2478],["# omitted, the range has just one code point.  Numbers in comments in",2478],["# This file returns the single code point in Unicode Version 6.1.0 that",133],["# At this point we have found next suitable test",117],["# for the code point.  (i.e. the same as looking at the code point's UTF-8",91],["die \"$P: $root: --root does not point at a valid tree\\n\";",296]],"useCount":11975},{"word":"pop","context":[["$type = pop(@av_paren_type);",299],["my $new_type = pop(@av_paren_type);",299],["pop\t%rsi",332],["pop\t%rdi",332],["pop\t%r13",499],["pop\t%r12",503],["pop\t%rbp",516],["pop\t%r15",446],["pop\t%r14",452],["pop\t%rbx",471]],"useCount":11348},{"word":"port","context":[["mtr_error(\"MTR_BUILD_THREAD number results in a port\",",147],["# all port numbers might not be used in this version of the script.",149],["my $pid3 = verifyserver($proto, $ipvnum, $idnum, $ip, $port);",207],["my ($proto, $ipvnum, $idnum, $ip, $port) = @_;",241],["my $port;",265],["\"--port=$master->[0]->{'port'} \" .",147],["\"--port=$master->[0]->{'port'} \" .",147],["-port      => $o_port,",142],["mtr-port-base=#       Base for port numbers, ports from this number to",119],["# Some port was not free(which one has already been printed)",119]],"useCount":18756},{"word":"pos","context":[["\" \"  x ($pos % 8);",158],["} elsif (substr($line, $pos, 1) eq '(') {",158],["my $pos = pos_last_openparen($rest);",158],["$pos += length($1) - 1;",158],["neg(pos).",528],["my $goodspaceindent = $oldindent . \" \"  x $pos;",158],["$pos++;",256],["pos.",256],["my $pos = 0;",424],["if ($pos >= 0) {",165]],"useCount":12406},{"word":"possible","context":[["$possible =~ s/\\s*$Sparse\\s*//g;",297],["# also makes it possible to wait for any process to exit during the check",357],["sub possible {",301],["warn \"POSSIBLE: $possible ($line)\\n\" if ($dbg_possible);",299],["if ($possible =~ /^\\s*$/) {",297],["my ($possible, $line) = @_;",299],["possible($1, \"B:\" . $s);",297],["$possible =~ s/\\s*$Type\\s*//g;",297],["} elsif ($possible =~ /\\s/) {",297],["possible($1, \"C:\" . $s);",297]],"useCount":10976},{"word":"pre","context":[["pre.smalllisp {font-size: smaller}",290],["pre.menu-comment {font-family: serif}",290],["#print \"pre<$pre_ctx>\\nline<$line>\\nctx<$ctx>\\nnext<$lines[$ctx_ln - 1]>\\n\";",296],["# Check the pre-context.",299],["pre.menu-preformatted {font-family: serif}",290],["pre.smallexample {font-size: smaller}",290],["#print \"APW: ALLOWED: pre<$1>\\n\";",283],["my $pre = $1;",224],["q` data = rbind(data, pre) `,",212],["pre.smalldisplay {font-family: inherit; font-size: smaller}",166]],"useCount":11369},{"word":"preference","context":[["if ( C4::Context->preference(\"Version\") < TransformToNum($DBversion) ) {",2830],["if (C4::Context->preference('Version') < TransformToNum($DBversion)){",517],["if ( C4::Context->preference('Version') < TransformToNum($DBversion) ) {",467],["if (C4::Context->preference('ExtendedPatronAttributes')) {",307],["activeBorrowerRelationship => (C4::Context->preference('borrowerRelationship') ne ''),",167],["if ( C4::Context->preference(\"SyndeticsEnabled\")",175],["RoutingSerials => C4::Context->preference('RoutingSerials'),",187],["if (C4::Context->preference('BakerTaylorEnabled')) {",190],["authnotrequired => ( C4::Context->preference(\"OpacPublic\") ? 1 : 0 ),",279],["if (C4::Context->preference(\"Version\") < TransformToNum($DBversion)) {",11887]],"useCount":35314},{"word":"prefix","context":[["my $prefix;",351],["my $prefix = '';",368],["if ($prefix !~ /$Type\\s+$/ &&",296],["my ($where, $prefix) = ($-[1], $1);",296],["substr($prefix, -length($file)) = '';",280],["##print \"prefix<$prefix>\\n\";",280],["$prefix = '';",343],["# It is, so see if the prefix is acceptable.",280],["##print \"prefix<$prefix>\\n\";",280],["($where != 0 || $prefix !~ /^.\\s+$/) &&",294]],"useCount":15153},{"word":"prepare","context":[["$sth = $dbh->prepare($query);",932],["my $sth = $dbh->prepare(",234],["my $sth_search = $dbh->prepare(\"SELECT count(*) AS total",242],["$sth = $dbh->prepare(",264],["$sthA = $dbhA->prepare($stmtA) or die \"preparing: \",$dbhA->errstr;",283],["$sth = $dbh->prepare($sql);",348],["$dbh->prepare(",360],["or die \"Couldn't prepare statement: \" . $dbh->errstr;",362],["my $sth = $dbh->prepare($sql);",496],["my $sth = $dbh->prepare($query);",814]],"useCount":16076},{"word":"previous","context":[["\"that open brace { should be on the previous line\\n\" . $hereprev);",120],["# reusing them from previous test",119],["# Track the previous line.",303],["\"that open brace { should be on the previous line\\n\" .",190],["\"Logical continuations should be on the previous line\\n\" . $hereprev);",158],["# check multi-line statement indentation matches previous line",158],["# it's possible to use a previous version of",119],["# Clear previous warnings",119],["# Kill processes left from previous runs, normally",119],["# Kill leftovers from previous run",119]],"useCount":5898},{"word":"prevline","context":[["if ($prevline=~/}\\s*$/ and $line=~/^.\\s*else\\s*/ and",230],["$prevline =~ /^.\\s*$/ &&",262],["$prevline =~ /(?:^|[^=])=\\s*$/) {",279],["$fix && $prevline =~ /^\\+/ && $line =~ /^\\+/) {",292],["if (($prevline =~ /^.\\s*#\\s*define\\s/ ||",296],["$prevline =~ /\\\\\\s*$/) && $continuation == 0) {",296],["$prevline =~ /^.\\s*(?:typedef\\s+)?(enum|union|struct)(?:\\s+$Ident)?\\s*$/) {",299],["my $prevline=\"\";",303],["($prevline, $stashline) = ($stashline, $line);",303],["if ($prevline =~ /\\bif\\s*\\(([^\\)]*)\\)/) {",314]],"useCount":5882},{"word":"print","context":[["print",6111],["print <<EOF;",4245],["print;",2463],["print \"\\n\\n\";",1807],["print $_;",1604],["print STDERR \"\\n\";",1598],["print \"\\n\";",23189],["print qq|",7730],["print \"</tr>\\n\";",1389],["print \"",1364]],"useCount":408148},{"word":"printf","context":[["printf $outfh \"product,\";",287],["printf(\"\\n\");",332],["printf $log_fh \"ENTRY STATE: %s\\n\",",373],["printf $outfh \"\\n\";",2505],["printf \"\\n\";",1195],["printf $outfh $pcol->{format}, $pcol->{name};",646],["#     printf $log_fh \"%d: File %s already exists\\n\", __LINE__, $outfnm if ( -e $outfnm);",510],["printf $log_fh \"\\n\";",500],["printf $outfh \",%s\", $key;",406],["#     printf $outfh \"\\n\";",374]],"useCount":51390},{"word":"proc","context":[["if ( delete $started{$proc->pid()} ) {",357],["my $proc= My::SafeProcess->new",594],["$started{$proc->pid()}= $proc;",357],["mtr_report(\"Got $proc\");",357],["get_log_from_proc($proc, $tinfo->{name});",476],["return $proc;",484],["my $proc= My::SafeProcess->wait_any_timeout($timeout);",357],["$started{$proc->pid()}= $proc;",357],["my $res= $proc->exit_status();",357],["mtr_verbose(\"Started $proc\");",507]],"useCount":14646},{"word":"process","context":[["delete $consumption->{$process};",190],["$production->{$process} .= $net_effect;",380],["foreach my $process (keys %common_processes) {",190],["# get the process ID",191],["if (!process($filename)) {",300],["# Wait for next process to exit",357],["# Unknown process returned, most likley a crash, abort everything",357],["$consumption->{$process} .= $net_effect;",380],["# also makes it possible to wait for any process to exit during the check",357],["sub process {",587]],"useCount":15816},{"word":"product","context":[["foreach my $product (sort keys %{$totals{by_product}})",618],["printf $outfh \"product,\";",287],["foreach my $machine (sort { $a <=> $b } keys %{$totals{by_product}{$product}{$section}{by_machine}})",160],["foreach my $machine (sort { $a <=> $b } keys %{$totals{by_product}{$product}{$section}{by_machine_lane}})",160],["foreach my $key (sort keys %{$totals{by_product}{$product}{$section}{by_machine_lane}{$machine}{$lane}})",201],["foreach my $key (sort keys %{$totals{by_product}{$product}{$section}{by_machine}{$machine}})",202],["my $product = $pdb->{product}{u01}{$machine}{$lane}{$stage};",208],["my $product = $pdb->{product}{u01}{$machine}{$lane}{$stage};",208],["#     foreach my $product (sort keys %{$totals{$section}{by_product}})",255],["foreach my $product (sort keys %{$totals{$section}{by_product}})",286]],"useCount":9362},{"word":"program","context":[["# Modify the exe and args so that program is run in gdb in xterm",151],["# This file is for internal use by the Perl program only.  The format and even",4650],["# Modify the exe and args so that program is run in valgrind",149],["# Modify the exe and args so that program is run in ddd",149],["# Modify the exe and args so that program is run in the selected debugger",149],["# with the mysqltest program tells us so.",145],["POD documentation for the program.",142],["Show the full program manual. This uses the perldoc command to print the",142],["Show program usage with summary of options.",141],["Show program version.",141]],"useCount":13574},{"word":"proto","context":[["servername_canon($proto, $ipvnum, $idnum) .'_verify.log';",112],["killsockfilters($proto, $ipvnum, $idnum, $verbose);",128],["my ($proto, $ipvnum, $idnum, $ip, $port) = @_;",241],["$logfile = server_logfilename($LOGDIR, $proto, $ipvnum, $idnum);",277],["$server = servername_id($proto, $ipvnum, $idnum);",277],["$srvrname = servername_str($proto, $ipvnum, $idnum);",291],["elsif ($proto eq \"ldap\") {",159],["my $server = servername_id($proto, $ipvnum, $idnum);",199],["my $pid3 = verifyserver($proto, $ipvnum, $idnum, $ip, $port);",207],["return &responsiveserver($proto, $ipvnum, $idnum, $ip, $port);",109]],"useCount":6061},{"word":"protocol","context":[["mtr_add_arg($args, \"--ps-protocol\");",147],["cursor-protocol       Use the cursor protocol between client and server",147],["view-protocol         Create a view to execute all non updating queries",147],["'view-protocol'            => \\$opt_view_protocol,",147],["mtr_add_arg($args, \"--cursor-protocol\");",147],["ps-protocol           Use the binary protocol between client and server",147],["ssl                   Use ssl protocol between client and server",147],["ps-protocol           Use the binary protocol between client and server",147],["compress              Use the compressed protocol between client and server",149],["cursor-protocol       Use the cursor protocol between client and server",147]],"useCount":5911},{"word":"pu01","context":[["copy_u01_name_value_cache($pdb, $pu01, $section);",464],["copy_u01_feeder_cache($pdb, $pu01, DELTA);",493],["foreach my $prow (@{$pu01->{$section}->{data}})",522],["my $filename = $pu01->{file_name};",1391],["my $pcols = $pu01->{$section}->{column_names};",522],["my ($pdb, $pu01) = @_;",766],["my $lane = $pu01->{lane};",1409],["my $output_no = $pu01->{output_no};",1425],["my $stage = $pu01->{stage};",1409],["my $machine = $pu01->{mach_no};",1409]],"useCount":21166},{"word":"push","context":[["push\t%r12",1612],["push\t%rbp",1640],["push\t%rbx",1643],["push(@av_paren_type, $type);",1741],["push(@$images,$example);",1034],["push\t%r15",1448],["push(",644],["push(@chunks, [ $condition, $statement ]);",598],["push\t%r14",1511],["push\t%r13",1582]],"useCount":96627},{"word":"pxor","context":[["pxor\t@XMM[9], @XMM[6]",110],["pxor\t%xmm4,%xmm4",111],["pxor\t%xmm5,%xmm5",116],["&pxor\t($twtmp,$twtmp);",204],["&pxor\t($Zlo,$tmp);",120],["pxor\t$twtmp, $twtmp",132],["&pxor\t($tweak,$twres);",132],["pxor\t0x00(%rsp), @XMM[0]\t# ^= tweak[]",168],["pxor\t0x10(%rsp), @XMM[1]",168],["pxor\t%xmm0,%xmm0",239]],"useCount":20910},{"word":"q","context":[["-q, --quiet                quiet",280],["$R->run(q` data = data.frame() `);",220],["$R->run(q` library(ggplot2) `,",293],["'q|quiet+'\t=> \\$quiet,",297],["q` library(Cairo) `,",298],["q` print(plot) `,",316],["q` dev.off() `,",422],["$dbh->do(q|",1522],["$cached_env_img{$key} = q|<IMG",3477],["$dbh->do(q{",3766]],"useCount":36013},{"word":"qq","context":[["$dbh->do(qq{",1299],["print qq|",7730],[". qq|</button>",226],[". qq|</a></th>|;",316],[". qq|</th>",289],[".qq|</select>",215],["$dbh->do(qq|",276],["$stmt = qq{",215],["print qq{",233],["$exchangerate .= qq|",233]],"useCount":35263},{"word":"qr","context":[["qr{bool},",301],["qr{union\\s+$Ident},",301],["qr{void},",301],["qr{enum\\s+$Ident},",301],["qr{${Ident}_handler},",301],["qr{float},",301],["qr{${Ident}_t},",301],["qr{struct\\s+$Ident},",301],["qr{${Ident}_handler_fn},",301],["qr{double},",301]],"useCount":24726},{"word":"query","context":[["query => $query,",481],["query           => $cgi,",502],["my $sth = $dbh->prepare($query);",814],["$sth = $dbh->prepare($query);",932],["my $query = new CGI;",1638],["query => $input,",1724],["query           => $query,",1940],["query           => $query,",1940],["output_html_with_http_headers $query, $cookie, $template->output;",1984],["query           => $input,",2098]],"useCount":42963},{"word":"quiet","context":[["if ($quiet == 0) {",301],["'q|quiet+'\t=> \\$quiet,",297],["'q|quiet+'\t=> \\$quiet,",297],["print \"\\n\" if ($quiet == 0);",290],["-q, --quiet                quiet",280],["# so just keep quiet.",299],["if ($summary && !($clean == 1 && $quiet == 1)) {",299],["# just keep quiet.",300],["$quiet++;",303],["my $quiet = 0;",531]],"useCount":7743},{"word":"qw","context":[["use C4::Dates qw/format_date/;",554],["use vars qw($VERSION);",513],["use Term::ANSIColor qw(:constants);",519],["use POSIX qw(strftime);",783],["use Cwd qw(abs_path);",795],["use FindBin qw($RealBin);",1101],["use FindBin qw($Bin);",1473],["use CGI qw ( -utf8 );",1666],["use vars qw(%result_texis %result_texts %result_trees %result_errors",1722],["use Getopt::Long qw(:config no_auto_abbrev);",391]],"useCount":79224},{"word":"r","context":[["s/\\r//g;",542],["print \"\\r$i\" unless ($i % 100);",515],["if ($r) {",420],["print \"$r\\n\";",366],["my $r;",665],["my $r = shift;",338],["return $r;",333],["s/\\r|\\n//g;",727],["\"rel=s\" \t=> \\$r,",306],["return @r;",1025]],"useCount":40249},{"word":"r0","context":[["vld1.64\t\t{@XMM[10]-@XMM[11]}, [r0,:128]!",260],["vld1.64\t\t{@XMM[ 8]-@XMM[ 9]}, [r0,:128]!",260],["vld1.64\t\t{@XMM[8]}, [r0,:128]\t\t@ next round tweak",364],["mov\t\tr0, sp",598],["vld1.64\t\t{@XMM[12]-@XMM[13]}, [r0,:128]!",156],["mflr\tr0",116],["mtlr\tr0",106],["vld1.64\t\t{@XMM[8]-@XMM[9]}, [r0,:128]!",104],["vst1.64\t\t{@XMM[$i-1]}, [r0,:128]!",104],["addze\tr10,r0",98]],"useCount":8830},{"word":"r10","context":[["addze\tr10,r10",392],["adde\t\tr10,r8,r10",322],["adde\t\tr10,r8,r10",322],["mov\t%r10,32(%rsp)\t\t# arg5",331],["mov\t40(%rsi),%r10\t\t# disp->ContextRecord",331],["lea\t(%rsi,%r10),%r10\t# epilogue label",334],["lea\t(%rsi,%r10),%r10\t# epilogue label",334],["addi\t\tr10,r10,32",356],["addi\t\tr10,r10,32",356],["addze\tr10,r10",392]],"useCount":19834},{"word":"r11","context":[["addc\t\tr11,r7,r11",336],["lea\t56(%rsi),%r11\t\t# &disp->HandlerData",331],["mov\t0(%r11),%r10d\t\t# HandlerData[0]",332],["mov\t4(%r11),%r10d\t\t# HandlerData[1]",332],["addc\tr11,r11,r8",308],["mov\t56($disp),%r11\t\t# disp->HandlerData",309],["mov\t%r11,40(%rsp)\t\t# arg6",331],["addi\t\tr11,r11,32",356],["addi\t\tr11,r11,32",356],["addc\t\tr11,r7,r11",336]],"useCount":17529},{"word":"r12","context":[["addc\tr12,r12,r8",294],["addc\tr12,r12,r8",294],["mov\t%r12,216($context)\t# restore context->R12",308],["addze\tr12,r12",308],["addze\tr12,r12",308],["mov\t%r12,48(%rsp)\t\t# arg7",331],["lea\t24(%rsi),%r12\t\t# &disp->EstablisherFrame",331],["mov\t-24(%rax),%r12",396],["pop\t%r12",503],["push\t%r12",1612]],"useCount":16310},{"word":"r13","context":[["adcq\t\\$0, %r13",117],["addq\t%rax, %r13",130],["adox\t%r13,%r12",131],["mov\t-32(%rsi),%r13",212],["adcx\t%rax,%r13",223],["mov\t%r13,224($context)\t# restore context->R13",275],["mov\t16(%rsi),%r13",291],["mov\t-32(%rax),%r13",355],["pop\t%r13",499],["push\t%r13",1582]],"useCount":8108},{"word":"r14","context":[["pop\t%r14",452],["mov\t%r14,232($context)\t# restore context->R14",270],["mov\t-40(%rsi),%r14",212],["br\t%r14",139],["adcx\t$zero,%r14\t\t# cf=0",130],["addq\t%rax, %r14",117],["adc\t8*6($tptr),%r14",114],["mov\t-40(%rax),%r14",349],["push\t%r14",1511],["mov\t8(%rsi),%r14",291]],"useCount":8122},{"word":"r15","context":[["push\t%r15",1448],["pop\t%r15",446],["mov\t-48(%rax),%r15",318],["mov\t%r15,240($context)\t# restore context->R15",237],["mov\t(%rsi),%r15",221],["mov\t-48(%rsi),%r15",156],["adc\t8*7($tptr),%r15",114],["mulx\t3*8($nptr),%rax,%r15",108],["adox\t$zero,%r15",93],["movq\t56(%rsp), %r15",91]],"useCount":8870},{"word":"r4","context":[["mov\tr4, $key\t\t\t@ pass key",208],["$LD\tr6,`6*$BNSZ`(r4)",112],["$LD\tr6,`5*$BNSZ`(r4)",112],["$LD\tr6,`4*$BNSZ`(r4)",112],["$LD\tr6,`2*$BNSZ`(r4)",168],["ldmia\tsp!,{r4-r12,pc}",158],["$LD\tr6,`1*$BNSZ`(r4)",154],["$LD\tr6,`3*$BNSZ`(r4)",140],["add\t\tr4, $key, #248\t\t\t@ pass key schedule",364],["add\t\tr4, sp, #0x90\t\t\t@ pass key schedule",364]],"useCount":7039},{"word":"r6","context":[["$UMULH\t\tr8,r5,r6",476],["$UMULH  r10,r6,r8",140],["$UMULH\tr9,r6,r7",1092],["$LD\tr6,`3*$BNSZ`(r4)",140],["$UMULL\tr8,r6,r7",1092],["$UMULH\t\tr8,r6,r6",140],["$UMULL\tr9,r6,r8",140],["$LD\tr6,`1*$BNSZ`(r4)",154],["$UMULL\t\tr7,r5,r6",476],["$LD\tr6,`2*$BNSZ`(r4)",168]],"useCount":8678},{"word":"r7","context":[["$UMULL\t\tr7,r6,r6",140],["addc\t\tr11,r7,r11",336],["addc\t\tr9,r7,r9",322],["$UMULL\tr8,r6,r7",1092],["$UMULL\t\tr7,r5,r6",476],["addc\t\tr10,r7,r10",308],["$LD\tr7,`1*$BNSZ`(r5)",168],["$LD\tr7,`2*$BNSZ`(r5)",163],["$LD\tr7,`3*$BNSZ`(r5)",154],["$UMULH\tr9,r6,r7",1092]],"useCount":6321},{"word":"r8","context":[["addc\tr10,r10,r8",280],["addc\tr12,r12,r8",294],["addc\tr11,r11,r8",308],["adde\t\tr11,r8,r11",308],["$context=\"%r8\";",308],["adde\t\tr10,r8,r10",322],["mov\t0(%rsi),%r8\t\t# arg3, disp->ControlPc",331],["$UMULH\t\tr8,r5,r6",476],["adde\t\tr9,r8,r9",336],["$UMULL\tr8,r6,r7",1092]],"useCount":11384},{"word":"r9","context":[["adde\tr11,r11,r9",280],["adde\tr10,r10,r9",294],["adde\tr12,r12,r9",294],["$disp=\"%r9\";",308],["addc\t\tr9,r7,r9",322],["addc\t\tr9,r7,r9",322],["mov\t16(%rsi),%r9\t\t# arg4, disp->FunctionEntry",331],["adde\t\tr9,r8,r9",336],["adde\t\tr9,r8,r9",336],["$UMULH\tr9,r6,r7",1092]],"useCount":10366},{"word":"range","context":[["# omitted, the range has just one code point.  Numbers in comments in",2478],["# [brackets] indicate how many code points are in the range.",2478],["$vsx =~ /( (?:value|string|range)_string [^=]+ ) = /xo;",98],["my @range = ();",73],["push(@range, \"$lastfile:$1:$2\");",57],["if (@range && $VCS_cmds{\"blame_range_cmd\"} eq \"\") {",53],["foreach my $file_range_diff (@range) {",110],["#extract the line range in the file after the patch is applied",303],["# But a fairly safe range seems to be 5001 - 32767",149],["# starting code point of the range, in hex; STOP is the ending point, or if",2478]],"useCount":11261},{"word":"raquo","context":[["<option value=\\\"/-/special/blogger-news/\\\" >&nbsp;&raquo; Blogger News</option>",30],["more &raquo; </a>\t</div>",90],["<option value=\\\"/-/world/sub-saharan-africa/saint-helena/\\\" >&nbsp;&raquo; Saint Helena</option>",30],["<option value=\\\"/-/world/sub-saharan-africa/south-africa/\\\" >&nbsp;&raquo; South Africa</option>",30],["<option value=\\\"/-/world/oceania/new-zealand/\\\" >&nbsp;&raquo; New Zealand</option>",30],["<option value=\\\"/-/world/central-asia-caucasus/tajikistan/\\\" >&nbsp;&raquo; Tajikistan</option>",30],["<option value=\\\"/-/world/eastern-central-europe/russia/\\\" >&nbsp;&raquo; Russia</option>",30],["<option value=\\\"/-/world/western-europe/ireland/\\\" >&nbsp;&raquo; Ireland</option>",30],["<option value=\\\"/-/world/oceania/new-caledonia/\\\" >&nbsp;&raquo; New Caledonia</option>",30],["<option value=\\\"/-/world/americas/\\\" >&nbsp;&raquo; Americas</option>",30]],"useCount":8760},{"word":"rawline","context":[["my $hereline = \"$here\\n$rawline\\n\";",299],["my $herecurr = \"$here\\n$rawline\\n\";",299],["$line = sanitise_line($rawline);",299],["my $hereprev = \"$here\\n$prevrawline\\n$rawline\\n\";",299],["($prevrawline, $stashrawline) = ($stashrawline, $rawline);",299],["if ($rawline=~/^\\@\\@ -\\d+(?:,\\d+)? \\+(\\d+)(,(\\d+))? \\@\\@/) {",299],["foreach my $rawline (@rawlines) {",300],["$line = $rawline;",300],["fix_delete_line($fixlinenr, $rawline);",553],["my $herevet = \"$here\\n\" . cat_vet($rawline) . \"\\n\";",1470]],"useCount":14838},{"word":"rawlines","context":[["my $line = $rawlines[$linenr - 1];",303],["\"$here\\n$ctx\\n$rawlines[$ctx_ln - 1]\\n\");",498],["my @rawlines = ();",307],["next if ($rawlines[$line] =~ /^-/);",304],["@rawlines = ();",304],["push(@rawlines, $_);",304],["##print \"LINE: $rawlines[$end_line - 1 ]\\n\";",303],["push(@res, $rawlines[$line]);",303],["$blk .= $rawlines[$line];",303],["foreach my $rawline (@rawlines) {",300]],"useCount":8158},{"word":"rax","context":[["mov\t-16(%rax),%rbp",465],["mov\t152($context),%rax\t# pull context->Rsp",496],["mov\t120($context),%rax\t# pull context->Rax",492],["mov\t-8(%rax),%rbx",483],["mov\t$ai,%rax",432],["mov\t-24(%rax),%r12",396],["add\t%rax,$A[1]",384],["add\t%rax,$N[1]",384],["mov\t%rax,152($context)\t# restore context->Rsp",372],["mov\t8(%rax),%rdi",369]],"useCount":37828},{"word":"rbp","context":[["movdqa\t@XMM[15], 0x20(%rbp)\t# put aside IV",84],["pxor\t0x20(%rbp), @XMM[0]\t# ^= IV",84],["lea\t0x20(%rbp), $arg2",84],["movzb\t-128(%rbp,%rsi),%ebx",128],["mov\t-16(%rsi),%rbp",212],["mov\t32(%rsi),%rbp",286],["mov\t%rbp,160($context)\t# restore context->Rbp",372],["mov\t-16(%rax),%rbp",465],["pop\t%rbp",516],["push\t%rbp",1640]],"useCount":9615},{"word":"rbx","context":[["mulq\t%rbx",585],["cmp\t%r10,%rbx\t\t# context->Rip<prologue label",226],["mov\t40(%rsi),%rbx",286],["cmp\t%r10,%rbx\t\t# context->Rip>=epilogue label",306],["mov\t%rbx,144($context)\t# restore context->Rbx",380],["pop\t%rbx",471],["mov\t-8(%rax),%rbx",483],["mov\t248($context),%rbx\t# pull context->Rip",501],["push\t%rbx",1643],["mov\t-8(%rsi),%rbx",212]],"useCount":9993},{"word":"rc","context":[["my $rc = 0;",165],["my $rc;",175],["'subcategory' => 'client save rc file',",317],["return $rc;",262],["die($rc) unless $rc->is_success();",240],["die($rc) unless $rc->is_success();",240],["if ($rc) {",239],["$rc = <STDIN>; chomp($rc); if ($rc eq \"ERROR\") { exit; }",175],["$rc = <STDIN>; chomp($rc); if ($rc eq \"ERROR\") { exit; }",175],["$rc = <STDIN>; chomp($rc); if ($rc eq \"ERROR\") { exit; }",175]],"useCount":6755},{"word":"rcx","context":[["mov\t%rcx,56(%rsp)\t\t# arg8, (NULL)",331],["xor\t%rcx,%rcx\t\t# arg1, UNW_FLAG_NHANDLER",331],["xor\t%rcx,%rcx\t\t# arg1, UNW_FLAG_NHANDLER",331],["$rec=\"%rcx\";",308],["inc\t%rcx\t\t\t# of=0",83],["movq\t%rdx, %rcx",78],["adcq\t\\$0, %rcx",78],["mov\t\\$-8,%rcx",76],["sbbq\t%rcx, %rcx",65],["sbbq\t%rcx, %rcx",65]],"useCount":6210},{"word":"rdi","context":[["lea\t(%rdx,%rdx),%rdi",64],["xor\t4(%rdi),%eax",60],["mov\t%rdi,$ctx\t# reassigned argument",67],["mov\t%rax,0(%rdi)",68],["lea\t512($context),%rdi\t# &context.Xmm6",206],["mov\t40($disp),%rdi\t\t# disp->ContextRecord",331],["pop\t%rdi",332],["mov\t8(%rax),%rdi",369],["mov\t%rdi,176($context)\t# restore context->Rdi",378],["push\t%rdi",524]],"useCount":6754},{"word":"rdx","context":[["adc\t\\$0, %rdx",840],["mov\t%rdx,$hi1",304],["$frame=\"%rdx\";",308],["mov\t8(%rsi),%rdx\t\t# arg2, disp->ImageBase",331],["mov\t%rdx,$N[1]",384],["mov\t%rdx,$N[0]",384],["mov\t%rdx,$A[0]",384],["mov\t%rdx,$A[1]",384],["adcq\t\\$0, %rdx",494],["adc\t\\$0,%rdx",3839]],"useCount":17914},{"word":"re","context":[["# The following should only be loaded if we're bringing up the advanced search template",61],["ok(1); # If we made it this far, we're ok.",57],["# Loop ran through: we should keep waiting after a re-check",119],["# re-encode for upper double register addressing",121],["sub re {",217],["# we're now running in the background",81],["# If we're within the first 10 pages, keep it simple",68],["movdqu\t0x00($inp), @XMM[8]\t# re-load input",84],["croak (\"You're missing something\") if $var eq $NULL_STRING;",90],["# in each case, we're grabbing the first value we find in",93]],"useCount":8256},{"word":"read","context":[["# Get AdWords Client, credentials will be read from ~/adwords.properties.",448],["# read the list of experimental test cases from the files specified on",118],["GetOptions(%options) or usage(\"Can't read options\");",126],["When FILE is - read standard input.",282],["# Open the servers .err log file and read all lines",155],["#---- if primkey exists, it's a modify action, so read values to modify...",196],["access(read),",155],["# i.e a file can be read regardless what mode we set it to",149],["# Only read pid from files that end with .pid",128],["would read in a file of ids and add a column for each field in the relationship.",306]],"useCount":15431},{"word":"realcnt","context":[["$realcnt = 0;",598],["ctx_statement_block($linenr, $realcnt, 0)",346],["$realcnt=1+1;",602],["$realcnt=$3+1;",602],["ctx_statement_block($linenr, $realcnt, 0);",603],["$realcnt--;",303],["$realcnt-- if ($realcnt != 0);",303],["$realcnt-- if ($realcnt != 0);",303],["} elsif ($realcnt == 1) {",303],["my $cnt = $realcnt;",924]],"useCount":10363},{"word":"realfile","context":[["if ($realfile !~ m@/vmlinux.lds.h$@ &&",290],["$realfile = $1;",553],["$realfile =~ s@^([^/]*)/@@;",354],["} elsif ($realfile =~ /\\.c$/ && defined $stat &&",291],["if ($realfile =~ /\\.c$/ && defined $stat &&",291],["$here .= \"FILE: $realfile:$realline:\" if ($realcnt != 0);",301],["if (($realfile =~ /^$/ || $line =~ /^\\+/) &&",301],["if ($realfile !~ m@\\binclude/uapi/@ &&",512],["if ($realfile =~ /Kconfig/ &&",412],["my $realfile = '';",303]],"useCount":11655},{"word":"record","context":[["my ($dbh,$record,$tagslib,$field_number,$tabloop) = @_;",564],["my ($dbh,$record,$tagslib,$i,$tabloop) = @_;",408],["mtr_add_arg($args, \"--record\");",294],["# called by default. Used to create form to add or  modify a record",256],["$record=<CHECKBOOK>;",202],["record TESTNAME       (Re)genereate the result file for TESTNAME",149],["'record'                   => \\$opt_record,",149],["my ( $dbh, $record, $tagslib, $i, $tabloop ) = @_;",150],["my ( $dbh, $record, $tagslib, $field_number, $tabloop ) = @_;",177],["my $record;",196]],"useCount":18688},{"word":"ref","context":[["# check if the ref image has this relation with this family already",265],["print join(\"\\t\", $k, map { ref($_) eq 'ARRAY' ? join(\",\", @$_) : $_ } @$v{@fields}), \"\\n\";",160],["$ref;",177],["my $self = (ref $_[0]? shift : $Self);",202],["print (\"Ref: ref($service)\\n\");",207],["'cmdname' => 'ref',",362],["my $ref = shift;",346],["return $ref;",288],["for my $key (keys %$ref) {",230],["'text' => 'ref'",180]],"useCount":22681},{"word":"reference","context":[["# a way to make tmp.o reference the local objects of the original object",62],["# Since local objects can reference local variables, we need to find",62],["# an undefined reference to func1 or a wrong reference to another global",51],["# an undefined reference to func1 or a wrong reference to another global",51],["my $ref_func;\t\t# reference function to use for offsets",63],["# Loop through all the mcount caller offsets and print a reference",63],["# Simplify reference to semisync plugins",70],["my $global_var_href = $_[0];                           # get reference to global vars hash",117],["my ($global_var_href) = @_;                            # get reference to global vars hash",135],["# Inputs: 0) ExifTool object reference",150]],"useCount":6241},{"word":"reflection","context":[["\"ext/reflection/tests/ReflectionClass_setStaticPropertyValue_002.phpt\",",23],["\"ext/reflection/tests/ReflectionObject_getConstants_basic.phpt\",",23],["\"ext/reflection/tests/ReflectionClass_hasMethod_basic.phpt\",",23],["\"ext/reflection/tests/ReflectionParameter_export_error2.phpt\",",23],["\"ext/reflection/tests/ReflectionClass_getMethods_002.phpt\",",23],["\"ext/reflection/tests/ReflectionClass_getMethods_003.phpt\",",23],["\"ext/reflection/tests/ReflectionClass_getConstants_basic.phpt\",",23],["\"ext/reflection/tests/bug33389.phpt\",",23],["\"ext/reflection/tests/ReflectionClass_toString_002.phpt\",",23],["\"ext/reflection/tests/ReflectionClass_isInstantiable_variation.phpt\",",23]],"useCount":6841},{"word":"remain","context":[["my ($level, @r) = ctx_block_get($linenr, $remain, 0, '{', '}', 0);",302],["$remain--;",903],["return ctx_block_get($linenr, $remain, 0, '{', '}', 0);",302],["my ($level, @r) = ctx_block_get($linenr, $remain, 0, '(', ')', $off);",302],["my ($level, @r) = ctx_block_get($linenr, $remain, 1, '{', '}', 0);",302],["for ($line = $start; $remain > 0; $line++) {",303],["($statement, $condition, $linenr, $remain, $off, $level) =",598],["ctx_statement_block($linenr, $remain, $off);",598],["my ($linenr, $remain) = @_;",909],["my ($linenr, $remain, $off) = @_;",1201]],"useCount":9489},{"word":"remove","context":[["# remove the $opt_mem dir to assure the symlink",149],["mtr_error(\"No, don't remove the vardir when running with --extern\")",147],["unlink($file_name) or die (\"unable to remove file '$file_name'\");",119],["# remove comments (# foo) at the beginning of the line, or after a",119],["# Make sure we remove the line prefixes as we have",296],["# starting at the end of the conditional, so remove:",296],["my ($r_number, $parent) = split /_/, $reaction; #remove tag from reaction number",249],["if ($net_effect->sum > 0) { #if net production remove consumption processes, retain net production",190],["# remove whitespace",150],["# - allow it, but remove all files in it",149]],"useCount":9782},{"word":"report","context":[["my $report= mtr_grab_file($err_file);",476],["sub report {",387],["#make up the handle for any error we report on this line",303],["# In mailback mode only produce a report in the negative, for",300],["our @report = ();",300],["our @report;",300],["# If we have no input at all, then there is nothing to report on",299],["# we assume the first bad printk is the one to report.",284],["--mailback                 only produce a report in case of warnings/errors",280],["--terse                    one line per report",280]],"useCount":14660},{"word":"request","context":[["my $resp = $ua->request($req);",95],["locale => $request->{_locale},",86],["# Pass request to the user agent and get a response back",100],["-f --fork            handle each request in a new process",114],["my $response = $ua->request($request);",162],["my $response = $ua->request($request);",162],["my ($request) = @_;",268],["my $res = $ua->request($req);",293],["# Log SOAP XML request, response and API errors.",446],["my $response = $request->getResponse();",91]],"useCount":7249},{"word":"require","context":[["require \"lib/mtr_misc.pl\";",116],["require \"lib/mtr_process.pl\";",116],["require \"lib/mtr_io.pl\";",116],["require 'ParseExcel.pm';",141],["require \"bin/menu.pl\";",274],["require \"x86asm.pl\";",281],["require Exporter;",287],["eval { require \"$FindBin::Bin/../kohalib.pl\" };",306],["require \"$form->{path}/menu.pl\";",406],["require C4::External::BakerTaylor;",117]],"useCount":16189},{"word":"required","context":[["\"return is not a function, parentheses are not required\\n\" . $herecurr);",192],["required => 0,",337],["ERROR(\"space required after that '$op' $at\\n\" . $hereptr);",211],["ERROR(\"space required before the open parenthesis '('\\n\" . $herecurr);",210],["\"space required after that '$op' $at\\n\" . $hereptr)) {",206],["\"space required before the open parenthesis '('\\n\" . $herecurr);",193],["\"space required after that '$op' $at\\n\" . $hereptr);",180],["ERROR(\"exactly one space required after that #$1\\n\" . $herecurr);",109],["ERROR(\"space required after that close brace '}'\\n\" . $herecurr);",106],["ERROR(\"space required one side of that '$op' $at\\n\" . $hereptr);",106]],"useCount":9348},{"word":"res","context":[["my @res = ();",377],["my $res = '';",649],["my $res;",929],["$res .= ' ';",607],["return $res;",2186],["substr($res, $off, 2, \"$;$;\");",599],["substr($res, $off, 1, $c);",598],["substr($res, $off, 1, $;);",580],["my $res=\"",469],["return ($function_name,$res);",445]],"useCount":35582},{"word":"response","context":[["my $response = $ua->request($request);",162],["mtr_error(\"Unknown response: '$line' from client\");",119],["# Pass request to the user agent and get a response back",100],["return $response;",187],["my $response = $request->getResponse();",91],["my $response = $ua->get($url);",89],["my $response;",275],["if ($response->is_success) {",300],["# Log SOAP XML request, response and API errors.",446],["$response = $session->status_detail();",253]],"useCount":7503},{"word":"restart","context":[["mark_time_used('restart');",324],["a restart when modified",132],["verbose-restart       Write when and why servers are restarted",119],["my @restart= servers_need_restart($tinfo);",119],["# Remember current config so a restart can occur when a test need",119],["mtr_verbose_restart($server, \"no restart for --extern server\");",119],["if ( @restart != 0) {",119],["mtr_verbose(\"Test says wait before restart\") if $waits == 0;",119],["# expected crash and restart it.",128],["'verbose-restart'          => \\&report_option,",119]],"useCount":6035},{"word":"restore","context":[["mov\t%rax,152($context)\t# restore context->Rsp",372],["restore",620],["mov\t%rdi,176($context)\t# restore context->Rdi",378],["mov\t%rsi,168($context)\t# restore context->Rsi",378],["mov\t%rbx,144($context)\t# restore context->Rbx",380],["mov\t%r15,240($context)\t# restore context->R15",237],["mov\t%r14,232($context)\t# restore context->R14",270],["mov\t%r13,224($context)\t# restore context->R13",275],["mov\t%rbp,160($context)\t# restore context->Rbp",372],["mov\t%r12,216($context)\t# restore context->R12",308]],"useCount":8238},{"word":"result","context":[["# timestamp test result verification end",329],["my @result;",351],["push(@$completed, $result);",357],["return @result;",362],["return $result;",2206],["my $result = GetOptions(",392],["my $result= $input->param('result');",428],["my $result= $input->param('result');",428],["$result;",430],["my $result;",1608]],"useCount":45895},{"word":"results","context":[["push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));",162],["return @results;",159],["my $lines = @$results[0]->{looprow};",153],["Limit the results to entities where the given field has the given value.",160],["my @results;",686],["my %results;",470],["mtr_error(\"MTR_BUILD_THREAD number results in a port\",",147],["my $resultsForId = $results{$id};",306],["push @{$results{$from_id}}, [@from, @rel, @to];",306],["Limit the results to entities where the given field is LIKE (in the sql sense) the given value.",160]],"useCount":16514},{"word":"ret","context":[["$ret = 1;",398],["return($ret);",624],["&ret\t();",792],["my $ret;",891],["$ret=`$cmd`;",941],["return $ret;",2328],["return @ret;",431],["$ret;",533],["ret",4328],["if ($ret) {",528]],"useCount":39824},{"word":"return","context":[["return <<'END';",12483],["return 0;",22798],["return undef;",6701],["return \"\";",2943],["return -1;",2811],["return $ret;",2328],["return $result;",2206],["return $res;",2186],["return 1;",26088],["return;",33466]],"useCount":292848},{"word":"right","context":[["# ignore definitions of NR_CPUS and usage to define arrays as likely right",280],["# the equals (or colon) can be combined with anything to the right.  Thus,",2251],["# header top-right",92],["\"<td align=right>\"",110],["justify\t\t=> 'right',",116],["exp_name        => \"right\",",128],["<th align=\"right\" nowrap>| .",140],["# anything to the right.  Thus, for example,",150],["<td align=right>",203],["# , must have a space on the right.",241]],"useCount":11877},{"word":"rm","context":[["$rm = 'rm' if (!$rm);",49],["$ret=`rm -fr \"$BUILDROOT\"`;",49],["$rm = 'rm' if (!$rm);",49],["print \"usage: $P arch endian bits objdump objcopy cc ld nm rm mv is_module inputfile\\n\";",51],["$ld, $nm, $rm, $mv, $is_module, $inputfile) = @ARGV;",59],["`$rm $mcount_o $mcount_s`;",63],["#    \"'$nm' '$rm' '$mv' '$inputfile'\\n\";",63],["`$rm $globalobj $globalmix`;",63],["system(\"rm __$foldFile* $foldFile*\");",65],["$ret=`rm -fr $BUILDROOT/$PROJECT.tmp`;",70]],"useCount":7841},{"word":"rndkey0","context":[["aesenc\t\t$rndkey0,$inout2",94],["?vperm\t\t$rndkey0,$rndkey0,$rndkey1,$keyperm",132],["aesenc\t\t$rndkey0,$inout1",94],["?vperm\t\t$rndkey0,$rndkey0,$rndkey1,$keyperm",132],["$movkey\t($key),$rndkey0",104],["aesenc\t\t$rndkey0,$inout4",88],["aesenc\t\t$rndkey0,$inout0",100],["$movkey\t\t($key),$rndkey0",97],["&$movekey\t($rndkey0,&QWP(0,$key));",96],["aesenc\t\t$rndkey0,$inout3",94]],"useCount":7244},{"word":"rndkey1","context":[["aesenc\t\t$rndkey1,$inout1",166],["aesenc\t\t$rndkey1,$inout2",166],["aes${dir}\t$rndkey1,$inout1",158],["aesenc\t\t$rndkey1,$inout0",175],["aes${dir}\t$rndkey1,$inout0",158],["aesenc\t\t$rndkey1,$inout3",156],["aesenc\t\t$rndkey1,$inout4",137],["aesenc\t\t$rndkey1,$inout5",137],["?vperm\t\t$rndkey0,$rndkey0,$rndkey1,$keyperm",132],["aes${dir}\t$rndkey1,$inout2",132]],"useCount":6469},{"word":"root","context":[["die \"$P: $root: --root does not point at a valid tree\\n\";",296],["die \"$P: $root: --root does not point at a valid tree\\n\";",296],["$root = '.';",297],["if (defined $root) {",298],["'root=s'\t=> \\$root,",295],["'root=s'\t=> \\$root,",295],["mtr_add_arg($args, \"--user=root\");",297],["my ($root) = @_;",305],["$root = $1;",307],["my $root;",361]],"useCount":10379},{"word":"round","context":[["vstmia\tr12, {@XMM[7]}\t\t\t@ save last round key",104],["veor\t@XMM[7],@XMM[7],@XMM[15]\t@ fix up last round key",78],["\"used \\\"round robin\\\"\");",90],["vstmia\tr12,  {@XMM[15]}\t\t@ save last round key",104],["sub\tr12, sp, $rounds, lsl#7\t\t@ 128 bytes per inner round key",104],["veor\t@XMM[7], @XMM[7], @XMM[6]\t@ fix up round 0 key",130],["sub round {",160],["# check for redundant bracing round if etc",276],["# check for spacing round square brackets; allowed:",296],["vld1.64\t\t{@XMM[8]}, [r0,:128]\t\t@ next round tweak",364]],"useCount":7360},{"word":"rounds","context":[["sub\t$rounds,$rounds,#1",147],["mov\tr5, $rounds\t\t\t@ pass # of rounds",208],["subs\t$rounds,$rounds,#1",216],["mov\t\tr5, $rounds\t\t\t@ pass rounds",390],["mov\t\tr5, $rounds\t\t\t@ pass rounds",390],["mov\t%edx, %r10d\t\t# pass rounds",216],["subs\t$rounds,$rounds,#1",216],["mov\tr5, $rounds\t\t\t@ pass # of rounds",208],["mtctr\t\t$rounds",162],["sub\t$rounds,$rounds,#1",147]],"useCount":12810},{"word":"row","context":[["my @data = @$row;",235],["$row++;",431],["my @row;",259],["my ($Sheet, $row, $col) = @_;",191],["my $row;",395],[")->grid(-row=>$$row,-column=>0,-sticky=>'ewns');",226],[")->grid(-row=>$$row,-column=>0,-sticky=>'ewns');",226],["'type' => 'row'",199],["my %row = (",452],["for($row=1;$row < @PARTITION_FIELD;$row++){",191]],"useCount":28628},{"word":"rows","context":[["($result, $rows) = &do_multi_result_sql_query2($global_var_href, $sql, \\@sql_parameters, $sr_name . \"-\" . __LINE__ );",204],["my @rows = ();",86],["$rows = 2;",93],["unless ($rows > 0) {",116],["my ($page, $sql, $result, $rows, $row, $i);",108],["if ($rows) {",94],["my @rows;",248],["$sthArows=$sthA->rows;",237],["for ($i=0; $i<$rows; $i++) {",209],["$rows = scalar @{ $form->{item_list} };",119]],"useCount":7817},{"word":"rsi","context":[["mov\t40(%rsi),%r10\t\t# disp->ContextRecord",331],["mov\t$disp,%rsi",331],["lea\t24(%rsi),%r12\t\t# &disp->EstablisherFrame",331],["mov\t0(%rsi),%r8\t\t# arg3, disp->ControlPc",331],["push\t%rsi",524],["mov\t%rsi,168($context)\t# restore context->Rsi",378],["mov\t8($disp),%rsi\t\t# disp->ImageBase",332],["pop\t%rsi",332],["mov\t16(%rax),%rsi",369],["lea\t(%rsi,%r10),%r10\t# epilogue label",334]],"useCount":12822},{"word":"rsp","context":[["mov\t%rsp,%rax",329],["and\t\\$-64,%rsp",213],["lea\t(%rsi),%rsp",212],["lea\t48(%rsi),%rsp",291],["add\t\\$64,%rsp",322],["mov\t%r10,32(%rsp)\t\t# arg5",331],["mov\t%rcx,56(%rsp)\t\t# arg8, (NULL)",331],["mov\t%r11,40(%rsp)\t\t# arg6",331],["mov\t%r12,48(%rsp)\t\t# arg7",331],["sub\t\\$64,%rsp",526]],"useCount":39751},{"word":"rules","context":[["$rules.= &do_lib_rule(\"\\$(CRYPTOOBJ) \\$(O_FIPSCANISTER)\",",44],["rules           => <<EOF",2150],["rules\t\t=> <<EOF",1490],["'rules' => [",96],["do 'make-rules.pl';",74],["rules                => <<EOF",48],["if ($rules->{exp_add_error}) {",46],["('dewey', 'Default filing rules for DDC', 'Dewey'),",39],["('lcc', 'Default filing rules for LCC', 'LCC'),",39],["# perluniprops.pod should be consulted for the syntax rules for any of these,",2468]],"useCount":9343},{"word":"run","context":[["--no-tree                  run without a kernel tree",267],["# uncomment this to run the ### lines",293],["# if script decided to run mysqltest cluster _is_ installed ok",214],["My::SafeProcess->run",214],["my $res= My::SafeProcess->run",222],["$R->run(q` data = data.frame() `);",220],["print \"Must be run from the top-level dir. of a kernel tree\\n\";",285],["# Don't run the example if the file is being included.",449],["sub run {",432],["$R->run(q` library(ggplot2) `,",293]],"useCount":33818},{"word":"running","context":[["# Kill any check processes still running",357],["manual-gdb            Let user manually start mysqld in gdb, before running",145],["manual-ddd            Let user manually start mysqld in ddd, before running",145],["mtr_error(\"No, don't remove the vardir when running with --extern\")",147],["mtr_warning(\"running this script as _root_ will cause some \" .",147],["# Check if running as root",149],["running test(s)",149],["Options to run test on running server",149],["# Run test on running server",149],["# if running in valgrind(to avoid valgrinding bash)",185]],"useCount":10910},{"word":"rv","context":[["return $rv;",1838],["return @rv;",1601],["local @rv;",781],["my $rv;",727],["my @rv;",517],["$rv = 0;",374],["local $rv;",223],["if (!$rv || $rv->code) {",212],["if (!$rv || $rv->code) {",212],["my $rv = 1;",199]],"useCount":18985},{"word":"s","context":[["s/^\\s+//;",822],["next if /^\\s*$/;",730],["# Circulation and User's Management. It's written in Perl, and uses Apache2",754],["s/^\\s+//;",822],["mtr_add_arg($args, \"--defaults-file=%s\", $path_config_file);",1484],["s/\\s+$//;",982],["s/\\s+$//;",982],["substr($s, 0, length($c), '');",890],["return $s;",841],["# Circulation and User's Management. It's written in Perl, and uses Apache2",754]],"useCount":553783},{"word":"s0","context":[["mov\t$s0,$s0,lsr#24",90],["mov\t$s0,$s0,lsr#24",90],["and\t$i2,lr,$s0,lsr#8",92],["rev\t$s0,$s0",95],["rev\t$s0,$s0",95],["xor\t$t0,$s0",112],["shr\t\\$16,$s0",112],["movzb\t`&hi(\"$s0\")`,$acc1",112],["&xor\t($s0,&DWP(0,$key));",124],["&xor\t($s0,&DWP(16*$i+0,$key));",132]],"useCount":13213},{"word":"s1","context":[["shr\t\\$16,$s1",112],["xor\t4($key),$s1",124],["xor\t$t1,$s1",128],["movzb\t`&hi(\"$s1\")`,$acc0",132],["&xor\t($s1,&DWP(16*$i+4,$key));",132],["&mov\t(&DWP(4,$acc),$s1);",164],["mov\t$s1,4($out)",164],["&mov\t($s1,&DWP(4,$acc));",164],["&mov\t(&DWP(4,$key),$s1);",204],["&xor\t($s1,&DWP(4,$key));",282]],"useCount":15175},{"word":"s2","context":[["xor\t$t2,$s2",154],["&mov\t(&DWP(8,$acc),$s2);",164],["mov\t$s2,8($out)",164],["&mov\t($s2,&DWP(8,$acc));",164],["xor\t8($key),$s2",124],["&mov\t($s2,$_len);\t\t# load len",132],["&mov\t($_len,$s2);\t\t# save len",132],["&xor\t($s2,&DWP(16*$i+8,$key));",132],["&xor\t($s2,&DWP(8,$key));",282],["&mov\t(&DWP(8,$key),$s2);",204]],"useCount":14626},{"word":"s3","context":[["movzb\t`&hi(\"$s3\")`,$acc0",152],["&xor\t($s3,&DWP(16*$i+12,$key));",132],["xor\t$t3,$s3",154],["&mov\t(&DWP(12,$acc),$s3);",164],["&mov\t($s3,&DWP(12,$acc));",164],["mov\t$s3,12($out)",164],["&mov\t(&DWP(12,$key),$s3);",204],["&xor\t($s3,&DWP(12,$key));",282],["xor\t12($key),$s3",124],["&mov\t($s3,&DWP(12,$key));",126]],"useCount":14039},{"word":"same","context":[["# same line do not need a level, so we use the current block context",285],["# function brace can't be on same line, except for #defines of do while,",302],["# open braces for enum, union and struct go on the same line.",300],["# or if closed on same line",302],["# statements should be at the same indent.",303],["# Check for }<nl>else {, these must be at the same",303],["it under the same terms as Perl itself.",663],["# modify it under the same terms as Perl itself.",203],["under the same terms as Perl itself.",199],["#     Note that contrary to what you might expect, the above is NOT the same",512]],"useCount":12089},{"word":"sanitise_quote","context":[["if ($sanitise_quote eq '') {",299],["} elsif ($off != 0 && $sanitise_quote && $c ne \"\\t\") {",299],["my $sanitise_quote = '';",299],["if ($sanitise_quote eq '' && substr($line, $off, 2) eq '/*') {",299],["} elsif ($sanitise_quote eq $c) {",299],["if ($off != 0 && $sanitise_quote eq '*/' && $c ne \"\\t\") {",299],["$sanitise_quote = $c;",299],["$sanitise_quote = '*/';",598],["$sanitise_quote = '';",1178],["if (($sanitise_quote eq \"'\" || $sanitise_quote eq '\"') &&",299]],"useCount":6457},{"word":"save","context":[["'subcategory' => 'client save rc file',",317],["sub save {",156],["# Start the mysqltest processes in parallel to save time",354],["&mov\t($_len,$s2);\t\t# save len",132],["&mov\t($_inp,$acc);\t\t# save inp",138],["'max-save-core=i'          => \\$opt_max_save_core,",149],["max-save-core         Limit the number of core files saved (to avoid filling",149],["'max-save-datadir=i'       => \\$opt_max_save_datadir,",119],["max-save-datadir      Limit the number of datadir saved (to avoid filling",119],["# Before a testcase, run in record mode and save result file to var/tmp",119]],"useCount":12597},{"word":"say","context":[["say   \"\\n\\n\\n\\n\\n\\n##################################################################################################\";",251],["say",139],["use feature 'say';",248],["say \"\";",221],["say format_date(DateTime->now), \" \", $message;",204],["use feature qw(say);",159],["say $impl '}';",80],["quest::say(\"You have done well.\");",86],["say $impl \"        break;\";",120],["say '';",127]],"useCount":6532},{"word":"scalar","context":[["$pipe->print($scalar);",128],["#print $scalar;",128],["tie *STDOUT, 'IO::Scalar', \\$scalar;",128],["if (scalar(@ARGV) == 0)",138],["printf $log_fh \"FILE RECS : %d\\n\", scalar(@{$pu01->{data}});",154],["if (scalar(@parts) >= 9)",384],["if (scalar(@subkeys) > 0) {",157],["if ( !scalar %SectionsToLoad ) {",184],["my $cnt = scalar(@$catcodes);",195],["if (scalar(@vals) > 0) {",289]],"useCount":20418},{"word":"script","context":[["<script>",652],["<script type=\"text/javascript\">",339],["<script type=\\\"text/javascript\\\">",359],["# Before `make install' is performed this script should be runnable with",236],["Print this script's manual page and exit.",227],["<script type='text/javascript'>",226],["# if script decided to run mysqltest cluster _is_ installed ok",214],["# all port numbers might not be used in this version of the script.",149],["</script>",1876],["<form method=post action=$form->{script}>",934]],"useCount":24620},{"word":"search","context":[["# The following should only be loaded if we're bringing up the advanced search template",61],["sub search {",163],["my $rv = $dbh->search(",163],["# search to that.",124],["# determine what to display next to the search boxes (ie, boolean option",59],["# Remember this log file for valgrind error report search",120],["--follow_symlinks    follow symlinks in search directories",114],["# Motion search",64],["#Create a search pattern for all these functions to speed up a loop below",82],["--restart_directory  the directory to search for",114]],"useCount":6101},{"word":"section","context":[["$pdb->{$section}->{$machine}{$lane}{$stage}{state} = DELTA;",1151],["foreach my $prow (@{$pu01->{$section}->{data}})",522],["my $pcols = $pu01->{$section}->{column_names};",522],["my $section = MOUNTPICKUPFEEDER;",555],["$section_precision = $report_precision{$section}{precision};",589],["$report_precision{$section}{precision} = 0;",595],["delete $pdb->{$section}->{$machine}{$lane}{$stage}{cache};",718],["my $section = MOUNTPICKUPNOZZLE;",724],["$pdb->{$section}->{$machine}{$lane}{$stage}{state}",980],["$pdb->{$section}->{$machine}{$lane}{$stage}{delta}{$key};",1142]],"useCount":56407},{"word":"see","context":[["# details see http://www.openssl.org/~appro/cryptogams/.",1012],["Catalyst Contributors, see Catalyst.pm",578],["# For details, please see",149],["them to the maintainer, see CHECKPATCH in MAINTAINERS.",174],["\"Use of volatile is usually wrong: see Documentation/volatile-considered-harmful.txt\\n\" . $herecurr);",182],["\"Use of CONFIG_EXPERIMENTAL is deprecated. For alternatives, see https://lkml.org/lkml/2012/10/23/580\\n\");",256],["# It is, so see if the prefix is acceptable.",280],["# If we see an #else/#elif then the code",294],["# Pull in the following conditional/block pairs and see if they",299],["# and COPYING for more information, or see http://slashcode.com/.",374]],"useCount":12581},{"word":"select","context":[[".qq|</select></td>",109],["</select>",367],["select(STDOUT);",353],["select STDOUT;",324],[".qq|</select>",215],["select",169],["print \"</select>\\n\";",148],["-values   => \\@select,",120],["push @select, $value;",119],["<td><xsl:value-of select=\"@comment\"/></td>",104]],"useCount":14280},{"word":"selected","context":[["client-debugger=NAME  Start mysqltest in the selected debugger",145],["my $selected = 0;",143],["debugger=NAME         Start mysqld in the selected debugger",145],["# Modify the exe and args so that program is run in the selected debugger",149],["my $selected;",161],["$selected{$i} = !$selected{$i}",176],["$selected{$i} = !$selected{$i}",176],["selected => $selected,",249],["selected => $selected,",249],["selected => 0, installed => 0, rpm_exist => 0, rpm_exist32 => 0,",362]],"useCount":7842},{"word":"self","context":[["my $self = (ref $_[0]? shift : $Self);",202],["return $self;",1375],["my ($self) = @_;",2072],["my $self = shift;",7009],["++$$self{CHANGED};",202],["bless $self, $class;",316],["my $self = {};",261],["my $self = {",259],["$ret = $self;",217],["my ($self,$b,$p,$e,$rt) = @_;",208]],"useCount":49207},{"word":"seq","context":[["my $seq;",260],["my $seq = shift;",223],["$seq .= $_;",210],["$seq = \"\";",181],["chomp $seq;",159],["return $seq;",157],["my $seq = \"\";",130],["my $seq = '';",99],["$seq .= $line;",98],["filter_file($seq, $fpath, $fname,",94]],"useCount":7576},{"word":"server","context":[["'subcategory' => 'server',",564],["stopserver($server, \"$pid2\");",277],["$server = servername_id($proto, $ipvnum, $idnum);",277],["stopserver($server, \"$pid\");",277],["logmsg \"RUN: failed to start the $srvrname server\\n\";",277],["# don't retry if the server doesn't work",291],["# failed to talk to it properly. Kill the server and return failure",304],["my $server;",391],["# By default examples are set to die on any server returned fault.",446],["'subcategory' => 'client+server',",545]],"useCount":41776},{"word":"servers","context":[["before killing servers (default $opt_shutdown_timeout)",119],["# Filter a list of servers and return the SafeProcess",119],["# Run script on all servers, collect results",119],["mtr_print( \"All servers exited\" );",119],["servers to exit before finishing the process",119],["# Open the servers .err log file and read all lines",155],["debug                 Dump trace output for all servers and client programs",149],["# when starting the servers or due to other error, the reason for",135],["foreach my $server (@servers)",122],["start-dirty           Only start the servers (without initialization) for",149]],"useCount":7001},{"word":"session","context":[["$session->close;",613],["C4::AR::Auth::output_html_with_http_headers($template, $t_params, $session);",566],["C4::AR::Auth::print_header($session);",356],["($session, $error) = Net::SNMP->session(",311],["($session, $error) = Net::SNMP->session(",311],["$response = $session->status_detail();",253],["$result = $session->status_code();",252],["my ($template, $session, $t_params) = get_template_and_user({",224],["session => $session,",184],["session => $session,",184]],"useCount":13433},{"word":"set","context":[["$report_precision{$section}{set} = FALSE;",340],["# Add the actors to the renderer, set the background and size",231],["return unless ($report_precision{$section}{set} == FALSE);",255],["$report_precision{$section}{set} = TRUE;",255],["--fields list   Choose a set of fields to return. List is a comma-separated list of strings.",320],[".set\tnoreorder",727],["Choose a set of fields from the relationship to return. Field-list is a comma-separated list of",612],["is a tab-separated set of fields).  Normally, the last field in each",493],["# By default examples are set to die on any server returned fault.",446],[".set\treorder",425]],"useCount":35239},{"word":"shift","context":[["my $name = shift;",1520],["my $msg = shift;",933],["my $class = shift;",1383],["my $filename = shift;",1474],["shift @ARGV;",1766],["my $text = shift;",1839],["shift;",2059],["my $file = shift;",2776],["my $self = shift;",7009],["eval(shift(@insns));",14269]],"useCount":140562},{"word":"should","context":[["# if and else should not have general statements after it",303],["# Indicate the exe should not be started",618],["# '*'s should not have spaces between.",584],["The standard input should be a tab-separated table (i.e., each line",492],["# perluniprops.pod should be consulted for the syntax rules for any of these,",2468],["# ; should have either the end of line or a space or \\ after it",303],["\"trailing statements should be on next line\\n\" . $herecurr);",386],["\"externs should be avoided in .c files\\n\" .  $herecurr);",374],["# closing brace should have a space following it when it has anything",303],["# statements should be at the same indent.",303]],"useCount":35313},{"word":"show","context":[["if ($value eq \"--gen-suppressions=all --show-reachable=yes\") {",148],["--show-fields",386],["--show-fields   List the available fields.",320],["my @default_valgrind_args= (\"--show-reachable=yes\");",141],["\"show-fields\"\t=> \\$show_fields,",306],["'show-types!'\t=> \\$show_types,",190],["--show-types               show the message \"types\" in the output",173],["--show-types               show the message \"types\" in the output",173],[");    # we show only the TMPL_VAR names $op",164],["\"show-fields\"\t => \\$show_fields,",160]],"useCount":7707},{"word":"since","context":[["'hg-since=s' => \\$email_hg_since,",53],["# We do this here, since we do not want to Valgrind the nested invocations",149],["timediff              With --timestamp, also print time passed since",119],["# Skip --defaults-file option since it's handled above.",108],["# However: since this usage is present in some number of cases, we'll allow for now",63],["'git-since=s' => \\$email_git_since,",59],["# since ARMv7 instructions are always encoded little-endian.",55],["Use --hg-since not --git-since to control date selection",53],["Use --hg-since not --git-since to control date selection",53],["--hg-since => hg history to use (default: $email_hg_since)",47]],"useCount":7614},{"word":"single","context":[["# Run a single test case",119],["If correctable single-line errors exist, create",103],["# Return as a single string",119],["# This file returns the single code point in Unicode Version 6.1.0 that",133],["# single-statement macros do not need to be enclosed in do while (0) loop,",138],["\"single byte memset is suspicious. Swapped 2nd/3rd argument?\\n\" . \"$here\\n$stat\\n\");",173],["\"braces {} are not necessary for single statement blocks\\n\" . $herectx);",187],["# This file returns the single code point in Unicode Version 5.2.0 that",272],["#goto labels aren't indented, allow a single space however",282],["# Put $args into a single string",302]],"useCount":8520},{"word":"size","context":[["blockquote.smallquotation {font-size: smaller}",290],["pre.smalllisp {font-size: smaller}",290],["pre.smallexample {font-size: smaller}",290],["-size     => 1,",591],["<td><hr size=3 noshade></td>",779],["\"__aligned(size) is preferred over __attribute__((aligned(size)))\\n\" . $herecurr);",181],["my $size = 0;",244],["# Add the actors to the renderer, set the background and size",231],["size=\\\"67\\\"",191],["\"__aligned(size) is preferred over __attribute__((aligned(size)))\\n\" . $herecurr);",181]],"useCount":28562},{"word":"skip","context":[["$skip = 0;",219],["$skip = 1;",449],["mtr_report(\" - skipping ndbcluster(--skip-ndbcluster)\");",156],["#print \"skip<$line_nr_next>\\n\";",173],["my $skip = 0;",169],["# Testcase itself tell us to skip this one",149],["skip-rpl              Skip the replication test cases.",149],["# If marked to skip, just print out and return.",149],["# Note that a test case not marked as 'skip' can still be",149],["if ( $arg =~ /^--skip-/ )",149]],"useCount":12453},{"word":"sleep","context":[["sleep 3;",160],["sleep(3);",172],["sleep(10);",176],["sleep(1);",1522],["sleep 1;",1378],["sleep 2;",560],["sleep 10;",208],["sleep(5);",272],["sleep(2);",326],["sleep 5;",383]],"useCount":9893},{"word":"so","context":[["# This is not a patch, and we are are in 'no-patch' mode so",300],["#---- if primkey exists, it's a modify action, so read values to modify...",196],["# It is, so see if the prefix is acceptable.",280],["# same line do not need a level, so we use the current block context",285],["# We are truly at the end, so shuffle to the next line.",296],["# starting at the end of the conditional, so remove:",296],["# so just keep quiet.",299],["# blank context lines so we need to count that too.",303],["# furnished to do so, subject to the following conditions:",325],["# Save this test case information, so next can examine it",179]],"useCount":20285},{"word":"soap","context":[["$soap->autotype(0);",30],["\"ext/soap/tests/bugs/bug50698_3.phpt\",",23],["\"ext/soap/tests/server030.phpt\",",23],["\"ext/soap/tests/soap12/T54.phpt\",",23],["\"ext/soap/tests/interop/Round2/Base/r2_base_005s.phpt\",",23],["\"ext/soap/tests/interop/Round2/Base/r2_base_016s.phpt\",",23],["\"ext/soap/tests/interop/Round2/Base/r2_base_017p.phpt\",",23],["$result = $soap->call($method => @query);",24],["my $soap = SOAP::Lite",27],["printf STDERR (\"\\n i  %55s : %-25s\",\"input blast(m=8)/soap result\",$infile);#%45s",42]],"useCount":12144},{"word":"some","context":[["mtr_warning(\"running this script as _root_ will cause some \" .",147],["# declined it, i.e defined some charset where it is missing.",136],["# On some operating systems, there is a limit to the length of a",147],["# Running with \"var\" in some other place",149],["# distributions, TAR binary distributions and some other packages.",149],["# Runinng with \"var\" as a link to some \"memory\" location, normally tmpfs",149],["# foo bar; where foo is some local typedef or #define",160],["######################### We start with some black magic to print on failure.",164],["# some versions, test using it should be skipped",179],["line would contain the id. If some other column contains the id,",386]],"useCount":9238},{"word":"sort","context":[["foreach my $machine (sort { $a <=> $b } keys %{$totals{$section}{by_machine}})",222],["foreach my $product (sort keys %{$totals{by_product}})",618],["foreach my $key (sort keys %{$totals{$section}{by_machine}{$machine}})",306],["foreach my $key (sort keys %{$totals{$section}{by_machine_lane}{$machine}{$lane}})",301],["# Check for any sort of function declaration.",300],["foreach my $product (sort keys %{$totals{$section}{by_product}})",286],["#     foreach my $product (sort keys %{$totals{$section}{by_product}})",255],["sort {",237],["foreach my $machine (sort { $a <=> $b } keys %{$totals{$section}{by_machine_lane}})",222],["foreach my $lane (sort { $a <=> $b } keys %{$totals{$section}{by_machine_lane}{$machine}})",221]],"useCount":28036},{"word":"source","context":[["# Redistribution and use in source and binary forms, with or without",921],["mtr_error(\"Coverage test needs the source - please use source dist\");",147],["Redistribution and use in source and binary forms, with or without",745],["# check we are in a valid source file if not then ignore this hunk",303],["# check we are in a valid C source file if not then ignore this hunk",293],["# check we are in a valid source file C or perl if not then ignore this hunk",284],["-f, --file                 treat FILE as regular source file",279],["# This file contains source code included with or based on SQL-Ledger which",164],["mtr_error(\"Coverage test needs the source - please use source dist\");",147],["# is the parent directory of the \"mysql-test\" directory. For source",145]],"useCount":14725},{"word":"sp","context":[["mtr_add_arg($args, \"--sp-protocol\");",147],["vstmdb\tsp!,{d8-d15}\t\t@ ABI specification says so",146],["'sp-protocol'              => \\$opt_sp_protocol,",147],["sp-protocol           Create a stored procedure to execute all queries",147],["ldmia\tsp!,{r4-r12,pc}",158],["add\tx29,sp,#0",177],["mov\t\tr1, sp",130],["vst1.8\t\t{@XMM[0]}, [sp,:128]",130],["add\t\tr4, sp, #0x90\t\t\t@ pass key schedule",364],["mov\t\tr0, sp",598]],"useCount":26018},{"word":"space","context":[["# Should start with a space.",584],["# if there is a space between the name and the open",298],["# including if adding or subtracting white space, underscore, and hyphen",2480],["# Should not end with a space.",584],["# Need a space before open parenthesis after if, while etc",304],["#need space before brace following if, while, etc",303],["# closing brace should have a space following it when it has anything",303],["# unary ++ and unary -- are allowed no space on one side.",303],["# ; should have either the end of line or a space or \\ after it",303],["# unary operators should have a space before and",300]],"useCount":20721},{"word":"spaces","context":[["# All the others need spaces both sides.",303],["# Modifiers should have spaces.",292],["# A colon needs no spaces before when it is",296],["# No spaces for:",297],["# cpp #define statements have non-optional spaces, ie",298],["# check for spaces between functions and their parentheses.",301],["'type' => 'spaces'",1729],["#no spaces allowed after \\ in define",303],["# '*'s should not have spaces between.",584],["'spaces',",1729]],"useCount":10403},{"word":"spaces_at_end","context":[["'type' => 'spaces_at_end'",6008]],"useCount":6008},{"word":"specialize","context":[["specialize qw/vp9_iwht4x4_16_add/;",73],["specialize qw/vp9_idct32x32_34_add/;",46],["specialize qw/vp9_fht4x4 sse2/;",47],["specialize qw/vp9_fwht4x4/, \"$mmx_x86inc\";",47],["specialize qw/vp9_fht8x8 sse2/;",47],["specialize qw/vp9_fht16x16 sse2/;",47],["specialize qw/vp9_iht8x8_64_add/;",60],["specialize qw/vp9_iht4x4_16_add/;",60],["specialize qw/vp9_iht16x16_256_add/;",60],["specialize qw/vp9_iwht4x4_1_add/;",73]],"useCount":19355},{"word":"species","context":[["$producers = $kpp->producing($species);",211],["$producer_yields = $kpp->effect_on($species, $producers);",211],["members => $families{$species},",196],["weights => $weights{$species},",196],["name    => $species,",196],["$carbons{$species} = $C_number;",191],["$consumers = $kpp->consuming($species);",187],["$consumer_yields = $kpp->effect_on($species, $consumers);",187],["sub get_no2_reservoirs { #get species that are produced when radical species react with NO2",178],["sub get_no2_reservoirs { #get species that are produced when radical species react with NO2",178]],"useCount":6631},{"word":"specified","context":[["# read the list of experimental test cases from the files specified on",118],["must be specified using name-value pair notation",119],["combination=<opt>     Use at least twice to run tests with specified",119],["startup settings for the first specified test case",119],["the first specified test case",119],["\"--valgrind-option=s, to be specified several\",",148],["can be specified more then once",149],["# Running against an already started server, if the specified",149],["# Turn off verbosity in workers, unless explicitly specified",119],["# of the specified cluster",103]],"useCount":7301},{"word":"spl","context":[["\"ext/spl/tests/SplDoublyLinkedList_isEmpty_empty.phpt\",",23],["\"ext/spl/tests/iterator_010.phpt\",",23],["\"ext/spl/tests/SplFileObject_fputcsv_variation8.phpt\",",23],["\"ext/spl/tests/iterator_052.phpt\",",23],["\"ext/spl/tests/arrayObject___construct_basic1.phpt\",",23],["\"ext/spl/tests/fixedarray_012.phpt\",",23],["\"ext/spl/tests/iterator_068.phpt\",",23],["\"ext/spl/tests/spl_maxheap_compare_basic.phpt\",",23],["\"ext/spl/tests/array_022.phpt\",",23],["\"ext/spl/tests/spl_classes.phpt\",",23]],"useCount":12781},{"word":"split","context":[["@to_fields = split(\",\", $t);",306],["for my $arg (split(/\\s*,\\s*/, $ctx)) {",300],["my @elements = split(/($ops|;)/, $opline);",300],["my @line = split /\\t/;",658],["my @a = split \"\\t\";",382],["@aux = split;",311],["for my $c (split(//, $str)) {",304],["@from_fields = split(\",\", $f);",306],["@rel_fields = split(\",\", $r);",306],["my @x = split(/\\t/);",307]],"useCount":41707},{"word":"sprintf","context":[["sprintf(\"%4d-%02d-%02d %02d:%02d:%02d\", $year+1900, $mon+1, $day, $hour, $min, $sec);",111],["or fatal(sprintf(\"Couldn't prepare query: %s\", $dbh->errstr));",119],["return\tsprintf \".word\\t0x%08x !%s\",",123],["my $hexval = sprintf(\"0x%x\", oct($var));",99],["$field = sprintf(\"%4s\",$atom[$iatm]);",95],["sprintf \"\\t.WORD\\t0x%08x\\t; %s\",$opcode,$orig;",124],["or fatal(sprintf(\"Couldn't execute query: %s\", $dbh->errstr));",133],["sprintf(\"(%s)...\\n\\n\", (not $fullstats)?\"top $counter\":\"full\");",174],["sprintf(",182],["$coded = sprintf(\"^%c\", unpack('C', $2) + 64);",300]],"useCount":13748},{"word":"sql","context":[["my $bootstrap_sql_file= \"$opt_vardir/tmp/bootstrap.sql\";",147],["# Create the bootstrap.sql file",147],["Limit the results to entities where the given field is LIKE (in the sql sense) the given value.",160],["my $sql;",184],["$dbh->do($sql);",191],["($result, $rows) = &do_multi_result_sql_query2($global_var_href, $sql, \\@sql_parameters, $sr_name . \"-\" . __LINE__ );",204],["#     Web: http://www.sql-ledger.org",207],["$sql->execute();",248],["my $sth = $dbh->prepare($sql);",496],["$sth = $dbh->prepare($sql);",348]],"useCount":14697},{"word":"square","context":[["ERROR(\"space prohibited after that open square bracket '['\\n\" . $herecurr);",106],["# check spacing on square brackets",303],["\"space prohibited before that close square bracket ']'\\n\" . $herecurr) &&",103],["ERROR(\"space prohibited before open square bracket '['\\n\" . $herecurr);",103],["ERROR(\"space prohibited before that close square bracket ']'\\n\" . $herecurr);",106],["square(o4).",166],["square(o3).",212],["square(o1).",264],["square(o2).",276],["# check for spacing round square brackets; allowed:",296]],"useCount":7605},{"word":"src","context":[["[\"storage/ndb/src/mgmclient\", \"bin\"],",193],["[\"storage/ndb/src/kernel\", \"libexec\", \"sbin\", \"bin\"],",193],["# Chop off any \"c:\", DBUG likes a unix path ex: c:/src/... => /src/...",149],["# Chop off any \"c:\", DBUG likes a unix path ex: c:/src/... => /src/...",149],["my ($src, $dst) = @_;",143],["print \"<img src='img/blank.gif' alt='' width='250' height='1'><br>\";",140],["my $src = shift;",136],["[\"storage/ndb/src/mgmsrv\", \"libexec\", \"sbin\", \"bin\"],",103],["src++;",98],["print CSH \"awk '{print \\$1,\\$2}' $evefile |psxy -N $J $R -K -O -P -V $src >> $psfile\\n\";",94]],"useCount":9996},{"word":"sse2_x86inc","context":[["specialize qw/vp9_sub_pixel_avg_variance8x16/, \"$sse2_x86inc\", \"$ssse3_x86inc\";",28],["$sse2_x86inc = 'sse2';",62],["$mmx_x86inc = $sse_x86inc = $sse2_x86inc = $ssse3_x86inc = $avx_x86inc =",32],["$mmx_x86inc = $sse_x86inc = $sse2_x86inc = $ssse3_x86inc =",30],["specialize qw/vp9_sub_pixel_avg_variance32x64/, \"$sse2_x86inc\", \"$ssse3_x86inc\";",28],["specialize qw/vp9_sub_pixel_avg_variance8x8/, \"$sse2_x86inc\", \"$ssse3_x86inc\";",28],["specialize qw/vp9_sub_pixel_avg_variance32x16/, \"$sse2_x86inc\", \"$ssse3_x86inc\";",28],["specialize qw/vp9_sub_pixel_avg_variance64x32/, \"$sse2_x86inc\", \"$ssse3_x86inc\";",28],["specialize qw/vp9_sub_pixel_avg_variance32x32 avx2/, \"$sse2_x86inc\", \"$ssse3_x86inc\";",28],["specialize qw/vp9_sub_pixel_avg_variance16x16/, \"$sse2_x86inc\", \"$ssse3_x86inc\";",28]],"useCount":6573},{"word":"st","context":[["foreach my $st(keys %{$mat_regions{$chr}}){",51],["$st=$ed+1;$num++;",173],["if (@st) {",61],["st\t$s3,12($out)",59],["st\t$s0,0($out)",59],["st\t$s1,4($out)",59],["st\t$s2,8($out)",59],["$ed=$st+$len-1;",53],["st\t\t%f1, [$ivec + 4]",50],["st\t\t%f14, [$ivec + 8]",50]],"useCount":5876},{"word":"stack","context":[["$level = $stack[$#stack - 1];",293],["@stack = (['', 0]) if ($#stack == -1);",292],["$level = $stack[$#stack - 1];",293],["my @stack = ();",317],["push(@stack, $level);",293],["($type, $level) = @{$stack[$#stack - 1]};",292],["my @stack = ($level);",292],["($type, $level) = @{$stack[$#stack - 1]};",292],["@stack = (['', 0]) if ($#stack == -1);",292],["$level = pop(@stack);",293]],"useCount":10911},{"word":"stage","context":[["my $state = $pdb->{$section}->{$machine}{$lane}{$stage}{state};",388],["my $stage = $pu01->{stage};",1409],["my $stage = $pu01->{stage};",1409],["$pdb->{$section}->{$machine}{$lane}{$stage}{state} = DELTA;",1151],["$pdb->{$section}->{$machine}{$lane}{$stage}{delta}{$key};",1142],["$pdb->{$section}->{$machine}{$lane}{$stage}{state}",980],["delete $pdb->{$section}->{$machine}{$lane}{$stage}{cache};",718],["delete $pdb->{$section}->{$machine}{$lane}{$stage}{delta};",376],["#     my $stage = $pu01->{stage};",340],["$stage         = $parts[2];",376]],"useCount":24010},{"word":"standard","context":[["\"\\%Ld/%Lu are not-standard C, use %lld/%llu\\n\" . $herecurr);",193],["(defaults to standard input)",126],["# standard or CPAN modules used",130],["\"Non-standard signature: $sign_off\\n\" . $herecurr);",136],["using a builtin list of standard locations",149],["When FILE is - read standard input.",282],["use CGI qw(:standard);",304],["output is to the standard output.",486],["The standard input should be a tab-separated table (i.e., each line",492],["This is a pipe command. The input is taken from the standard input, and the",493]],"useCount":83413},{"word":"start","context":[["my $start = time;",314],["# Should start with a space.",584],["# prevent the tk window from showing up then start the event loop",305],["# is the start of a diff block and this line starts",303],["# Strip the diff line prefixes and rip blank lines at start and end.",299],["# definitions in global scope can only start with types",300],["# declarations always start with types",300],["# at context start.",300],["my $start = $linenr - 1;",303],["for ($line = $start; $remain > 0; $line++) {",303]],"useCount":30930},{"word":"started","context":[["$started{$proc->pid()}= $proc;",357],["if ( keys(%started) == 0){",357],["map($_->kill(), values(%started));",357],["if ( grep($proc eq $_, started(all_servers())) )",238],["# Running against an already started server, if the specified",149],["if ( delete $started{$proc->pid()} ) {",357],["# Return immediately if no check proceess was started",357],["return 0 unless ( keys %started );",357],["my %started;",361],["# Indicate the exe should not be started",618]],"useCount":8930},{"word":"starting","context":[["return \"failed starting socks5 server\";",93],["# not starting a section or a macro \"\\\" extended line",80],["# Remove comments starting with --",119],["start-from=PREFIX     Run test cases starting test prefixed with PREFIX where",119],["# starting code point of the range, in hex; STOP is the ending point, or if",2478],["# starting at the end of the conditional, so remove:",296],["# when starting the servers or due to other error, the reason for",135],["# Don't delete anything if starting dirty",143],["# Remember options used when starting",149],["# Extra options used when starting mysqld",152]],"useCount":5872},{"word":"stat","context":[["$stat !~ /^\\+/ && $stat_real !~ /^\\+/) {",294],["##print \"stat<$stat> stat_next<$stat_next>\\n\";",294],["($stat, $cond, $line_nr_next, $remain_next, $off_next) =",640],["my ($s, $c) = ($stat, $cond);",593],["my $s = $stat;",588],["use File::stat;",443],["if (!defined $stat);",346],["$stat =~ s/\\n./\\n /g;",297],["##print \"stat<$stat> stat_next<$stat_next>\\n\";",294],["defined $stat &&",874]],"useCount":13573},{"word":"state","context":[["$state = 0;",309],["$pdb->{$section}->{$machine}{$lane}{$stage}{state} = DELTA;",1151],["$pdb->{$section}->{$machine}{$lane}{$stage}{state}",980],["my $state = $pdb->{$section}->{$machine}{$lane}{$stage}{state};",388],["die \"ERROR: unknown $section state: $state. Stopped\";",363],["die \"ERROR: unknown $section state: $state. Stopped\";",363],["my $state = shift;",357],["if ( ! exists($pdb->{$section}->{$machine}{$lane}{$stage}{state}))",330],["$pdb->{$section}->{$machine}{$lane}{$stage}{state} = RESET;",299],["my $state = $pdb->{$section}->{$machine}{$lane}{$stage}{state};",388]],"useCount":18822},{"word":"statement","context":[["return ($statement, $condition,",299],["my $statement = substr($blk, $soff, $off - $soff + 1);",300],["#print \"F: c<$condition> s<$statement> remain<$remain>\\n\";",299],["#print \"C: c<$condition> s<$statement> remain<$remain>\\n\";",299],["# multi-statement macros should be enclosed in a do while loop, grab the",299],["# could continue the statement.",299],["push(@chunks, [ $condition, $statement ]);",598],["($statement, $condition, $linenr, $remain, $off, $level) =",598],["or die \"Couldn't prepare statement: \" . $dbh->errstr;",362],["#warn \"STATEMENT<$statement>\\n\";",300]],"useCount":9753},{"word":"static","context":[["print $decl \"static int $regname = -1;\\n\";",120],["if($static) {",98],["\"static char array declaration should probably be static const char\\n\" .",193],["\"static const char * array should probably be static const char * const\\n\" .",193],["\"static char array declaration should probably be static const char\\n\" .",193],["\"static const char * array should probably be static const char * const\\n\" .",193],["# check for static initialisers.",302],["our $Storage\t= qr{extern|static|asmlinkage};",298],["# check for static char foo[] = \"bar\" declarations.",225],["# check for static const char * arrays.",215]],"useCount":6584},{"word":"status","context":[["return($status);",216],["if ($status) {",184],["my $status = 0;",199],["$status = 0; last SUB;",201],["return $status;",214],["$status = 0;",537],["if (\"$status\")",230],["$status = 1;",318],["my $status;",334],["status => \"nostatus\",",387]],"useCount":17090},{"word":"sth","context":[["$sth->finish();",2386],["$sth = $dbh->prepare($query);",932],["$sth->finish () ;",307],["$sth = $dbh->prepare($sql);",348],["my $sth = $dbh->prepare($sql);",496],["my $sth;",768],["my $sth = $dbh->prepare($query);",814],["$sth->execute();",4886],["$sth->finish;",3084],["$sth->execute;",2877]],"useCount":40854},{"word":"stmt","context":[["$stmt =~ s/}\\s*$//;",299],["$stmt =~ s/\\s*$//;",602],["$stmt =~ s/^\\s*{//;",289],["my @stmt_lines = ($stmt =~ /\\n/g);",897],["my ($stmt) = @_;",901],["$stmt =~ s/(^|\\n)./$1/g;",598],["my @stmt_statements = ($stmt =~ /;/g);",299],["$stmt =~ s/^\\s*//;",601],["my $stmt = qq{",154],["$stmt = qq{",215]],"useCount":5700},{"word":"str","context":[["my $str= join(\" \", @$$args);",266],["my ($str) = @_;",847],["my $str = shift;",811],["my $str;",331],["for my $c (split(//, $str)) {",304],["my $str = \"\";",218],["my $runline= $input ? \"run $str < $input\" : \"run $str\";",197],["my $runline= $input ? \"run $str < $input\" : \"run $str\";",197],["\"set args $str\\n\" .",164],["return $str;",1146]],"useCount":16989},{"word":"strict","context":[["--subjective, --strict     enable more subjective tests",276],["use strict;",82990],["no strict 'refs';",790],["#use strict;",633],["'strict!'\t=> \\$check,",293],["use strict ;",242],["use strict; use warnings;",234],["use strict 'vars';",196],["if ($line =~ /\\b((simple|strict)_(strto(l|ll|ul|ull)))\\s*\\(/) {",167],["no strict \"refs\";",155]],"useCount":87334},{"word":"string","context":[["return $string;",1837],["my $string = shift;",932],["Writable => 'string',",733],["my ($string) = @_;",820],["my $string;",671],["$string =~ s/\\s+$//;",500],["$string =~ s/^\\s+//;",496],["# Put $args into a single string",302],["# A \\ in a string means ignore the next character.",299],["# The whole of a #error is a string.",299]],"useCount":30189},{"word":"strings","context":[["\"break quoted strings at a space character\\n\" . $hereprev);",73],["# Check for user-visible strings broken across lines, which breaks the ability",159],["# check for %L{u,d,i} in strings",256],["# check for line continuations in quoted strings with odd counts of \"",209],["\"Avoid line continuations in quoted strings\\n\" . $herecurr);",193],["# Standardise the strings and chars within the input to",299],["return. Field-list is a comma-separated list of strings. The following fields are available:",306],["--fields list   Choose a set of fields to return. List is a comma-separated list of strings.",320],["strings. The following fields are available:",1078],["entity to return. Field-list is a comma-separated list of strings. The",612]],"useCount":25746},{"word":"struct","context":[["qr{struct\\s+$Ident},",301],["# open braces for enum, union and struct go on the same line.",300],["$prevline =~ /^.\\s*(?:typedef\\s+)?(enum|union|struct)(?:\\s+$Ident)?\\s*$/) {",299],["^(?:typedef|struct|enum)\\b",294],["if ($line =~ /^.\\s*(struct\\s+mutex|spinlock_t)\\s+\\S+;/ ||",279],["struct|",264],["typedef struct",253],["# missing space after union, struct or enum definition",250],["\"struct $1 should normally be const\\n\" .",184],["typedef struct {",325]],"useCount":8684},{"word":"style","context":[["kbd {font-style:oblique}",166],["</style>",867],["<style type=\"text/css\">",543],["ul.no-bullet {list-style: none}",290],["print \"$vname has no obvious style problems and is ready for submission.\\n\"",253],["% The contents of this file are subject to the Cisco-style Mozilla Public",245],["\"CVS style keyword markers, these will _not_ be updated\\n\". $herecurr);",193],["<style>",176],["$vname has style problems, please review.",147],["style\t\t=> 'tabbed',",118]],"useCount":8157},{"word":"sub","context":[["sub EVENT_SAY {",1340],["sub usage {",3488],["sub",1293],["sub {",1625],["sub new {",1652],["sub main {",1962],["sub usage",1064],["sub main",792],["sub plugin_javascript {",790],["sub help {",957]],"useCount":210202},{"word":"subfield","context":[["# loop through each subfield",248],["subfield => '',",370],["next if ( $tagslib->{$tag}->{$subfield}->{tab} ne $tabloop );",185],["next if ( length $subfield != 1 );",159],["unless ( $tagslib->{$tag}->{$subfield}->{mandatory} );",119],["$tag, $subfield, '', $index_tag, $tabloop, $record,",102],["if ( $subfieldcode ne $subfield );",100],["my @subfields = $input->param('subfield');",100],["$tag_data{subfield} = \\@tmp;",94],["subfield   => '',",89]],"useCount":10640},{"word":"subject","context":[["# This Source Code Form is subject to the terms of the Mozilla Public",423],["# the name or existence of this file are subject to change without notice.",3636],["my $subject = \"\";",62],["# but its format and even its name or existence are subject to change without",63],["subject => $eprint_uri,",64],["else { $mail{'subject'} = \"no subject\"; }",73],["# name or existence of this file are subject to change without notice.  Don't",6892],["# furnished to do so, subject to the following conditions:",325],["% The contents of this file are subject to the Cisco-style Mozilla Public",245],["else { $mail{'subject'} = \"no subject\"; }",73]],"useCount":14431},{"word":"subroutine","context":[["# subroutine:  gen_pm",63],["# subroutine:  xls_cell_value",143],["# subroutine:  error_handler",157],["# Example main subroutine.",437],["# subroutine:  ReadExcelFile",67],["# subroutine:  OsName",63],["# subroutine:  InitAlians",62],["# subroutine:  get_sheet",115],["# subroutine:  GenPartSizeFile;",62],["# subroutine:  GenLK_PartitionC",62]],"useCount":5720},{"word":"substr","context":[["substr($res, $off, 2, \"$;$;\");",599],["substr($block, 0, length($cond), '');",896],["substr($s, 0, length($c), '');",890],["substr($res, $off, 1, $c);",598],["substr($res, $off, 1, $;);",580],["$cc = substr($opline, $off + length($elements[$n + 1]));",303],["my $ca = substr($opline, 0, $off);",302],["$prev_values = substr($curr_values, -1);",300],["my $statement = substr($blk, $soff, $off - $soff + 1);",300],["$c = substr($blk, $off, 1);",300]],"useCount":28682},{"word":"summary","context":[["--no-summary               suppress the per-file summary",280],["my $summary = 1;",315],["'summary!'\t=> \\$summary,",298],["'summary!'\t=> \\$summary,",298],["'summary-file!'\t=> \\$summary_file,",296],["a.summary-letter {text-decoration: none}",290],["# to try and find and validate the current printk.  In summary the current",285],["--no-summary               suppress the per-file summary",280],["--summary-file             include the filename in summary",280],["if ($summary && !($clean == 1 && $quiet == 1)) {",299]],"useCount":6443},{"word":"support","context":[["mtr_error(\"Could not detect ndbcluster support \".",78],["skip-ssl              Dont start server with support for ssl connections",135],["mtr_error(\"Couldn't find support for SSL\");",147],["use utils qw($TIMEOUT %ERRORS &print_revision &support);",80],["warn $support->error if $support->error;",87],["warn $support->error if $support->error;",87],["$support->finish_log;",91],["#  http://support.opmantek.com/users/",100],["# Check backward compatibility support",119],["support();",126]],"useCount":8468},{"word":"system","context":[[":- use_module(library(system)).",160],["system $cmd;",163],["system($call);",212],["system(",254],["my $ret = system($cmd);",296],["# for a production system",318],["system($command);",423],["system($cmd);",1475],["system \"$perl_dir/perl $scripts_dir/logging.pl -v $log -l \\'$log_file\\' -p $priority -m \\'$message\\'\";",176],["system(@args);",157]],"useCount":22833},{"word":"systempreferences","context":[["INSERT IGNORE INTO systempreferences (variable,value,options,explanation,type)",76],["UPDATE systempreferences",299],["INSERT IGNORE INTO systempreferences (variable,value,explanation,options,type)",154],["$dbh->do(\"INSERT INTO `systempreferences` ( `variable` , `value` , `options` , `explanation` , `type` )",114],["INSERT INTO systempreferences (variable,value,explanation,options,type)",80],["INSERT INTO `systempreferences`",78],["$dbh->do(\"DELETE FROM systempreferences WHERE variable='noOPACHolds'\");",78],["$dbh->do(\"DELETE FROM systempreferences WHERE variable='serialsadditems'\");",78],["\"INSERT INTO systempreferences (variable,value,type)",70],["$dbh->do(\"INSERT INTO `systempreferences` (variable,value,options,explanation,type)",360]],"useCount":5720},{"word":"t","context":[["print \"\\t\";",367],["my @a = split \"\\t\";",382],["die \"can't locate x86_64-xlate.pl\";",402],["# Don't run the example if the file is being included.",449],["# name or existence of this file are subject to change without notice.  Don't",6892],["# Don't use it directly.",3636],["$t[$mptr]++;",845],["my $t;",670],["my @line = split /\\t/;",658],["[ \\t]*",568]],"useCount":156562},{"word":"t0","context":[["xor\t$t0,$s0",112],["addu\t$e,$t0",118],["adds\t$Tlo,$Tlo,$t0",120],["mfhi\t$t0",120],["vmovdqa\t$t0,0x00(%rsp)",125],["xor\t$d,$t0",134],["mov\t$a0, $t0",218],["shr\t\\$32, $t0",136],["cmovz\t$t0, $a0",155],["mov\t%rdx, $t0",204]],"useCount":20440},{"word":"t1","context":[["lwz\t$t1,4($key)",100],["$REG_S\t$t1,2*$SZREG($sp)",110],["xor\t$t1,$s1",128],["mov\t$t1, %rax",204],["mov\t$a1, $t1",218],["nr\t$t1,$mask",104],["xor\t$t1,$t5",104],["$REG_L\t$t1,2*$SZREG($sp)",110],["cmovz\t$t1, $a1",155],["xor\t$s1,$s1,$t1",88]],"useCount":23329},{"word":"t2","context":[["rol\t\\$5,$t2",100],["mov\t$a,$t2",100],["add\t$t2,$e",103],["lwz\t$t2,8($key)",100],["xor\t$t2,$t6",104],["$REG_S\t$t2,3*$SZREG($sp)",110],["$REG_L\t$t2,3*$SZREG($sp)",110],["xor\t$t2,$s2",154],["cmovz\t$t2, $a2",155],["mov\t$a2, $t2",218]],"useCount":18705},{"word":"t3","context":[["$REG_L\t$t3,4*$SZREG($sp)",110],["xor\t$t3,$t7",104],["lwz\t$t3,12($key)",100],["vpshufb\t$t3,@X[2],@X[2]",97],["vmovdqa\t$TABLE+`$SZ*2*$rounds`(%rip),$t3",97],["vpshufb\t$t3,@X[3],@X[3]",97],["$REG_S\t$t3,4*$SZREG($sp)",110],["xor\t$t3,$s3",154],["cmovz\t$t3, $a3",155],["mov\t$a3, $t3",218]],"useCount":15381},{"word":"tab","context":[["# tab-width: 8",116],["# tab-width: 4",126],["# loop through each tab 0 through 9",139],["'cmdname' => 'tab',",152],["is a tab-separated set of fields).  Normally, the last field in each",493],["The standard input should be a tab-separated table (i.e., each line",492],["my $tab;",92],["next if ( $tagslib->{$tag}->{$subfield}->{tab} ne $tabloop );",185],["# at end-of-function, with the previous line a single leading tab, then return;",77],["#Remove spaces before a tab",103]],"useCount":8626},{"word":"table","context":[["# the main body of the table, and what all code points missing from this file",413],["</table>",6372],["<table>",2013],["</td></tr></table>",285],["The standard input should be a tab-separated table (i.e., each line",492],["<table width=100%>",1897],["print \"</table>\\n\";",405],["<table width=\"100%\">",397],["</table></td>",327],["print \"</table>\";",302]],"useCount":37350},{"word":"tables","context":[["# --bootstrap or --skip-grant-tables options.  The user can set",129],["# This file is for tables that are not necessarily related:  To conserve",145],["# --no-defaults and --skip-grant-tables are to avoid loading",146],["# Use the mysql database for system tables",134],["# Fill help tables, just an empty file when running from bk repo",135],["foreach my $table (@tables) {",137],["# system these tables will be populated either by mysql_tzinfo_to_sql",145],["# Add the mysql system tables initial data",145],["# Add the offical mysql system tables",145],["# group below.  It could be that the tables will match the same set of code",145]],"useCount":6577},{"word":"tag","context":[["push(@tag,\"-\");",176],["push(@tag,$1);",174],["my $tag = shift;",147],["# loop through each tag",127],["if ( $tag ne '000' ) {",122],["unless ( $tagslib->{$tag}->{$subfield}->{mandatory} );",119],["next if ( $tagslib->{$tag}->{$subfield}->{tab} ne $tabloop );",185],["repeatable       => $tagslib->{$tag}->{repeatable},",104],["my $tag;",394],["my ($r_number, $parent) = split /_/, $reaction; #remove tag from reaction number",249]],"useCount":25693},{"word":"tagInfo","context":[["if ($tagInfo) {",47],["my $table = $$tagInfo{Table};",117],["foreach $tagInfo (@tagInfoList) {",96],["my $tag = $$tagInfo{Name};",69],["foreach $tagInfo (@infoArray) {",64],["my $tagInfo;",143],["my $tagInfo = $$nvHash{TagInfo};",56],["# Inputs: 0) ExifTool object ref, 1) tagInfo hash ref, 2) raw value ref",52],["push @tagInfoList, $tagInfo;",47],["my $nvHash = $et->GetNewValueHash($tagInfo);",47]],"useCount":7167},{"word":"tags","context":[["my $xml = TransformHtmlToXml(\\@tags,\\@subfields,\\@values,\\@indicator,\\@ind_tag, 'ITEM');",50],["'tags' => [],",50],["'tags' => ['utility'],",55],["foreach my $tag (@tags) {",57],["my @tags;",96],["my @tags      = $input->param('tag');",77],["my %tags;",75],["my @tab_data; # all tags to display",66],["# tags like paragraphs, headers, and list items.",64],["my @tags         = $input->param('tag');",58]],"useCount":8032},{"word":"tagslib","context":[["my ($dbh,$record,$tagslib,$field_number,$tabloop) = @_;",564],["next if ( $tagslib->{$tag}->{$subfield}->{tab} ne $tabloop );",185],["my ( $dbh, $record, $tagslib, $field_number, $tabloop ) = @_;",177],["unless ( $tagslib->{$tag}->{$subfield}->{mandatory} );",119],["repeatable       => $tagslib->{$tag}->{repeatable},",104],["my ( $dbh, $record, $tagslib, $i, $tabloop ) = @_;",150],["mandatory       => $tagslib->{$tag}->{mandatory},",102],["if ( $tagslib->{$tag}->{$subfield}->{authorised_value} ) {",86],["$value = $tagslib->{$tag}->{$subfield}->{defaultvalue};",81],["my ($dbh,$record,$tagslib,$i,$tabloop) = @_;",408]],"useCount":6295},{"word":"target","context":[["my $v = kver($target->{version});",130],["next if @{$target->{subtargets}} > 0;",184],["my $target;",223],["my $target = shift;",312],["foreach my $target (@target) {",526],["print_target($target);",129],["config TARGET_$target->{conf}",124],["foreach my $target (@target) {",526],["bool \"$target->{name}\"",124],["if ($CHOOSEDTARGET{$target} < 0) { next; }",98]],"useCount":16406},{"word":"tbl","context":[["&blindpop($tbl);",83],["ldrb\t$t2,[$tbl,$t2]",92],["&encstep(0,$tbl,$s0,$s1,$s2,$s3);",72],["&decstep(1,$tbl,$s1,$s0,$s3,$s2);",72],["&sub\t($s1,$tbl);",72],["&decstep(3,$tbl,$s3,$s2,$s1,$s0);",72],["ldrb\t$i1,[$tbl,$i1]",92],["&movz\t(\"ebx\",&BP(-128,$tbl,\"esi\",1));",144],["ldrb\t$i2,[$tbl,$i2]",92],["ldrb\t$i3,[$tbl,$i3]",92]],"useCount":8962},{"word":"td","context":[[". \"</td>\";",382],["<td></td>",647],["<td></td>",647],["print \"<td>\"",367],["</td></tr>",737],["<td><hr size=3 noshade></td>",779],["<td><hr size=3 noshade></td>",779],["<td>",3313],["</table></td>",327],["</td>",5979]],"useCount":44936},{"word":"temp","context":[["print PARTITION_DEFINE_H_NAME $temp ;",144],["my @temp;",174],["print $SOURCE $temp;",188],["unlink($temp);",192],["print SOURCE $temp;",335],["my $temp;",532],["print $partition_define_h $temp ;",134],["return $temp;",124],["sysread(INFILE, $temp, 1) == 1 or die $!;",117],["vshr.u64\t$temp,$temp,#16",112]],"useCount":12874},{"word":"template","context":[["C4::AR::Auth::output_html_with_http_headers($template, $t_params, $session);",566],["return $template;",517],["output_html_with_http_headers $cgi, $cookie, $template->output;",590],["my $template = <<\"__TEMPLATE\";",722],["my ( $template, $borrowernumber, $cookie ) = get_template_and_user(",802],["my ($template, $loggedinuser, $cookie)",1222],["my ( $template, $loggedinuser, $cookie ) = get_template_and_user(",1858],["output_html_with_http_headers $query, $cookie, $template->output;",1984],["output_html_with_http_headers $input, $cookie, $template->output;",3631],["$template->param(",10890]],"useCount":62048},{"word":"test","context":[["# (c) 2007,2008, Andy Whitcroft <apw@uk.ibm.com> (new conditions, test suite)",291],["# Running with \"var\" in mysql-test dir",290],["'test-only=s'\t=> \\$tst_only,",296],["if (0 == $test) {",303],["$test++;",326],["# timestamp test result verification end",329],["print \"not ok $test\\n\";",371],["# New test",555],["test(s)",467],["# test carefully before changing this",441]],"useCount":60999},{"word":"tests","context":[["# run tests",166],["\"tests to be skipped\");",149],["# Bug#27636 tests fails if LC_* variables set to *_*.UTF-8",149],["reorder               Reorder tests to get fewer server restarts",149],["# Check if we should speed up tests by trying to run on tmpfs",149],["tmpfs will speed up tests.",149],["# Set dummy worker id to align report with normal tests",176],["--subjective, --strict     enable more subjective tests",276],["# tests",165],["# Check for bitwise tests written as boolean",299]],"useCount":286283},{"word":"text","context":[["if($text=~/Hail/i){",806],["'text' => '* ',",734],["print \"Content-type: text/html\\n\\n\";",834],["'text' => '',",988],[".text",1026],["'text' => ' '",1376],["return $text;",1640],["my $text = shift;",1839],["'text' => ' ',",10664],["'text' => '",16985]],"useCount":114928},{"word":"th","context":[[". qq|</a></th>|;",316],[". qq|</th>|;",196],["<th align=\"right\" nowrap>| .",140],["<th class=listtop>$form->{title}</th>",547],["<th class=listtop>$title</th>",133],["<th class=listtop>$form->{title}</th>",547],["<th class=listtop>$title</th>",133],["</th>",294],[". qq|</th>",289],[". \"</th>\";",209]],"useCount":22144},{"word":"than","context":[["# more than 8 must use tabs.",278],["# \t\t\tprint \"Try to use WARN_ON & Recovery code rather than BUG() or BUG_ON()\\n\";",236],["# Anything other than 'wait' or 'restart:' (with a colon) will",118],["-i filename     Use filename rather than stdin for input",80],["-i filename     Use filename rather than stdin for input.",80],["-i filename   Use filename rather than stdin for input",68],["# positives, as well as warning only once per parameter rather than once per",67],["'text' => 'perhaps your @top node should be wrapped in @ifnottex rather than @ifinfo?',",62],["# Params that can have more than one value",57],["# in theory can have more than one but generally there's just one",57]],"useCount":6900},{"word":"that","context":[["where N is the column (from 1) that contains the id.",386],["# 'X' below means that this form is discouraged.  Consult perluniprops.pod",370],["next if ($rate->sum == 0); # do not include reactions that do not occur",349],["# purpose with or without fee is hereby granted, provided that the above",308],["# track the line number as we move through the hunk, note that",303],["# or if that brace on the next line is for something else",303],["#     Note that contrary to what you might expect, the above is NOT the same",512],["# blank context lines so we need to count that too.",303],["# check the location of the inline attribute, that it is between",302],["# things that appear to be patches.",300]],"useCount":58893},{"word":"the","context":[["# This file is for internal use by core Perl only.  The format and even the",5878],["# This file is machine-generated by lib/unicore/mktables from the Unicode",5126],["# [brackets] indicate how many code points are in the range.",2478],["# This file is machine-generated by mktables from the Unicode",4479],["# The format of the lines of this file is: START\\tSTOP\\twhere START is the",2478],["# This file is for internal use by the Perl program only.  The format and even",4650],["# omitted, the range has just one code point.  Numbers in comments in",2478],["# the name or existence of this file are subject to change without notice.",3636],["# The format of the lines of this file is: START\\tSTOP\\twhere START is the",2478],["# starting code point of the range, in hex; STOP is the ending point, or if",2478]],"useCount":431004},{"word":"them","context":[["# directly before it executes them, like \"make test-force-pl\" in RPM builds.",149],["# configuration used to build them.  To make life easier, an environment",147],["# reusing them from previous test",119],["# and make them world readable",119],["mtr_print(\"Server(s) started, not waiting for them to finish\");",118],["# decision by deleting the provisions above and replace them with the notice",116],["# none on the first line, and are going to readd them",296],["# case and default should not have general statements after them",294],["# and append them to args prefixed",238],["them to the maintainer, see CHECKPATCH in MAINTAINERS.",174]],"useCount":8052},{"word":"then","context":[["# edge is a close comment then we must be in a comment",300],["# prevent the tk window from showing up then start the event loop",305],["# check we are in a valid C source file if not then ignore this hunk",293],["# then count those as offsets.",294],["# If we see an #else/#elif then the code",294],["# If the condition carries leading newlines, then count those as offsets.",298],["# If we have no input at all, then there is nothing to report on",299],["# ' *' then it is very likely a comment.",303],["})->then( sub {",711],["# check we are in a valid source file if not then ignore this hunk",303]],"useCount":13443},{"word":"there","context":[["# Look through the context and try and figure out if there is a",303],["# Bail if there is no further context.",300],["# if there is one",119],["# If we have no input at all, then there is nothing to report on",299],["# Check if there is UTF-8 in a commit log when a mail header has explicitly",136],["# On some operating systems, there is a limit to the length of a",147],["# it there is no point in retrying a statement scan",173],["# If there's a name left after stripping spaces and",194],["# If there were whitespace errors which cleanpatch can fix",248],["# if there is a space between the name and the open",298]],"useCount":11809},{"word":"these","context":[["# Check if either of these lines are modified, else",294],["# Check for }<nl>else {, these must be at the same",303],["# perluniprops.pod should be consulted for the syntax rules for any of these,",2468],["\"CVS style keyword markers, these will _not_ be updated\\n\". $herecurr);",193],["# system these tables will be populated either by mysql_tzinfo_to_sql",145],["If any of these errors are false positives, please report",143],["$url =~ s! \\* !$g_escape_table{'*'}!gx;\t\t# We've got to encode these to avoid",108],["# Note as optimized versions of these functions are added we need to add a check to ensure",106],["print \"$vname has style problems, please review.  If any of these errors\\n\";",106],["Do _NOT_ submit these changes without inspecting them for correctness.",103]],"useCount":8750},{"word":"this","context":[["# is the start of a diff block and this line starts",303],["# name or existence of this file are subject to change without notice.  Don't",6892],["# Use Unicode::UCD::prop_invlist() to access the contents of this file.",826],["# test carefully before changing this",441],["# The name this swash is to be known by, with the format of the mappings in",413],["# the main body of the table, and what all code points missing from this file",413],["As a special exception, if you link this library with other files,",1585],["# The format of the lines of this file is: START\\tSTOP\\twhere START is the",2478],["# the name or existence of this file are subject to change without notice.",3636],["# 'X' below means that this form is discouraged.  Consult perluniprops.pod",370]],"useCount":88178},{"word":"through","context":[["# loop through each tab 0 through 9",139],["# Loop through our list of processes and look for and entry",137],["# loop through each tab 0 through 9",139],["# The syslogd writes it into a file and through a pipe.",143],["# Search through list of locations that are known",149],["# libraries through functions",203],["# in shared libraries through functions",203],["# loop through each subfield",248],["# Look through the context and try and figure out if there is a",303],["# track the line number as we move through the hunk, note that",303]],"useCount":6354},{"word":"time","context":[["my $now = time();",258],["$timevrfyend{$testnum} = Time::HiRes::time() if($timestats);",329],["my $NTIME = $mecca->time->nelem;",212],["# Start the mysqltest processes in parallel to save time",354],["my $start = time;",314],["my $now = time;",259],["my $start_time = time();",219],["my $time = time();",227],["my $time = time();",227],["my $start = time();",234]],"useCount":31637},{"word":"timeout","context":[["elsif ( $proc->{timeout} ) {",238],["my $proc= My::SafeProcess->wait_any_timeout($timeout);",357],["my $timeout= start_timer(check_timeout($tinfo));",318],["if ( $proc->{timeout} )",214],["'suite-timeout=i'          => \\$opt_suite_timeout,",149],["'testcase-timeout=i'       => \\$opt_testcase_timeout,",149],["-timeout   => $o_timeout",127],["shutdown-timeout=SECONDS Max number of seconds to wait for server shutdown",119],["'debug-sync-timeout=i'     => \\$opt_debug_sync_timeout,",119],["debug-sync-timeout=NUM Set default timeout for WAIT_FOR debug sync",119]],"useCount":9316},{"word":"timestamp","context":[["`timestamp` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,",104],["# timestamp test result verification end",329],["`timestamp` timestamp NOT NULL default CURRENT_TIMESTAMP on update CURRENT_TIMESTAMP,",168],["`timestamp` timestamp NOT NULL default CURRENT_TIMESTAMP on update CURRENT_TIMESTAMP,",168],["'timestamp'                => \\&report_option,",119],["timestamp             Print timestamp before each test report line",119],["timestamp             Print timestamp before each test report line",119],["timediff              With --timestamp, also print time passed since",119],["priority, found, timestamp, itemnumber,",108],["`timestamp` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,",104]],"useCount":6265},{"word":"tinfo","context":[["$tinfo->{comment}=",905],["my $extra_opts= get_extra_opts($mysqld, $tinfo);",354],["my $tinfo= shift;",428],["get_log_from_proc($proc, $tinfo->{name});",476],["$tinfo->{comment}.=",598],[".check_timeout($tinfo).\" seconds\";",318],["my $timeout= start_timer(check_timeout($tinfo));",318],["mtr_report_test($tinfo);",296],["report_failure_and_restart($tinfo);",1072],["my ($tinfo)= @_;",1309]],"useCount":26978},{"word":"title","context":[["if ($title) {",170],["$title = $graphObject->getTitle();",159],["<link href=\"#Top\" rel=\"start\" title=\"Top\">",174],["(module, code, name, title, content)",175],["title => $title,",188],["title => $title,",188],["my $title = shift;",214],["mtr_add_arg($$args, \"-title\");",258],["my $title;",297],["<th class=listtop>$form->{title}</th>",547]],"useCount":28443},{"word":"tmp","context":[["my @tmp;",217],["(default: ./var/tmp).",149],["veor\t$in0,$in0,$tmp",165],["vxor\t\t$in0,$in0,$tmp",162],["push(@out,$tmp);",155],["mkpath(\"$opt_vardir/tmp\");",149],["&xor\t($out,$tmp);",240],["my $tmp;",331],["my $errfile= \"$opt_vardir/tmp/$name.err\";",357],["my $gdb_init_file= \"$opt_vardir/tmp/gdbinit.$type\";",238]],"useCount":25585},{"word":"to","context":[["# the equals (or colon) can be combined with anything to the right.  Thus,",2251],["# name or existence of this file are subject to change without notice.  Don't",6892],["# the name or existence of this file are subject to change without notice.",3636],["# A colon can be substituted for the equals sign, and anything to the left of",2251],["library does not by itself cause the resulting executable to be covered",1583],["# use it directly.  Use Unicode::UCD to access the Unicode character data",1538],["# Use Unicode::UCD::prop_invlist() to access the contents of this file.",826],["entity to return. Field-list is a comma-separated list of strings. The",612],["Choose a set of fields from the relationship to return. Field-list is a comma-separated list of",612],["Please email comments or questions to the public Ensembl",593]],"useCount":294740},{"word":"top","context":[["@top top",122],["'cmdname' => 'top',",836],["<tr valign=top>",588],["print \"Must be run from the top-level dir. of a kernel tree\\n\";",285],["sprintf(\"(%s)...\\n\\n\", (not $fullstats)?\"top $counter\":\"full\");",174],["'text' => 'top'",163],["top",141],["@top top",122],["},$self,$mc,$top,$X,$Y]);",106],["#\t<TR VALIGN=\"top\">",760]],"useCount":10016},{"word":"total","context":[["if ($res->{total}) {",261],["my $sth_search = $dbh->prepare(\"SELECT count(*) AS total",242],["$total = 0;",219],["my $total;",209],["return $total;",165],["my $total=0;",164],["total => $total,",148],["print \"total: $cnt_error errors, $cnt_warn warnings, \" .",300],["$total++;",538],["my $total = 0;",872]],"useCount":10716},{"word":"totals","context":[["foreach my $key (sort keys %{$totals{by_product}{$product}{$section}{by_machine_lane}{$machine}{$lane}})",201],["foreach my $key (sort keys %{$totals{by_product}{$product}{$section}{by_machine}{$machine}})",202],["foreach my $lane (sort { $a <=> $b } keys %{$totals{$section}{by_machine_lane}{$machine}})",221],["foreach my $machine (sort { $a <=> $b } keys %{$totals{$section}{by_machine}})",222],["foreach my $machine (sort { $a <=> $b } keys %{$totals{$section}{by_machine_lane}})",222],["#     foreach my $product (sort keys %{$totals{$section}{by_product}})",255],["foreach my $product (sort keys %{$totals{$section}{by_product}})",286],["foreach my $key (sort keys %{$totals{$section}{by_machine_lane}{$machine}{$lane}})",301],["foreach my $key (sort keys %{$totals{$section}{by_machine}{$machine}})",306],["foreach my $product (sort keys %{$totals{by_product}})",618]],"useCount":12728},{"word":"tp","context":[["<meta name=\"Generator\" content=\"tp\">",124],["mov\t$N[0],-24($tp)\t\t# tp[j-1]",76],["mov\t$N[1],-16($tp)\t\t# tp[j-1]",76],["lea\t32($tp),$tp",76],["lea\t(%rsp),$ap\t\t# borrow ap for tp",81],["add\t$lo0,$hi1\t\t# np[j]*m1+ap[j]*bp[i]+tp[j]",96],["mov\t$N[0],-24(%rsp,$j,8)\t# tp[j-1]",116],["mov\t$N[1],-16(%rsp,$j,8)\t# tp[j-1]",116],["mov\t$hi1,-16(%rsp,$j,8)\t# tp[j-1]",174],["mov\t$N[1],-16($tp)\t\t# tp[j-1]",76]],"useCount":8696},{"word":"tptr","context":[["adc\t8*5($tptr),%r13",114],["adc\t8*2($tptr),%r10",95],["adc\t8*1($tptr),%r9",95],["adc\t8*6($tptr),%r14",114],["lea\t8*8($tptr),$tptr",114],["lea\t8*8($tptr),$tptr",114],["adc\t8*4($tptr),%r12",114],["adc\t8*3($tptr),%r11",114],["adc\t8*7($tptr),%r15",114],["lea\t4*8($tptr),$tptr",82]],"useCount":7072},{"word":"tr","context":[["print \"<tr>\";",477],["<tr valign=top>",588],["</td></tr>",737],["<tr height=\"5\"></tr>",929],["<tr height=\"5\"></tr>",929],["</tr><tr>",1065],["</tr><tr>",1065],["print \"</tr>\\n\";",1389],["</tr>",19161],["<tr>",16076]],"useCount":61807},{"word":"trailing","context":[["#trailing whitespace",303],["\"trailing statements should be on next line\\n\" . $herecurr);",386],["# Check for illegal assignment in if conditional -- and check for trailing",296],["ERROR(\"trailing statements should be on next line\\n\" . $herecurr);",218],["# leading and trailing angle brackets, the address",194],["\"trailing statements should be on next line\\n\" . $herecurr . $stat_real);",193],["\"trailing statements should be on next line\\n\" .",120],["\"trailing semicolon indicates no statements, indent implies otherwise\\n\" .",193],["$rawline !~ m@^\\+.*\\*{2,}/[ \\t]*$@ &&\t#trailing **/",129],["# rip off surrounding spaces, and trailing \\'s.",124]],"useCount":5915},{"word":"tree","context":[["if ($tree) {",585],["'tree!'\t\t=> \\$tree,",296],["if (!$file && $tree && $p1_prefix ne '' &&",287],["my $tree = 1;",270],["'tree!'\t\t=> \\$tree,",296],["die \"$P: $root: --root does not point at a valid tree\\n\";",296],["--root=PATH                PATH to the kernel tree root",273],["if ($tree && $rawline =~ m{^.\\s*\\#\\s*include\\s*\\<asm\\/(.*)\\.h\\>}) {",279],["# See if any suffix of this path is a path within the tree.",280],["print \"Must be run from the top-level dir. of a kernel tree\\n\";",285]],"useCount":6179},{"word":"true","context":[["true",4763],["->  true",4608],["true.",1678],[";\ttrue",695],["condition(true, [",438],["->\ttrue",412],["; true,",256],["-> true",209],["%true ->",209],[";   true",6811]],"useCount":31624},{"word":"try","context":[["# Reserved for other thread, try next",117],["try {",752],["# Look through the context and try and figure out if there is a",303],["# to try and find and validate the current printk.  In summary the current",285],[". p(a({-href=>\"javascript:back()\"}, \"go back and try again\"));",193],["'try'   => 'none',",138],["# If not free, release and try from next number",119],["# sleep a little and try again, thus allowing the",119],["# Race condition seen on Windows: try again until file not empty",114],["use Error qw(:try);",108]],"useCount":6231},{"word":"tweak","context":[["paddq\t@tweak[5],@tweak[5]",160],["xorps\t@tweak[0],$inout0",288],["&paddq\t($tweak,$tweak);\t\t# &psllq($tweak,1);",156],["&paddq\t($tweak,$tweak);\t\t# &psllq($tweak,1);",156],["&paddq\t($tweak,$tweak);\t\t# &psllq($tweak,1);",156],["&pcmpgtd($twtmp,$tweak);\t\t# broadcast upper bits",156],["paddq\t@tweak[5],@tweak[5]",160],["pxor\t0x00(%rsp), @XMM[0]\t# ^= tweak[]",168],["xorps\t@tweak[1],$inout1",176],["vld1.64\t\t{@XMM[8]}, [r0,:128]\t\t@ next round tweak",364]],"useCount":9165},{"word":"txt","context":[["return $txt;",174],["logmsg \"$txt\\n\";",174],["\"__setup appears un-documented -- check Documentation/kernel-parameters.txt\\n\" . $herecurr);",177],["\"Use of volatile is usually wrong: see Documentation/volatile-considered-harmful.txt\\n\" . $herecurr);",182],["open(ERROR_FILE,\">>SNPGenie\\_LOG\\.txt\");",196],["if ($1 =~ m@Documentation/kernel-parameters.txt$@) {",284],["'.', pun, '.', dl(0,s,txt)],",298],["# This file is built by ./mktables from e.g. UnicodeData.txt.",319],["lit(txt)).",322],["# This file is built by mktables from e.g. UnicodeData.txt.",2362]],"useCount":14771},{"word":"type","context":[["'type' => 'empty_line_after_command'",1865],["'type' => 'empty_spaces_after_command'",8079],["type => \"intranet\",",2074],["type            => \"intranet\",",3059],["$type = 'N';",3589],["'type' => 'paragraph'",4088],["'type' => 'brace_command_arg'",5334],["'type' => 'empty_line'",5908],["'type' => 'spaces_at_end'",6008],["'type' => 'misc_line_arg'",6775]],"useCount":168772},{"word":"types","context":[["--show-types               show the message \"types\" in the output",173],["'show-types!'\t=> \\$show_types,",190],["--ignore TYPE(,TYPE2...)   ignore various comma separated message types",192],["# definitions in global scope can only start with types",300],["# Check for potential 'bare' types",300],["# declarations always start with types",300],["--show-types               show the message \"types\" in the output",173],["foreach my $type (@types) {",103],["--types TYPE(,TYPE2...)    show only these comma separated message types",98],["--types TYPE(,TYPE2...)    show only these comma separated message types",98]],"useCount":6138},{"word":"u","context":[["if ($u) {",68],["( $c, $u, $rest ) = split;",68],[":- use_module(u(v)).",70],["$ucs  = hex($u);",80],["die \"legacy [u]long hyper arrays aren't supported\";",87],["$ucs = hex($u);",98],["open($FILE, '-|', \"diff -u /dev/null $filename\") ||",292],["our $Int_type\t= qr{(?i)llu|ull|ll|lu|ul|l|u};",101],["(?:__)?(?:u|s|be|le)(?:8|16|32|64)|",269],["# check for %L{u,d,i} in strings",256]],"useCount":7358},{"word":"undef","context":[["$$exe= undef;",469],["while (my @tuples = Bio::KBase::Utilities::ScriptThing::GetBatch($ih, undef, $column)) {",453],["if ($flavour =~ /\\./) { $output = $flavour; undef $flavour; }",427],["'moderation_notes' => undef,",488],["undef,",12152],["return undef;",6701],["'is_dup' => undef,",938],["undef $/;",800],["local $/ = undef;",744],["'full_text_rss' => undef,",422]],"useCount":72128},{"word":"unless","context":[["print \"\\r$i\" unless ($i % 100);",515],["return 0 unless ( keys %started );",357],["unless ($quiet) {",234],["unless -d $datadir;",238],["die($rc) unless $rc->is_success();",240],["return unless ($report_precision{$section}{set} == FALSE);",255],["unless @valgrind_args;",282],["unless (@ARGV) {",289],["# if/while/etc brace do not go on next line, unless defining a do while loop,",303],["return unless $val;",315]],"useCount":60591},{"word":"unlink","context":[["unlink($err_file);",394],["unlink($gdb_init_file);",298],["mtr_verbose(\"unlink($opt_vardir)\");",175],["unlink($filename);",189],["unlink($temp);",192],["unlink($file);",229],["unlink(\"$base_file.result\");",238],["unlink($opt_vardir);",265],["unlink($pidfile) if(-f $pidfile);",364],["unlink($pidfile);",308]],"useCount":12286},{"word":"unshift","context":[["unshift(@$$args, \"/debugexe\");",149],["unshift(@$split_kgram, 0);",351],["unshift(@$$args, \"$$exe\");",296],["unshift(@ARGV, @conf_args) if @conf_args;",240],["unshift(@$args, \"--mode=execute\", $$exe);",185],["unshift @INC, \"$libdir\";",139],["unshift @{$totals{$section}{by_machine_lane_stage_filename}{$machine}{$lane}{$stage}{$filename}{data}}, $prow;",128],["unshift(@mysqld_names, \"mysqld-debug\");",118],["unshift(@$tests, $tinfo);",112],["unshift (@INC, \"$path\");",104]],"useCount":6070},{"word":"unsigned","context":[["qr{unsigned},",227],["userid int(10) unsigned NOT NULL default '0',",159],["unsigned char name[MAX_PARTITION_NAME_LEN];     /* partition name */",165],["qr{(?:unsigned\\s+)?long},",224],["qr{(?:unsigned\\s+)?char},",224],["qr{(?:unsigned\\s+)?short},",224],["qr{(?:unsigned\\s+)?long\\s+long\\s+int},",224],["qr{(?:unsigned\\s+)?int},",224],["qr{(?:unsigned\\s+)?long\\s+int},",224],["qr{(?:unsigned\\s+)?long\\s+long},",224]],"useCount":8806},{"word":"up","context":[["# directory. And we install \"/usr/share/mysql-test\". Moving up one",145],["#make up the handle for any error we report on this line",303],["# prevent the tk window from showing up then start the event loop",305],["up disks for heavily crashing server). Defaults to",268],["# Pick up the preceding and succeeding characters.",228],["# Server is up. Verify that we can speak to it.",216],["config(o2,up).",158],["# Check if we should speed up tests by trying to run on tmpfs",149],["# A symlink from var/ to $opt_mem will be set up",149],["tmpfs will speed up tests.",149]],"useCount":14353},{"word":"update","context":[["'update' =>",77],["my %update = ();",71],["update();",72],["$field->update( $isbnsubfield => $newisbn );",75],["$stats->update();",118],["'update'   => \\$doo_eet,",139],["add\t0($ctx),$A\t\t\t# update context",160],["`timestamp` timestamp NOT NULL default CURRENT_TIMESTAMP on update CURRENT_TIMESTAMP,",168],["sub update {",249],["&update;",344]],"useCount":7639},{"word":"url","context":[["my $url;",283],["=item url",100],["$url =~ s! \\* !$g_escape_table{'*'}!gx;\t\t# We've got to encode these to avoid",108],["$url =~ s!  _ !$g_escape_table{'_'}!gx;\t\t# conflicting with italics/bold.",108],["my $url               = url();",125],["my $url               = url();",125],["my ($url) = @_;",182],["my $url = shift;",353],["my $response = $ua->get($url);",89],["return $url;",227]],"useCount":9368},{"word":"usage","context":[["sub usage",1064],["print $usage;",1278],["usage();",2931],["sub usage {",3488],["die $usage;",931],["usage($cmd);",698],["our $usage = <<'END';",546],["&usage;",392],["&usage();",353],["sub usage{",350]],"useCount":29593},{"word":"use","context":[["use warnings;",44222],["use strict;",82990],["use C4::Context;",5685],["# use it directly.",5354],["# This file is for internal use by core Perl only.  The format and even the",5878],["use C4::Output;",5752],["use CGI;",6556],["use Getopt::Long;",18087],["use File::Basename;",7899],["use Data::Dumper;",11488]],"useCount":515216},{"word":"use_module","context":[[":- use_module(library(http/http_dispatch)).",172],[":- use_module(library(http/html_write)).",182],[":- use_module(library(tap)).",190],[":- use_module(library(plunit)).",287],[":- use_module(library(option)).",335],[":- use_module(library(apply)).",404],[":- use_module(library(debug)).",449],[":- use_module(library(lists)).",1109],[":- use_module(library(pce)).",694],[":- use_module(library(error)).",495]],"useCount":13305},{"word":"used","context":[["# Remember options used when starting",149],["# all port numbers might not be used in this version of the script.",149],["# are used in favor of the system installed ones",149],["# called by delete_confirm, used to effectively confirm deletion of data in DB",262],["# called by default form, used to confirm deletion of data in DB",262],["# called by add_form, used to insert/modify data in DB",258],["# Koha modules used",189],["\"8-bit UTF-8 used in possible commit log\\n\" . $herecurr);",176],["\"braces {} should be used on all arms of this statement\\n\" . $herectx);",154],["# Extra options used when starting mysqld",152]],"useCount":20365},{"word":"user","context":[["my($virtual_user, $constants, $slashdb, $user) = @_;",160],["my $user = shift;",168],["available => 1, mode => \"user\", dist_req_build => [],",202],["my $user = getCurrentUser();",433],["my($form, $slashdb, $user, $constants) = @_;",226],["my $user;",237],["user            => $opt_user,",238],["mtr_add_arg($args, \"--user=root\");",297],["user => \\%myconfig,",343],["mtr_add_arg($args, \"--user=%s\", $opt_user);",350]],"useCount":29884},{"word":"using","context":[["\"Consider using #include <linux/$file> instead of <asm/$file>\\n\" . $herecurr);",185],["\"consider using a completion\\n\" . $herecurr);",185],["# some versions, test using it should be skipped",179],["mem                   Run testsuite in \"memory\" using tmpfs or ramdisk",149],["using a builtin list of standard locations",149],["The option can also be set using environment",149],["# Indicate that we are using debugger",149],["mtr_error(\"Can't use --extern when using debugger\");",147],["valgrind              Run the \"mysqltest\" and \"mysqld\" executables using",145],["must be specified using name-value pair notation",119]],"useCount":8669},{"word":"usr","context":[["#! /usr/bin/perl -w",1796],["#! /usr/bin/env perl",1585],["#!/usr/local/bin/perl -w",1188],["#!/usr/local/bin/perl",2068],["#! /usr/bin/perl",2356],["#!/usr/bin/env perl",18216],["#!/usr/bin/perl -wT",293],["#!/usr/bin/env perl -w",269],["#!/usr/bin/perl -w",21528],["#!/usr/bin/perl",48452]],"useCount":105943},{"word":"utf8","context":[["binmode STDOUT, \":utf8\";",414],["binmode STDERR, \":utf8\";",184],["binmode STDOUT, ':utf8';",236],[") ENGINE=InnoDB DEFAULT CHARSET=utf8;\");",321],["binmode(STDOUT, \":utf8\");",341],[") ENGINE=InnoDB DEFAULT CHARSET=utf8",632],[") ENGINE=InnoDB DEFAULT CHARSET=utf8;",757],[") ENGINE=InnoDB DEFAULT CHARSET=utf8\");",1057],["use CGI qw ( -utf8 );",1666],["use utf8;",5239]],"useCount":17036},{"word":"v","context":[["$cv = $v;",248],["my $v = shift;",225],["foreach my $v (@vals) {",354],["my $v;",187],["return $v;",253],["-v, --verbose",158],["system \"$perl_dir/perl $scripts_dir/logging.pl -v $log -l \\'$log_file\\' -p $priority -m \\'$message\\'\";",176],["print join(\"\\t\", $k, map { ref($_) eq 'ARRAY' ? join(\",\", @$_) : $_ } @$v{@fields}), \"\\n\";",160],["while (my($k, $v) = each %$h)",160],["`nasm -v 2>&1` =~ /NASM version ([2-9]\\.[0-9]+)/) {",161]],"useCount":22605},{"word":"val","context":[["return $val;",728],["my ($dat,$fld,$val) = @_;",148],["return unless $val;",315],["my $val = shift;",590],["my $val;",410],["my $val = 0;",149],["if ($val > 0) {",168],["my ($data,$val) = @_;",186],["my $val = $1;",199],["my ($data,$val,$fld) = @_;",199]],"useCount":25282},{"word":"valgrind","context":[["callgrind             Instruct valgrind to use callgrind",149],["# to detect that valgrind is being used from test cases",149],["# if running in valgrind(to avoid valgrinding bash)",185],["$$exe= $opt_valgrind_path || \"valgrind\";",156],["if -f \"$glob_mysql_test_dir/valgrind.supp\";",152],["with valgrind",149],["valgrind-option=ARGS  Option to give valgrind, replaces default option(s),",149],["valgrind-options=ARGS Deprecated, use --valgrind-option",149],["# Otherwise valgrind will valgrind the libtool wrapper or bash",149],["'valgrind|valgrind-all'    => \\$opt_valgrind,",149]],"useCount":9497},{"word":"valid","context":[["mtr_error(\"--user-args only valid with --start options\")",118],["# check we are in a valid source file C or perl if not then ignore this hunk",284],["# The pid was not a valid number",119],["die \"$field is not a valid field\\n\";",240],["# Replace with valid values of your account.",270],["# is also valid.",2401],["# check we are in a valid source file if not then ignore this hunk",303],["# Check for wrappage within a valid hunk of the file",303],["die \"$P: $root: --root does not point at a valid tree\\n\";",296],["# check we are in a valid C source file if not then ignore this hunk",293]],"useCount":7933},{"word":"value","context":[["my ($opt, $value)= @_;",267],["defaultvalue=document.getElementById(\\\"$field_number\\\").value;",570],["my $value = $2;",638],["my $value;",559],["return $value;",530],["my $value = shift;",445],["$dbh->do(\"INSERT INTO `systempreferences` (variable,value,options,explanation,type)",360],["# Pull out the value of this operator.",296],["# terminating a case value or a label.",296],["mark_log($mysqld->value('#log-error'), $tinfo);",236]],"useCount":86347},{"word":"values","context":[["#---- if primkey exists, it's a modify action, so read values to modify...",196],["my @values = ();",229],["# Replace with valid values of your account.",270],["'values', 'possible', 'type', and 'attr' (default",281],["# Track the 'values' across context and added lines.",300],["map($_->kill(), values(%started));",357],["my @values;",636],["if (which($net_effect < 0)->nelem > 0) { #which gets indices of non-0 values, nelem get nr of elements",190],["::rptMsg($key_path.\" has no values.\");",159],["# settings, we reset the current values of LC_ALL and LC_CTYPE to \"C\".",149]],"useCount":19836},{"word":"var","context":[["var(X),",246],["my $var = $2;",265],["# Running with \"var\" in mysql-test dir",290],["var(Var), !,",295],["my $var = '_' x length($stream);",296],["substr($var, length($res), 1, $av_pend_colon);",296],["return ($res, $var);",296],["substr($var, length($res), 1, $variant);",296],["my $var = $1;",308],["'cmdname' => 'var',",321]],"useCount":28602},{"word":"varchar","context":[["`code` varchar(30) DEFAULT NULL,",78],["`paper_bin` varchar(20) NOT NULL,",78],["`class_sort_rule` varchar(10) NOT NULL default '',",78],["`printername` varchar(40) NOT NULL,",78],["`code` varchar(10) NOT NULL,",78],["`description` varchar(255) NOT NULL,",97],["`message_transport_type` varchar(20) NOT NULL,",117],["COLUMN `returnbranch` varchar(15) default NULL AFTER `holdallowed`\");",124],["type    => 'varchar(10)',",171],["`branchcode` varchar(10) default NULL,",198]],"useCount":10170},{"word":"variable","context":[["$dbh->do(\"INSERT INTO `systempreferences` (variable,value,options,explanation,type)",360],["# * goes on variable not on type",303],["uniquefieldrequired => 'variable',",192],["\"EXPORT_SYMBOL(foo); should immediately follow its function/variable\\n\" . $herecurr);",184],["(variable,value,explanation,options,type)",175],["INSERT IGNORE INTO systempreferences (variable,value,explanation,options,type)",154],["# Create an environment variable to make it possible",149],["# an environment variable can be used to control all ports. A small",149],["(default: MTR_VS_CONFIG environment variable)",147],["variable MTR_MEM=[DIR]",147]],"useCount":15007},{"word":"variables","context":[["# Storage for changed environment variables",119],["# Put variables into hash",266],["# have to access globale variables",203],["# access globale variables in shared",203],["# Local variables:",192],["# Global variables",188],["##\t\t\t\t     \"declaring multiple variables together should be avoided\\n\" . $herecurr);",184],["# Bug#27636 tests fails if LC_* variables set to *_*.UTF-8",149],["# Init variables that can change between each test case",149],["$cmd =~ s/(\\$\\w+)/$1/eeg;\t#substitute variables in $cmd",132]],"useCount":10159},{"word":"vars","context":[["use vars qw(%result_texis %result_texts %result_trees %result_errors",1722],["my ($global_var_href) = @_;                            # get reference to global vars hash",135],["'vars' => {'KEY' => 'testtest', 'HMAC_KEY' => 'hmactest',",142],["use strict 'vars';",196],["use vars qw($debug);",197],["use vars qw/",206],["use vars qw(@ISA);",209],["use vars qw(",260],["use vars qw($VERSION %IRSSI);",362],["use vars qw($VERSION);",513]],"useCount":8245},{"word":"veor","context":[["veor\t\t@XMM[11], @XMM[7], @XMM[13]",156],["veor\t\t@XMM[8], @XMM[6], @XMM[10]",156],["veor\t\t@XMM[8], @XMM[4], @XMM[10]",156],["veor\t\t@XMM[5], @XMM[5], @XMM[13]",156],["veor\t$in0,$in0,$tmp",165],["veor\t@XMM[0], @XMM[0], @XMM[14]\t@ ^= IV",182],["veor\t\t@XMM[0], @XMM[0], @XMM[8]",186],["veor\t@XMM[1], @XMM[1], @XMM[8]",234],["veor\t\t@XMM[0], @XMM[0], @XMM[ 8]",364],["veor\t\t@XMM[1], @XMM[1], @XMM[ 9]",364]],"useCount":15235},{"word":"verbose","context":[["my $verbose;",384],["if ($verbose >= MAXVERBOSE);",3593],["my $verbose = 0;",1006],["verbose       => $opt_verbose,",920],["if($verbose) {",751],["$verbose = 1;",467],["if $verbose;",451],["if ($verbose >= MAXVERBOSE)",430],["if($verbose);",374],["if ($verbose) {",1174]],"useCount":35977},{"word":"verify","context":[["verify( light_weight ) ,",400],["verify( small_size ) ,",376],["verify( is_evolution ) ,",288],["verify( has_evolution ) ,",280],["verify( medium_size ) ,",200],["verify( medium_weight ) ,",192],["verify( brown_color ) ,",140],["verify( poison_type ) ,",132],["verify( water_type ) ,",128],["verify( blue_color ) ,",100]],"useCount":5796},{"word":"version","context":[["my $version;",294],["=item --version",253],["my $version = \"\";",276],["'version'\t=> \\$help",277],["-h, --help, --version      display this help and exit",280],["mtr_error(\"Could not find version of MySQL\") unless $mysql_version_id;",227],["sub version {",409],["# later version.",465],["sub getVersion {return $config{version};}",684],["# version.",5687]],"useCount":39634},{"word":"visible","context":[["holdsAt( appearance( id0 )=visible,  760 ).",24],["# 'my' would make it visible from user code",24],["holdsAt( appearance( id0 )=visible,  1040 ).",25],["# Make function visible to linker, and make additional symbol with",28],["$addr =~ s{\">.+?:}{\">}; # strip the mailto: from the visible part",29],["('TagsModeration',  NULL,'','Require tags from patrons to be approved before becoming visible.','YesNo'),",39],["/* part_visibility is 1: this partition is visible and can download */",57],["WARN(\"vmlinux.lds.h needs VMLINUX_SYMBOL() around C-visible symbols\\n\" . $herecurr);",89],["# Check for user-visible strings broken across lines, which breaks the ability",159],["\"vmlinux.lds.h needs VMLINUX_SYMBOL() around C-visible symbols\\n\" . $herecurr);",186]],"useCount":15381},{"word":"vmovdqu","context":[["vmovdqu\t\t$xc0,0x40($out)",42],["vmovdqu\t\t0x00-0x20($Xip),$Hkey\t# $Hkey^1",42],["vmovdqu\t\t$xa0,0x00($out)",64],["vmovdqu\t0x20($inp),@X[2]",56],["vmovdqu\t0x30($inp),@X[3]",56],["vmovdqu\t0x00($inp),@X[0]",56],["vmovdqu\t0x10($inp),@X[1]",56],["vmovdqu\t\t$xb0,0x20($out)",48],["vmovdqu\t\t($const),$Ii\t\t# borrow $Ii for .Lbswap_mask",42],["vmovdqu\t\t$xd0,0x60($out)",42]],"useCount":7417},{"word":"void","context":[["add_proto qw/void vp9_iht4x4_16_add/, \"const tran_low_t *input, uint8_t *dest, int dest_stride, int tx_type\";",101],["qr{void},",301],["(void)IsolationAwareDeactivateActCtx(0, ulpCookie);",90],["# void (*store_gdt)(x86_descr_ptr *);",300],["\"Bad function definition - $1() should probably be $1(void)\\n\" . $herecurr) &&",93],["add_proto qw/void vp9_iht16x16_256_add/, \"const tran_low_t *input, uint8_t *output, int pitch, int tx_type\";",101],["add_proto qw/void vp9_iht8x8_64_add/, \"const tran_low_t *input, uint8_t *dest, int dest_stride, int tx_type\";",101],["if ($argtype ne \"void\") {",116],["'ret'   => 'void',",123],["if ($rettype ne \"void\") {",151]],"useCount":14686},{"word":"vpxor","context":[["vpxor\t\t$Zmi,$Xmi,$Xmi",68],["vpxor\t\t$Zlo,$Xlo,$Xlo",68],["vpxor\t\t$Zhi,$Xhi,$Xhi",68],["vpxor\t\t$Z1,$Z0,$Z0",70],["&vpxor\t(@X[0],@X[0],@X[-4&7]);\t\t# \"X[0]\"^=\"X[-16]\"",77],["vpxor\t\t$Ii,$T2,$T2",136],["vpxor\t\t$Ij,$T1,$T1",204],["vpxor\t\t$Xlo,$Zlo,$Zlo",238],["vpxor\t\t$Xhi,$Zhi,$Zhi",238],["vpxor\t\t$Xmi,$Zmi,$Zmi",255]],"useCount":6365},{"word":"vr6","context":[["+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6",692],["+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6",692],["+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6",692],["+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6",692],["+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6",692],["+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6",692],["+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6",692],["+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6",692],["+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6",692],["+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6",692]],"useCount":14470},{"word":"w","context":[["if ($line =~ /\\bstatic\\s+const\\s+char\\s*\\*\\s*(\\w+)\\s*\\[\\s*\\]\\s*=\\s*/) {",215],["#!/usr/bin/perl -w",21528],["#! /usr/bin/perl -w",1796],["#!/usr/local/bin/perl -w",1188],["if ($name =~ /[^\\w \\-]/i) { ##has \"must quote\" chars",388],["#!perl -w",349],["#!/usr/bin/env perl -w",269],["if ($line =~ /\\bstatic\\s+char\\s+(\\w+)\\s*\\[\\s*\\]\\s*=\\s*\"/) {",225],["$cmd =~ s/(\\$\\w+)/$1/eeg;\t\t#interpolate $cmd",159],["shift(@w);",157]],"useCount":51286},{"word":"warn","context":[["warn $@ if $@;",323],["#warn \"CSB: c<$c> type<$type> level<$level> remainder<$remainder> coff_set<$coff_set>\\n\";",299],["# warn about #if 0",304],["#warn \"           $line\\n\";",303],["# warn about spacing in #ifdefs",303],["#warn \"STATEMENT<$statement>\\n\";",300],["#warn \"CONDITION<$condition>\\n\";",300],["#warn \"'*' is part of type\\n\";",300],["#warn \"CSB: blk<$blk> off<$off> len<$len>\\n\";",300],["#warn \"line<$line>\\n\";",299]],"useCount":20705},{"word":"warning","context":[["use Bio::EnsEMBL::Utils::Exception qw(throw warning);",137],["-W - enable warning and trace (level=mid=2)",102],["'type' => 'warning'",1406],["# Send out a warning, we should fix the variables that has no",111],["# Add help tables and data for warning detection and supression",119],["# One check warning process returned",119],["} elsif ($res =~ /^.\\s*\\#\\s*(?:error|warning)\\s+(.*)\\b/) {",297],["'type' => 'warning',",186],["$level = \"warn\" if ($level eq \"warning\");",261],["$res =~ s@(\\#\\s*(?:error|warning)\\s+).*@$1$clean@;",297]],"useCount":8527},{"word":"warnings","context":[["print \"total: $cnt_error errors, $cnt_warn warnings, \" .",300],["#use warnings;",331],["use warnings ;",334],["no warnings;",366],["no warnings 'uninitialized';",378],["use warnings FATAL => 'all';",426],["$warnings++;",989],["#use warnings; FIXME - Bug 2505",1565],["--mailback                 only produce a report in case of warnings/errors",280],["use warnings;",44222]],"useCount":57721},{"word":"was","context":[["# Return immediately if no check proceess was started",357],["# Some port was not free(which one has already been printed)",119],["test case was executed:\\n\";",119],["# Test case was ok and called \"skip\"",119],["# Don't repeat if test was skipped",119],["\"The result from queries just before the failure was:\".",119],["# Turn on SSL for _all_ test cases if option --ssl was used",147],["# although mode was set to 0000, but in that case a stat on",149],["# This code was originally developed by Vyatta, Inc.",262],["# one does, and continue as if the #endif was not here.",299]],"useCount":14406},{"word":"we","context":[["# track the line number as we move through the hunk, note that",303],["# Trace the real file/line as we go.",303],["# If we are about to drop off the end, pull in more",300],["# edge is a close comment then we must be in a comment",300],["# This is not a patch, and we are are in 'no-patch' mode so",300],["# If we have no input at all, then there is nothing to report on",299],["# check we are in a valid source file if not then ignore this hunk",303],["#make up the handle for any error we report on this line",303],["# Make sure we remove the line prefixes as we have",296],["# blank context lines so we need to count that too.",303]],"useCount":52662},{"word":"weechat","context":[["weechat::infolist_free($infolist);",210],["return weechat::WEECHAT_RC_OK;",674],["weechat::bar_item_update($SCRIPT_NAME);",146],["while (weechat::infolist_next($infolist))",99],["$str .= weechat::color($bg).",64],["weechat::buffer_set($iset_buffer, \"localvar_set_iset_search_mode\", $search_mode);",60],["weechat::infolist_next($infolist);",60],["weechat::buffer_set($iset_buffer, \"localvar_set_iset_search_value\", $search_value);",50],["weechat::color($bg).",48],["weechat::color($color).",112]],"useCount":6855},{"word":"what","context":[["# Deprecated option unless it's what we know pushbuild uses",148],["# i.e a file can be read regardless what mode we set it to",149],["# to start unless we specify what user to run as, see BUG#30630",149],["# Control what test suites or cases to run",149],["# Control what engine/variation to run",149],["Options to control what test suites or cases to run",149],["# Return of what appears to be an errno should normally be -'ve",199],["# the main body of the table, and what all code points missing from this file",413],["#     Note that contrary to what you might expect, the above is NOT the same",512],["# Find out what is on the end of the line after the",595]],"useCount":10074},{"word":"when","context":[["plugin_parameters : other parameters added when the plugin is called by the dopop function",456],["# closing brace should have a space following it when it has anything",303],["#   :   when part of a bitfield",296],["# A colon needs no spaces before when it is",296],["# Only applies when adding the entry originally, after that we do not have",221],["sub get_no2_reservoirs { #get species that are produced when radical species react with NO2",178],["# Extra options used when starting mysqld",152],["# Remember options used when starting",149],["# we need it when valgrinding or debugging non installed binary",149],["mtr_error(\"Can't use --extern when using debugger\");",147]],"useCount":16557},{"word":"where","context":[["--debug KEY=[0|1]          turn on/off debugging of KEY, where KEY is one of",280],["where N is the column (from 1) that contains the id.",386],["# Make sure the directory where it points exist",298],["my ($where, $prefix) = ($-[1], $1);",296],["# where necessary.",296],["($where != 0 || $prefix !~ /^.\\s+$/) &&",294],["where",268],["$production->{$process}->where($net_effect < 0) .= 0;",190],["$consumption->{$process}->where($net_effect > 0) .= 0;",190],["where:",173]],"useCount":13067},{"word":"which","context":[["# This file contains source code included with or based on SQL-Ledger which",164],["\"LINUX_VERSION_CODE should be avoided, code should be for the version to which it is merged\\n\" . $herecurr);",182],["if (which($net_effect < 0)->nelem > 0) { #which gets indices of non-0 values, nelem get nr of elements",190],["if (which($net_effect > 0)->nelem > 0) {",190],["if (which($net_effect < 0)->nelem > 0) { #which gets indices of non-0 values, nelem get nr of elements",190],["# printk includes all preceding printk's which have no newline on the end.",210],["# Handle definitions which produce identifiers with",232],["# If there were whitespace errors which cleanpatch can fix",248],["my $which = $1;",285],["# Checks which are anchored on the added line.",303]],"useCount":16638},{"word":"while","context":[["while(<IN>) {",1121],["while (<IN>) {",3399],["while (<>) {",3246],["while (1) {",2885],["while (<$fh>) {",1920],["while (<FILE>) {",1530],["while (<F>) {",1367],["while(1) {",1205],["while (<STDIN>) {",937],["while(<>) {",991]],"useCount":98882},{"word":"width","context":[["| width=\"400\" valign=\"top\" |",73],["<table width=\"100%\">",397],["print \"<img src='img/blank.gif' alt='' width='250' height='1'><br>\";",140],["<table width=100%>",1897],["my $pod_txt = Pod::Text->new (sentence => 0, width => 78);",128],["# tab-width: 4",126],["# tab-width: 8",116],["# or should it be fixed width column parsing? It does not",111],["width           => \"500\",",95],[". ( $count ? \"\" : \" width=\\\"$WIDTHCOLICON\\\"\" )",88]],"useCount":9484},{"word":"will","context":[["# database, Version 6.0.0.  Any changes made here will be lost!",1994],["# database, Version 6.1.0.  Any changes made here will be lost!",2613],["# Any changes made here will be lost!",2921],["# database, Version 6.2.0.  Any changes made here will be lost!",1762],["# database, Version 5.2.0.  Any changes made here will be lost!",1670],["# database, Version 6.3.0.  Any changes made here will be lost!",1161],["# Get AdWords Client, credentials will be read from ~/adwords.properties.",448],["# database, Version 7.0.0.  Any changes made here will be lost!",405],["# We need \\b after 'init' otherwise 'initconst' will cause a false positive in a check",258],["\"CVS style keyword markers, these will _not_ be updated\\n\". $herecurr);",193]],"useCount":34183},{"word":"with","context":[["# purpose with or without fee is hereby granted, provided that the above",308],["# Should not end with a space.",584],["# The name this swash is to be known by, with the format of the mappings in",413],["# Should start with a space.",584],["the documentation and/or other materials provided with the",644],["Redistribution and use in source and binary forms, with or without",745],["# Redistribution and use in source and binary forms, with or without",921],["# the equals (or colon) can be combined with anything to the right.  Thus,",2251],["As a special exception, if you link this library with other files,",1585],["Associated Names and Septs (with spelling variations):",330]],"useCount":75291},{"word":"without","context":[["# purpose with or without fee is hereby granted, provided that the above",308],["\"adding a line without newline at end of file\\n\" . $herecurr);",193],["--no-tree                  run without a kernel tree",267],["# check for spinlock_t definitions without a comment.",285],["# check for memory barriers without a comment.",295],["# check for adding lines without a newline.",300],["Redistribution and use in source and binary forms, with or without",745],["# Redistribution and use in source and binary forms, with or without",921],["# the name or existence of this file are subject to change without notice.",3636],["# name or existence of this file are subject to change without notice.  Don't",6892]],"useCount":20784},{"word":"word","context":[["foreach my $word (@words) {",326],["last if ($word =~ m/^#/);",240],["push (@conf_args, $word);",240],["$word =~ tr/[a-z]/[A-Z]/;",193],["next if ($word =~ m/^\\s*$/);",193],["$word =~ s/^\\s*//g;",193],["next if ($word =~ m/^\\s*#/);",193],["$word =~ s/\\s+/ /g;",193],["my ($word) = @_;",132],["$word =~ s/\\s*\\n?$//g;",193]],"useCount":14237},{"word":"world","context":[["<option value=\\\"/-/world/east-asia/brunei/\\\" >&nbsp;&raquo; Brunei</option>",30],["<option value=\\\"/-/world/americas/dominican-republic/\\\" >&nbsp;&raquo; Dominican Republic</option>",30],["# and make them world readable",119],["# The problem presents some challenges. In an ideal world, we could",33],["<option value=\\\"/-/world/americas/barbados/\\\" >&nbsp;&raquo; Barbados</option>",30],["<option value=\\\"/-/world/eastern-central-europe/hungary/\\\" >&nbsp;&raquo; Hungary</option>",30],["<option value=\\\"/-/world/americas/venezuela/\\\" >&nbsp;&raquo; Venezuela</option>",30],["<option value=\\\"/-/world/western-europe/greece/\\\" >&nbsp;&raquo; Greece</option>",30],["<option value=\\\"/-/world/central-asia-caucasus/armenia/\\\" >&nbsp;&raquo; Armenia</option>",30],["<option value=\\\"/-/world/middle-east-north-africa/jordan/\\\" >&nbsp;&raquo; Jordan</option>",30]],"useCount":6873},{"word":"write","context":[[":- use_module(library(write)).",125],["--logpath=PATH                      write logfile to PATH (default: .)",127],["&movups\t(&QWP(16*0,$out),$inout0);\t# write output",144],["vst1.8\t{@XMM[0]-@XMM[1]}, [$out]!\t@ write output",234],["$debug->write(",236],["# write init file for mysqld or client",272],["write;",328],["movdqu\t@XMM[0], 0x00($out)\t# write output",514],["# error log and write all lines that look",119],["or mtr_error(\"Can't write to $path_config_file: $!\");",119]],"useCount":16028},{"word":"www","context":[["# http://www.ncftp.com/ncftpd/doc/misc/ephemeral_ports.html",149],["#     Web: http://www.sql-ledger.com",145],["# UTF-8 regex found at http://www.w3.org/International/questions/qa-forms-utf-8.en.php",302],["L<The SEED Project|http://www.theseed.org>",662],["WWW:           http://www.swi.psy.uva.nl/projects/xpce/",688],["# details see http://www.openssl.org/~appro/cryptogams/.",1012],["WWW:           http://www.swi-prolog.org",1432],["#     Web: http://www.sql-ledger.org",207],["# http://www.ledgersmb.org/",177],["<http://www.ensembl.org/Help/Contact>.",137]],"useCount":10542},{"word":"x","context":[["} elsif ($ctx !~ /[EWC]x[CWE]/) {",299],["}x;",3487],["my $clean = 'X' x length($1);",598],["my $x = shift;",395],["@ENV{qw(LANGUAGE LANG LC_ALL)} = ('C') x 3;",341],["my @x = split(/\\t/);",307],["my $ctx = \"${a}x${c}\";",303],["$res .= $type x length($1);",300],["if ($ctx !~ /.x[WEBC]/ &&",299],["if ($ctx !~ /[WEOBC]x[^W]/ && $ctx !~ /[^W]x[WOBEC]/) {",299]],"useCount":115680},{"word":"xA0","context":[["\"\\xF3\\xA0\\xA0\\xB1\" => \"\",                     # U+E0831 =>",13],["\"\\xF3\\xA0\\xA0\\xB1\" => \"\",                     # U+E0831 =>",13],["\"\\xF3\\xA0\\xAE\\xB8\" => \"\",                     # U+E0BB8 =>",13],["\"\\xF3\\xA0\\x8E\\x92\" => \"\",                     # U+E0392 =>",13],["\"\\xF3\\xA0\\x83\\x97\" => \"\",                     # U+E00D7 =>",13],["\"\\xF3\\xA0\\xA9\\x90\" => \"\",                     # U+E0A50 =>",13],["\"\\xF3\\xA0\\x93\\xBE\" => \"\",                     # U+E04FE =>",13],["\"\\xE1\\xBE\\xA0\" => \"\\x{1F68}\\x{0399}\",         # U+1FA0 => 1F68 0399",22],["\"\\xE1\\xBE\\xA0\" => \"\\x{1F60}\\x{03B9}\",         # U+1FA0 => 1F60 03B9",35],["|  \\xE0[\\xA0-\\xBF][\\x80-\\xBF]        # excluding overlongs",304]],"useCount":55559},{"word":"xBF","context":[["[\\xC2-\\xDF][\\x80-\\xBF]               # non-overlong 2-byte",176],["|  \\xED[\\x80-\\x9F][\\x80-\\xBF]        # excluding surrogates",304],["|  \\xF0[\\x90-\\xBF][\\x80-\\xBF]{2}     # planes 1-3",304],["|  \\xE0[\\xA0-\\xBF][\\x80-\\xBF]        # excluding overlongs",304],["| [\\xE1-\\xEC\\xEE\\xEF][\\x80-\\xBF]{2}  # straight 3-byte",304],["|  \\xE0[\\xA0-\\xBF][\\x80-\\xBF]        # excluding overlongs",304],["|  \\xF0[\\x90-\\xBF][\\x80-\\xBF]{2}     # planes 1-3",304],["| [\\xF1-\\xF3][\\x80-\\xBF]{3}          # planes 4-15",304],["|  \\xF4[\\x80-\\x8F][\\x80-\\xBF]{2}     # plane 16",304],["| [\\xC2-\\xDF][\\x80-\\xBF]             # non-overlong 2-byte",128]],"useCount":6515},{"word":"xE1","context":[["| [\\xE1-\\xEC\\xEE\\xEF][\\x80-\\xBF]{2}  # straight 3-byte",304],["\"\\xE1\\xBA\\x97\" => \"\\x{0054}\\x{0308}\",         # U+1E97 => 0054 0308",44],["\"\\xE1\\xBF\\xA3\" => \"\\x{03A5}\\x{0308}\\x{0301}\", # U+1FE3 => 03A5 0308 0301",44],["\"\\xE1\\xBD\\x92\" => \"\\x{03A5}\\x{0313}\\x{0300}\", # U+1F52 => 03A5 0313 0300",44],["\"\\xE1\\xBF\\x97\" => \"\\x{0399}\\x{0308}\\x{0342}\", # U+1FD7 => 0399 0308 0342",44],["\"\\xE1\\xBF\\xB6\" => \"\\x{03A9}\\x{0342}\",         # U+1FF6 => 03A9 0342",44],["\"\\xE1\\xBF\\xA4\" => \"\\x{03A1}\\x{0313}\",         # U+1FE4 => 03A1 0313",44],["\"\\xE1\\xBD\\x90\" => \"\\x{03A5}\\x{0313}\",         # U+1F50 => 03A5 0313",44],["\"\\xE1\\xBF\\xA7\" => \"\\x{03A5}\\x{0308}\\x{0342}\", # U+1FE7 => 03A5 0308 0342",44],["\"\\xE1\\xBF\\x96\" => \"\\x{0399}\\x{0342}\",         # U+1FD6 => 0399 0342",44]],"useCount":6194},{"word":"xEF","context":[["\"\\xEF\\xAC\\x83\" => \"\\x{0066}\\x{0066}\\x{0069}\", # U+FB03 => 0066 0066 0069",35],["| [\\xE1-\\xEC\\xEE\\xEF][\\x80-\\xBF]{2}  # straight 3-byte",304],["\"\\xEF\\xAC\\x93\" => \"\\x{0574}\\x{0576}\",         # U+FB13 => 0574 0576",35],["\"\\xEF\\xAC\\x80\" => \"\\x{0066}\\x{0066}\",         # U+FB00 => 0066 0066",35],["\"\\xEF\\xAC\\x86\" => \"\\x{0073}\\x{0074}\",         # U+FB06 => 0073 0074",35],["\"\\xEF\\xAC\\x84\" => \"\\x{0066}\\x{0066}\\x{006C}\", # U+FB04 => 0066 0066 006C",35],["\"\\xEF\\xAC\\x97\" => \"\\x{0574}\\x{056D}\",         # U+FB17 => 0574 056D",35],["\"\\xEF\\xAC\\x95\" => \"\\x{0574}\\x{056B}\",         # U+FB15 => 0574 056B",35],["\"\\xEF\\xAC\\x94\" => \"\\x{0574}\\x{0565}\",         # U+FB14 => 0574 0565",35],["\"\\xEF\\xAC\\x96\" => \"\\x{057E}\\x{0576}\",         # U+FB16 => 057E 0576",35]],"useCount":8493},{"word":"xF3","context":[["\"\\xF3\\xA0\\xB3\\x8C\" => \"\",                     # U+E0CCC =>",13],["| [\\xF1-\\xF3][\\x80-\\xBF]{3}          # planes 4-15",304],["\"\\xF3\\xA0\\x9C\\x89\" => \"\",                     # U+E0709 =>",13],["\"\\xF3\\xA0\\xB1\\xB1\" => \"\",                     # U+E0C71 =>",13],["\"\\xF3\\xA0\\xB6\\xBD\" => \"\",                     # U+E0DBD =>",13],["\"\\xF3\\xA0\\xAE\\xBC\" => \"\",                     # U+E0BBC =>",13],["\"\\xF3\\xA0\\xB6\\xAA\" => \"\",                     # U+E0DAA =>",13],["\"\\xF3\\xA0\\x86\\xAB\" => \"\",                     # U+E01AB =>",13],["\"\\xF3\\xA0\\xB4\\xB4\" => \"\",                     # U+E0D34 =>",13],["\"\\xF3\\xA0\\xBB\\x91\" => \"\",                     # U+E0ED1 =>",13]],"useCount":53552},{"word":"xml","context":[["if ($xml) {",201],["<?xml version=\"1.0\" encoding=\"UTF-8\"?>",169],["print $input->header(-type => 'application/vnd.sun.xml.calc',",151],["my $xml = new XML::Simple;",99],["print \"<?xml version='1.0'?>\\n\";",71],["my $xml;",69],["my $xml = XML::Twig->new(",61],["return $xml;",61],["print $xml;",60],["<?xml version=\"1.0\" encoding=\"utf-8\"?>",57]],"useCount":7608},{"word":"xmm0","context":[["pandn\t%xmm2, %xmm0",102],["pxor\t%xmm0, %xmm0",104],["pxor\t%xmm0, %xmm0",104],["pand\t%xmm4,%xmm0",108],["por\t%xmm3,%xmm0",108],["por\t%xmm2,%xmm0",170],["por\t%xmm1,%xmm0",181],["por\t%xmm0, %xmm2",204],["pxor\t%xmm0,%xmm0",239],["pxor\t%xmm0,%xmm0",239]],"useCount":10291},{"word":"xmm1","context":[["pxor\t%xmm1,%xmm1",77],["&pxor\t(\"xmm1\",\"xmm1\");",100],["por\t%xmm3,%xmm1",82],["&pxor\t(\"xmm1\",\"xmm1\");",100],["movdqa\t%xmm4, %xmm1",102],["pandn\t%xmm3, %xmm1",102],["movdqa\t%xmm5, %xmm1",102],["pand\t%xmm5,%xmm1",108],["por\t%xmm1,%xmm0",181],["por\t%xmm1, %xmm3",266]],"useCount":6411},{"word":"xor","context":[["&xor\t(\"eax\",\"ebx\");",176],["xor\t$rem,$Zhi,$Zhi",183],["&xor\t(\"eax\",\"eax\");",493],["xor\t%rcx,%rcx\t\t# arg1, UNW_FLAG_NHANDLER",331],["xor\t%eax,%eax",289],["&xor\t($s3,&DWP(12,$key));",282],["&xor\t($s2,&DWP(8,$key));",282],["&xor\t($s1,&DWP(4,$key));",282],["xor\t%rax,%rax",253],["&xor\t($out,$tmp);",240]],"useCount":28427},{"word":"y","context":[["my $y;",140],["$y++;",523],["'y' =>",500],["'y',",264],["chomp $verein[$y];",260],["$y = 0;",205],["'EXTRA_CPPFLAGS' => 'cppflags-y',",167],["'EXTRA_CFLAGS' =>   'ccflags-y',",167],["'EXTRA_AFLAGS' =>   'asflags-y',",167],["'EXTRA_LDFLAGS' =>  'ldflags-y',",167]],"useCount":18314},{"word":"year","context":[["<select name=year>$selectaccountingyear</select>",66],["($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) = localtime(time);",68],["my ( $year, $month, $day ) = Today();",97],["my $year;",100],["$value =~ s/YYYY/$year/g;",107],["sprintf(\"%4d-%02d-%02d %02d:%02d:%02d\", $year+1900, $mon+1, $day, $hour, $min, $sec);",111],["my ($sec, $min, $hour, $day, $mon, $year, $wday, $yday, $isdst) = @_;",111],["my ($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) =",116],["my ($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) = localtime(time);",175],["$year += 1900;",578]],"useCount":6018},{"word":"yes","context":[["my @default_valgrind_args= (\"--show-reachable=yes\");",141],["mtr_add_arg($args, \"--leak-check=yes\");",141],["if (vpx_config(\"CONFIG_VP9_HIGHBITDEPTH\") eq \"yes\") {",317],["if($EMMC_SUPPORT eq \"yes\"){",293],["( New == yes ->",195],["yes.",166],["if ($EMMC_SUPPORT eq \"yes\"){",160],["'yes',",159],["push(@valgrind_args, \"--trace-children=yes\")",149],["if ($value eq \"--gen-suppressions=all --show-reachable=yes\") {",148]],"useCount":8136},{"word":"you","context":[["quest::emote(\"smiles warmly as he hands you your reward.\");",82],["As a special exception, if you link this library with other files,",1585],["\"trailing statements should be on next line (or did you mean 'else if'?)\\n\" .",73],["#     Note that contrary to what you might expect, the above is NOT the same",512],["#  you should have received as part of this distribution. The terms           #",161],["# you should have received as part of this distribution. The terms",152],["# now $scalar contains the pod from $podfile you can see this below",128],["(ignored if you have Linux::Inotify2 installed)",121],["# of those above. If you wish to allow use of your version of this file only",116],["# Don't add --quiet; you will loose the summary reports.",83]],"useCount":13796},{"word":"z","context":[["my $z;",116],["$var =~ /[A-Z][a-z]|[a-z][A-Z]/ &&",104],["$var =~ /[A-Z][a-z]|[a-z][A-Z]/ &&",104],["next if -z $expect_file;",114],["#\t\tif (($line=~/[\\w_][a-z\\d]+[A-Z]/) and !($line=~/print/)) {",166],["$word =~ tr/[a-z]/[A-Z]/;",193],["if ($line=~/^.\\s+[A-Za-z\\d_]+:(?![0-9]+)/ and",280],["[A-Za-z_][A-Za-z\\d_]*",281],["(?:\\s*\\#\\#\\s*[A-Za-z_][A-Za-z\\d_]*)*",281],["!($line=~/^. [A-Za-z\\d_]+:/) and !($line=~/^.\\s+default:/)) {",281]],"useCount":11967},{"word":"zero","context":[["veor\t\t$zero,$zero,$zero",110],["slt\t$a2,$t_1,$zero",180],["vext.8\t$tmp,$zero,$tmp,#12",132],["adcx\t$zero,%r14\t\t# cf=0",130],["vsldoi\t\t$tmp,$zero,$tmp,12\t# >>32",126],["# Facility stays disabled if timeout value is zero.",119],["veor\t\t$zero,$zero,$zero",110],["veor\t\t$zero,$zero,$zero",110],["xor\t$zero,$zero\t\t# cf=0, of=0",94],["xor\t$zero,$zero\t\t# cf=0, of=0",94]],"useCount":6112},{"word":"~","context":[["$fixed[$fixlinenr] =~",1382],["$0 =~ m/(.*[\\/\\\\])[^\\/\\\\]+$/; $dir=$1;",908],["if ($block =~/\\b(?:if|for|while)\\b/) {",589],["$s =~ s/\\n.*//g;",595],["$stmt =~ s/(^|\\n)./$1/g;",598],["$stmt =~ s/^\\s*//;",601],["$stmt =~ s/\\s*$//;",602],["$name =~ s/^\\\"|\\\"$//g;",697],["if($text=~/Hail/i){",806],["my @stmt_lines = ($stmt =~ /\\n/g);",897]],"useCount":349145}]